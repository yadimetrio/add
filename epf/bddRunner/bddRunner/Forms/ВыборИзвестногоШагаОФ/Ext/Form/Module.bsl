Перем Ванесса;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПриОткрытии()
	ПоказыватьСлужебныеШаги = Истина; //TODO - временно, нужно удалить
	
	Ванесса = ВладелецФормы;
	ПриСозданииНаСервере();

	//Если ЯзыкГенератораGherkin = "ru" Тогда
	//	Элементы.ПоказатьПеревод.Видимость = Ложь;
	//Иначе
	//	Если Ванесса.КешДанныеПеревода.ТаблицаПеревода = Неопределено Тогда
	//		Ванесса.ПеревестиТекст("");
	//		КешТаблицыПеревода = Ванесса.КешДанныеПеревода.ТаблицаПеревода;
	//	Иначе
	//		Если Ванесса.КешДанныеПеревода.Язык = ЯзыкГенератораGherkin Тогда
	//			КешТаблицыПеревода = Ванесса.КешДанныеПеревода.ТаблицаПеревода;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	ОбновитьДеревоШагов();
КонецПроцедуры

Процедура ПриСозданииНаСервере() 
	//ТаблицаИзвестныхStepDefinition.Загрузить(Параметры.ТаблицаИзвестныхStepDefinition.Выгрузить());

	//ЯзыкГенератораGherkin = Параметры.ЯзыкГенератораGherkin;
	//Элементы.ПоказатьШагиНаРусском.Видимость = (ЯзыкГенератораGherkin <> "ru");

	//КаталогИнструментов   = Параметры.КаталогИнструментов;
	//МакетШаблонПеревода   = Параметры.МакетШаблонПеревода;
	//ДвоичныеДанныеФайлПеревода = ЗначениеВСтрокуВнутр(Параметры.ДвоичныеДанныеФайлПеревода);

	Для Каждого СтрокаТаблицаУжеСуществующихСценариев Из ТаблицаУжеСуществующихСценариев Цикл
		СтрокаТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхStepDefinition.Добавить();

		СтрокаТаблицаИзвестныхStepDefinition.ИмяФайла           = СтрокаТаблицаУжеСуществующихСценариев.ИмяФайла;
		СтрокаТаблицаИзвестныхStepDefinition.ТипШага            = СтрокаТаблицаУжеСуществующихСценариев.ТипШага;
		СтрокаТаблицаИзвестныхStepDefinition.ПредставлениеТеста = СтрокаТаблицаУжеСуществующихСценариев.ПримерИспользования;
		СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага       = СтрокаТаблицаУжеСуществующихСценариев.ОписаниеШага;
		СтрокаТаблицаИзвестныхStepDefinition.СтрокаДляПоиска    = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
		СтрокаТаблицаИзвестныхStepDefinition.id                 = СтрокаТаблицаУжеСуществующихСценариев.Снипет;
	КонецЦикла;
	
	ТабОригинал = ТаблицаИзвестныхStepDefinition;
	ТабОригинал.Колонки.Добавить("ПредставлениеТестаОригинал",Новый ОписаниеТипов("Строка"));
	ТабОригинал.Колонки.Добавить("ОписаниеШагаОригинал",Новый ОписаниеТипов("Строка"));
		
КонецПроцедуры

Процедура ОбновитьДеревоШагов()
	ДвДанныеvbFeatureReader = ПолучитьДДFeatureReader();
	ЗаполнитьДеревоИзвестныхШаговНаСервере(ДвДанныеvbFeatureReader);
КонецПроцедуры

Функция ПолучитьДДFeatureReader()
	Возврат Новый ДвоичныеДанные(Ванесса.ПолучитьПутьКFeatureReader());
КонецФункции

Процедура ЗаполнитьДеревоИзвестныхШаговНаСервере(ДвДанныеvbFeatureReader)
	ТабОригинал = ТаблицаИзвестныхStepDefinition;
	//ТабОригинал.Колонки.Добавить("ПредставлениеТестаОригинал",Новый ОписаниеТипов("Строка"));
	//ТабОригинал.Колонки.Добавить("ОписаниеШагаОригинал",Новый ОписаниеТипов("Строка"));

	ТаблицаПеревода = Неопределено;
	//Если ЯзыкГенератораGherkin <> "ru" Тогда
	//	ТаблицаПеревода = ПолучитьТаблицуПеревода(ДвДанныеvbFeatureReader);
	//	ЗаменитьПредставлениеТестаВТаблице(ТаблицаПеревода,ТабОригинал);
	//КонецЕсли;

	//Дерево = РеквизитФормыВЗначение("ДеревоШагов");
	Дерево = ДеревоШагов;

	Если Ложь Тогда
		Дерево = Новый ДеревоЗначений;
	КонецЕсли;
	Дерево.Строки.Очистить();

	//получить список шагов с учетом фильтра
	Если ЗначениеЗаполнено(ФильтрДереваШагов) Тогда

		ТабРезультат = ПолучитьРезультатПоиска(ТабОригинал,"ПредставлениеТеста");

		ТабРезультат.Индексы.Добавить("СтрокаДляПоиска");

		ТабРезультат2 = ПолучитьРезультатПоиска(ТабОригинал,"ОписаниеШага");
		ДополнитьТаблицуРезультатаПоиска(ТабРезультат,ТабРезультат2);

		//Если ПоказатьШагиНаРусском Тогда
		//	ТабРезультат3 = ПолучитьРезультатПоиска(ТабОригинал,"ОписаниеШагаОригинал");
		//	ДополнитьТаблицуРезультатаПоиска(ТабРезультат,ТабРезультат3);

		//	ТабРезультат4 = ПолучитьРезультатПоиска(ТабОригинал,"ПредставлениеТестаОригинал");
		//	ДополнитьТаблицуРезультатаПоиска(ТабРезультат,ТабРезультат4);
		//КонецЕсли;
	Иначе
		ТабРезультат = ТабОригинал;
	КонецЕсли;

	Для Каждого СтрТаблицаИзвестныхStepDefinition Из ТабРезультат Цикл
		Тип = СокрЛП(СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве);
		Если ПоказыватьСлужебныеШаги И Тип = "" Тогда
			Тип = "Служебные";
		ИначеЕсли Тип = "" Тогда
			Продолжить;
		КонецЕсли;

		ДобавитьТипыШагов(Дерево,Тип,ТаблицаПеревода); //группы
	КонецЦикла;

	Для Каждого СтрТаблицаИзвестныхStepDefinition Из ТабРезультат Цикл
		Тип = СокрЛП(СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве);
		Если ПоказыватьСлужебныеШаги И Тип = "" Тогда
			Тип = "Служебные";
		ИначеЕсли Тип = "" Тогда
			Продолжить;
		КонецЕсли;

		Данные = СтрТаблицаИзвестныхStepDefinition;

		ДобавитьШаги(Дерево,Тип,Данные.ПредставлениеТеста,Данные.ОписаниеШага,Данные.ИмяФайла,ТаблицаПеревода,СтрТаблицаИзвестныхStepDefinition);
	КонецЦикла;

	СделатьСортировкуДерева(Дерево);

	//ЗначениеВРеквизитФормы(Дерево,"ДеревоШагов");

	//Элементы.ДеревоШаговПредставлениеТестаОригинал.Видимость = ПоказатьШагиНаРусском;
	//Элементы.ДеревоШаговПредставлениеТестаОригинал.Видимость = ПоказатьШагиНаРусском;
КонецПроцедуры

Функция ПолучитьРезультатПоиска(ТаблицаДанных,ИмяКолонки)
	Построитель = Новый ПостроительЗапроса;
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаДанных);

	тОтбор = Построитель.Отбор.Добавить(ИмяКолонки);
	тОтбор.ВидСравнения = ВидСравнения.Содержит;
	тОтбор.Значение = ФильтрДереваШагов;
	тОтбор.Использование = Истина;

	Построитель.Выполнить();
	Возврат Построитель.Результат.Выгрузить();
КонецФункции

Процедура ДополнитьТаблицуРезультатаПоиска(ТабРезультат,ТабРезультат2)
	Для Каждого СтрокаТабРезультат2 Из ТабРезультат2 Цикл
		СтрокаТабРезультат = ТабРезультат.Найти(СтрокаТабРезультат2.СтрокаДляПоиска,"СтрокаДляПоиска");
		Если СтрокаТабРезультат = Неопределено Тогда
			СтрокаТабРезультат = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабРезультат,СтрокаТабРезультат2);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьТипыШагов(Дерево,Тип,ТаблицаПеревода)
	НайденныеСтрокиДерева = Дерево.Строки.НайтиСтроки(Новый Структура("ПолныйТипШага",Тип),Истина);
	Если НайденныеСтрокиДерева.Количество() = 0 Тогда
		ТекСтроки = Дерево.Строки;
		МассивТип = РазложитьСтрокуВМассивПодстрок(Тип,".");
		ПолныйТипШага = "";
		Для Каждого ПодТип Из МассивТип Цикл
			ЕстьПеревод = Ложь;

			Если ТаблицаПеревода <> Неопределено Тогда
				СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(ПодТип),"ОригиналРусскийШагНРег");
				Если СтрокаТаблицаПеревода <> Неопределено Тогда
					Если ЗначениеЗаполнено(СтрокаТаблицаПеревода.ТекстПереводаШаг) Тогда
						ПодТип = СтрокаТаблицаПеревода.ТекстПереводаШаг;
					КонецЕсли;
					ЕстьПеревод = Истина;
				КонецЕсли;
			КонецЕсли;

			Если ПолныйТипШага = "" Тогда
				ПолныйТипШага = ПодТип;
			Иначе
				ПолныйТипШага = ПолныйТипШага + "." + ПодТип;
			КонецЕсли;

			НайденныеСтрокиДерева = ТекСтроки.НайтиСтроки(Новый Структура("ТипШага",ПодТип),Ложь);
			Если НайденныеСтрокиДерева.Количество() = 0 Тогда
				ТекСтрока               = ТекСтроки.Добавить();
				ТекСтрока.ТипШага       = ПодТип;
				ТекСтрока.ПолныйТипШага = ПолныйТипШага;
				ТекСтрока.Язык          = "ru";
				Если ТаблицаПеревода <> Неопределено и ЕстьПеревод Тогда
					ТекСтрока.Язык          = ЯзыкГенератораGherkin;
				КонецЕсли;

				ТекСтроки = ТекСтрока.Строки;
				
				Если Не ЗначениеЗаполнено(ТекСтрока.ПредставлениеТеста) Тогда
					ТекСтрока.ПредставлениеТеста = ТекСтрока.ПолныйТипШага;
				КонецЕсли;
			Иначе
				ТекСтроки = НайденныеСтрокиДерева[0].Строки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьШаги(Дерево,Тип,ПредставлениеТеста,ОписаниеШага,ИмяФайла,ТаблицаПеревода,СтрТаблицаИзвестныхStepDefinition)

	//Если ТаблицаПеревода <> Неопределено Тогда
	//	Тип = ПреобразоватьТипПеревод(Тип,ТаблицаПеревода);
	//КонецЕсли;

	НайденныеСтрокиДерева = Дерево.Строки.НайтиСтроки(Новый Структура("ПолныйТипШага",Тип),Истина);
	Если НайденныеСтрокиДерева.Количество() = 0 Тогда
		ВызватьИсключение("Не найден тип шага <" + Тип + ">");
	КонецЕсли;


	СтрокаДерева = НайденныеСтрокиДерева[0];
	СтрокаШага   = СтрокаДерева.Строки.Добавить();
	СтрокаШага.ПредставлениеТеста = ПредставлениеТеста;
	СтрокаШага.ОписаниеШага       = ОписаниеШага;
	Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
		СтрокаШага.ОписаниеШагаОригинал = СтрТаблицаИзвестныхStepDefinition.ОписаниеШагаОригинал;
		СтрокаШага.ПредставлениеТестаОригинал = СтрТаблицаИзвестныхStepDefinition.ПредставлениеТестаОригинал;
	КонецЕсли;
	СтрокаШага.ИмяФайла           =  СтрЗаменить(ИмяФайла,"/","\");
	СтрокаШага.Язык               = "ru";

	Если ТаблицаПеревода <> Неопределено Тогда
		СтрокаПоиска = СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска;

		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(СтрокаПоиска,"СтрокаДляПоискаРусский");
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			СтрокаШага.Язык               = ЯзыкГенератораGherkin;
			Если ЗначениеЗаполнено(СтрокаТаблицаПеревода.ТекстПереводаШаг) Тогда
				СтрокаШага.ПредставлениеТеста = УбратьСлужебныеСимволыИзПредставления(СтрокаТаблицаПеревода.ТекстПереводаШаг);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицаПеревода.ТекстПереводаОписание) Тогда
				СтрокаШага.ОписаниеШага       = СтрокаТаблицаПеревода.ТекстПереводаОписание;
			КонецЕсли;
		Иначе
			Сообщить("Не найден перевод для шага <" + ПредставлениеТеста + ">");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция УбратьСлужебныеСимволыИзПредставления(Знач Стр)
	Стр = СтрЗаменить(Стр,"%1 ","");
	Стр = СтрЗаменить(Стр,"%2 ","");
	Стр = СтрЗаменить(Стр,"%3 ","");
	Стр = СтрЗаменить(Стр,"%4 ","");
	Стр = СтрЗаменить(Стр,"%5 ","");
	Стр = СтрЗаменить(Стр,"%6 ","");
	Стр = СтрЗаменить(Стр,"%7 ","");

	Возврат Стр;
КонецФункции

Процедура СделатьСортировкуДерева(Дерево)
	Дерево.Строки.Сортировать("ТипШага,ОписаниеШага",Истина);
КонецПроцедуры

Процедура ПоказыватьСлужебныеШагиПриИзменении(Элемент)
	ДвДанныеvbFeatureReader = ПолучитьДДFeatureReader();
	ЗаполнитьДеревоИзвестныхШаговНаСервере(ДвДанныеvbFeatureReader);
КонецПроцедуры

Процедура ФильтрДереваШаговПриИзменении(Элемент)
	ТекстШага = ПолучитьТекстШагаТекущейСтроки();

	ОбновитьДеревоШагов();
	
	Если Не ЗначениеЗаполнено(ФильтрДереваШагов) Тогда
		Если ЗначениеЗаполнено(ТекстШага) Тогда
			АктивизироватьСтрокуДереваСНужнымШагом(ТекстШага);
		КонецЕсли;

		Возврат;
	КонецЕсли;

	ДеревоФормыСтроки = ДеревоШагов.Строки;
	РазвернутьСтрокиДерева(ДеревоФормыСтроки);
КонецПроцедуры

Функция ПолучитьТекстШагаТекущейСтроки(ВсегдаПолучатьТекстШага = Ложь)
	ТекстШага = Неопределено;
	Если НЕ ЗначениеЗаполнено(ФильтрДереваШагов) или ВсегдаПолучатьТекстШага Тогда
		ТекСтрока = ЭлементыФормы.ДеревоШагов.ТекущаяСтрока;
		Если ТекСтрока <> Неопределено Тогда
			СтрокаДерева = ЭлементыФормы.ДеревоШагов.ДанныеСтроки(ТекСтрока);
			//СтрокаДерева = ДеревоШагов.НайтиПоИдентификатору(ТекСтрока);
			Если СтрокаДерева <> Неопределено Тогда
				ТекстШага = СтрокаДерева.ПредставлениеТеста;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстШага;
КонецФункции

Процедура РазвернутьСтрокиДерева(ДеревоФормыСтроки)
	Для Каждого Строка Из ДеревоФормыСтроки Цикл
		РазвернутьСтрокуДерева(Строка);
		РазвернутьСтрокиДерева(Строка.Строки);
	КонецЦикла;
КонецПроцедуры

Процедура РазвернутьСтрокуДерева(Строка)
	//ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
	//ЭлементыФормы.ДеревоШагов.Развернуть(ИдентификаторСтроки);
	ЭлементыФормы.ДеревоШагов.Развернуть(Строка);
КонецПроцедуры

Процедура АктивизироватьСтрокуДереваСНужнымШагом(ТекСтрока)
	Нашли = Ложь;
	АктивизироватьСтрокуДереваСНужнымШагомРекурсивно(ТекСтрока,ДеревоШагов,Нашли);
КонецПроцедуры

Процедура АктивизироватьСтрокуДереваСНужнымШагомРекурсивно(ПредставлениеТеста,Дерево,Нашли)
	Если Нашли Тогда
		Возврат;
	КонецЕсли;

	ЭлементыДерева = Дерево.Строки;
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ПредставлениеТеста = ПредставлениеТеста Тогда
			ЭлементыФормы.ДеревоШагов.ТекущаяСтрока = СтрокаДерева;//.ПолучитьИдентификатор();
			Нашли = Истина;
			Возврат;
		КонецЕсли;

		АктивизироватьСтрокуДереваСНужнымШагомРекурсивно(ПредставлениеТеста,СтрокаДерева,Нашли);
	КонецЦикла;
КонецПроцедуры
