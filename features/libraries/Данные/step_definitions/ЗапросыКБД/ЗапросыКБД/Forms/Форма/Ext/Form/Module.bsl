
///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-ADD
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-ADD.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;

	ВсеТесты = Новый Массив;

	// описание шагов
	// пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, Снипет, ИмяПроцедуры, ПредставлениеТеста, ОписаниеШага, ТипШагаДляОписания, ТипШагаВДереве);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВМетаданныхЕстьСправочник(Парам01)","ВМетаданныхЕстьСправочник","в метаданных есть Справочник ""Справочник1""",
		"Проверяет наличие справочника в метаданных ИБ", "Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯУдаляюВсеЭлементыСправочника(Парам01)","ЯУдаляюВсеЭлементыСправочника","я удаляю все элементы Справочника ""Справочник1""",
		"Удаляются все элементы справочника", "Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеНетЭлементовСправочника(Парам01)","ВБазеНетЭлементовСправочника","в базе нет элементов Справочника ""Справочник1""",
		"Проверяет отсутствие элементов справочника", "Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюСамОдинЭлементСправочника(Парам01)","ЯСоздаюСамОдинЭлементСправочника","я создаю сам один элемент справочника ""Справочник1""",
		"Создает один элемент справочника с именем ""Созданный элемент 1""", "Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеПоявилсяХотяБыОдинЭлементСправочника(Парам01)","ВБазеПоявилсяХотяБыОдинЭлементСправочника","В базе появился хотя бы один элемент справочника ""Справочник1""",
		"Проверяет наличие хотя бы одного элемента в справочнике", "Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)","ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеНаименованиями","И в базе нет элементов справочника ""Справочник1"" с указанными в таблице наименованиями",
		"Проверяет наличе в базе элементов справочника по наименованиям в таблице при их наличии удаляет","Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯСоздаюЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)","ЯСоздаюЭлементыСправочникаСУказаннымиВТаблицеНаименованиями","И  Я создаю элементы справочника ""Справочник1"" с указанными в таблице наименованиями",
		"Создает элементы справочник по наименованием в таблице","Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)","ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеНаименованиями","И в базе есть элементы справочника ""Справочник1"" с указанными в таблице наименованиями",
		"Проверяет наличе в базе элементов справочника по наименованиям в таблице","Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеНетЭлементовСправочникаСУказаннымВТаблицеРеквизитом(Парам01,Парам02,ТабПарам)","ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеРеквизитом","Дано в базе нет элементов справочника ""Справочник1"" с указанным в таблице реквизитом ""ИмяРеквизита""",
		"Проверяет наличие в базе элементов справочника с реквизитом из таблицы и при их наличии удаляет","Данные.Справочники");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеЗначениямиРеквизита(Парам01,Парам02,ТабПарам)","ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеЗначениямиРеквизита","Тогда в базе есть элементы справочника ""Справочник1"" с указанными в таблице значениями реквизита ""ИмяРеквизита""",
		"Проверяет наличие в базе элементов справочника с реквизитом из таблицы","Данные.Справочники");


	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт

КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт

КонецПроцедуры

//////////

&НаСервереБезКонтекста
Функция ВМетаданныхЕстьСправочникСервер(ВидСправочника)
	Нашел = Ложь;
	Для каждого Элем Из Метаданные.Справочники Цикл
		Имя = Элем.Имя;
		Если НРег(Имя) = НРег(ВидСправочника) Тогда
			Нашел = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Нашел;
КонецФункции

&НаСервереБезКонтекста
Процедура ЯУдаляюВсеЭлементыСправочникаСервер(ВидСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Справочник1.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1";


	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ВидСправочника);
	Результат = Запрос.Выполнить();


	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			СпрОбъект.Удалить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВБазеНетЭлементовСправочникаСервер(ВидСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник1.Ссылка) КАК КолЭлементов
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ВидСправочника);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КолЭлементов;
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Процедура ЯСоздаюОдинЭлементСправочникаСервер(ВидСправочника, Наименование)
	СпрОбъект = Справочники[ВидСправочника].СоздатьЭлемент();
	СпрОбъект.Наименование = Наименование;
	СпрОбъект.Записать();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВБазеПоявилсяХотяБыОдинЭлементСправочникаСервер(ВидСправочника)
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Справочник1.Ссылка) КАК КолЭлементов
		|ИЗ
		|	Справочник.Справочник1 КАК Справочник1";

	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Справочник1",ВидСправочника);
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.КолЭлементов;
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьЭлементСправочникаЕслиОнЕсть(ВидСправочника,ЗначениеРеквизита, ИмяРеквизита = Неопределено)
	РезультатЗапроса = ПолучитьТекстЗапросаПоПоискаПоРеквизиту(ВидСправочника, ЗначениеРеквизита, ИмяРеквизита);

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СпрОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Сообщить("Удаляю элемент справочника <" + ВидСправочника + "> : <" + СпрОбъект[ИмяРеквизита] + ">");
		СпрОбъект.Удалить();
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаПоПоискаПоРеквизиту(Знач ВидСправочника,ЗначениеРеквизита, ИмяРеквизита)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Справочник1.Ссылка
	|ИЗ
	|	Справочник.%1 КАК Справочник1
	|ГДЕ
	|	Справочник1.%2 = &ЗначениеРеквизита";
	
	Если ИмяРеквизита = Неопределено Тогда
		
		ИмяРеквизита = "Наименование";
		
	КонецЕсли; 
	
	ТекстЗапроса =  СтрЗаменить(ТекстЗапроса, "%1", ВидСправочника);
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "%2", ИмяРеквизита);
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);

	Возврат Запрос.Выполнить();

КонецФункции

&НаСервереБезКонтекста
Функция НайтиСправочникаЕслиОнЕсть(ВидСправочника, ЗначениеРеквизита, ИмяРеквизита = Неопределено)
	
	РезультатЗапроса = ПолучитьТекстЗапросаПоПоискаПоРеквизиту(ВидСправочника, ЗначениеРеквизита,ИмяРеквизита);
	
	Возврат Не РезультатЗапроса.Пустой();
КонецФункции


///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//в метаданных есть Справочник "Справочник1"
//@ВМетаданныхЕстьСправочник(Парам01)
Процедура ВМетаданныхЕстьСправочник(ВидСправочника) Экспорт
	Нашел = ВМетаданныхЕстьСправочникСервер(ВидСправочника);

	Ванесса.ПроверитьРавенство(Нашел,Истина,"В метаданных есть вид справочника " + ВидСправочника);
КонецПроцедуры

&НаКлиенте
//я удаляю все элементы Справочника "Справочник1"
//@ЯУдаляюВсеЭлементыСправочника(Парам01)
Процедура ЯУдаляюВсеЭлементыСправочника(ВидСправочника) Экспорт
	ЯУдаляюВсеЭлементыСправочникаСервер(ВидСправочника);
КонецПроцедуры

&НаКлиенте
//в базе нет элементов Справочника "Справочник1"
//@ВБазеНетЭлементовСправочника(Парам01)
Процедура ВБазеНетЭлементовСправочника(ВидСправочника) Экспорт
	КолЭлементов = ВБазеНетЭлементовСправочникаСервер(ВидСправочника);
	Ванесса.ПроверитьРавенство(КолЭлементов,0,"Не должно быть элементов");
КонецПроцедуры

&НаКлиенте
//я создаю сам один элемент справочника "Справочник1"
//@ЯСоздаюСамОдинЭлементСправочника(Парам01)
Процедура ЯСоздаюСамОдинЭлементСправочника(ВидСправочника) Экспорт
	Наименование = "Созданный элемент 1";
	ЯСоздаюОдинЭлементСправочникаСервер(ВидСправочника, Наименование);
КонецПроцедуры

&НаКлиенте
//В базе появился хотя бы один элемент справочника "Справочник1"
//@ВБазеПоявилсяХотяБыОдинЭлементСправочника(Парам01)
Процедура ВБазеПоявилсяХотяБыОдинЭлементСправочника(ВидСправочника) Экспорт
	КолЭлементов = ВБазеПоявилсяХотяБыОдинЭлементСправочникаСервер(ВидСправочника);
	Ванесса.ПроверитьНеРавенство(КолЭлементов,0,"В базе должны быть элементы");
КонецПроцедуры

&НаКлиенте
//Дано в базе нет элементов справочника "Справочник1" с указанными в таблице наименованиями
//@ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)
Процедура ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеНаименованиями(ВидСправочника,ТабПарам) Экспорт
	Для Каждого СтрокаТаблицы Из ТабПарам Цикл
		УдалитьЭлементСправочникаЕслиОнЕсть(ВидСправочника,СтрокаТаблицы.Кол1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
//Тогда в базе есть элементы справочника "Справочник1" с указанными в таблице наименованиями
//@ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)
Процедура ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(ВидСправочника,ТабПарам) Экспорт
	ЭлементСуществует = Ложь;
	Для Каждого СтрокаТаблицы Из ТабПарам Цикл
		ЭлементСуществует = НайтиСправочникаЕслиОнЕсть(ВидСправочника,СтрокаТаблицы.Кол1);
		Если НЕ ЭлементСуществует Тогда
			ВызватьИсключение("Значение " + СтрокаТаблицы.Кол1 + " в справочнике " + ВидСправочника + " не существует!");
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

&НаКлиенте
//И  Я создаю элементы справочника "Справочник1" с указанными в таблице наименованиями
//@ЯСоздаюЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(Парам01,ТабПарам)
Процедура ЯСоздаюЭлементыСправочникаСУказаннымиВТаблицеНаименованиями(ВидСправочника,ТабПарам) Экспорт
	Для Каждого СтрокаТаблицы Из ТабПарам Цикл
		ЯСоздаюОдинЭлементСправочникаСервер(ВидСправочника,СтрокаТаблицы.Кол1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
//Дано в базе нет элементов справочника "Справочник1" с указанным в таблице реквизитом "ИмяРеквизита"
//@ВБазеНетЭлементовСправочникаСУказаннымВТаблицеРеквизитом(Парам01,Парам02,ТабПарам)
Процедура ВБазеНетЭлементовСправочникаСУказаннымиВТаблицеРеквизитом(ВидСправочника, ИмяРеквзитаДляСравнения, ТабПарам) Экспорт
	Для Каждого СтрокаТаблицы Из ТабПарам Цикл
		УдалитьЭлементСправочникаЕслиОнЕсть(ВидСправочника,СтрокаТаблицы.Кол1, ИмяРеквзитаДляСравнения);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
//Тогда в базе есть элементы справочника "Справочник1" с указанным в таблице значением реквизита "ИмяРеквизита"
//@ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеЗначениямиРеквизита(Парам01,Парам02,ТабПарам)
Процедура ВБазеЕстьЭлементыСправочникаСУказаннымиВТаблицеЗначениямиРеквизита(ВидСправочника,ИмяРеквизита,ТабПарам) Экспорт
	ЭлементСуществует = Ложь;
	Для Каждого СтрокаТаблицы Из ТабПарам Цикл
		ЭлементСуществует = НайтиСправочникаЕслиОнЕсть(ВидСправочника,СтрокаТаблицы.Кол1, ИмяРеквизита);
		Если НЕ ЭлементСуществует Тогда
			ВызватьИсключение Ванесса.СтрШаблон_(НСтр("ru = 'Значение %1 реквизита %2  в справочнике %3 не существует!'"), СтрокаТаблицы.Кол1, ИмяРеквизита,ВидСправочника );
		КонецЕсли;
	КонецЦикла
КонецПроцедуры
