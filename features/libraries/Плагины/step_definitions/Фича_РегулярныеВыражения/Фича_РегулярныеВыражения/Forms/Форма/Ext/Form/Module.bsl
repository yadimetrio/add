
#Область Служебные_функции_и_процедуры

&НаКлиенте
// контекст фреймворка Vanessa-ADD
Перем Ванесса;

&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;

&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-ADD.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	// описание шагов
	// пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, Снипет, ИмяПроцедуры, ПредставлениеТеста, ОписаниеШага, ТипШагаДляОписания, ТипШагаВДереве);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюСтрокуКакПеременнуюГлобально(Парам01,Парам02)","ЯЗапоминаюСтрокуКакПеременнуюГлобально","Когда Я запоминаю строку ""Привет"" как переменную ""ПроверяемаяСтрока"" глобально","Сохранение значения как переменной глобального контекста.","Контекст.Контекст сохраняемый.Сохранить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПеременнаяИмеетЗначениеГлобально(Парам01,Парам02)","ПеременнаяИмеетЗначениеГлобально","Тогда переменная ""ИмяПеременной"" имеет значение ""ЗначениеПеременной"" глобально","Проверяет значение переменной глобального контекста. В качестве строки можно передавать мультистрочный текст.","Контекст.Контекст сохраняемый.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПеременнаяСоответствуетРегулярномуВыражению(Парам01,Парам02)","ПеременнаяСоответствуетРегулярномуВыражению","Тогда переменная ""ПроверяемаяСтрока"" соответствует регулярному выражению ""\d\d\d""","Проверяет значение переменной контекста.","Регулярные выражения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГлобальнаяПеременнаяСоответствуетРегулярномуВыражению(Парам01,Парам02)","ГлобальнаяПеременнаяСоответствуетРегулярномуВыражению","Тогда глобальная переменная ""ПроверяемаяСтрока"" соответствует регулярному выражению ""\d\d\d""","Проверяет значение переменной контекста.","Регулярные выражения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюСтрокуКакПеременную(Парам01,Парам02)","ЯЗапоминаюСтрокуКакПеременную","Когда Я запоминаю строку ""Привет"" как переменную ""ПроверяемаяСтрока""","","Контекст.Контекст.Прочитать значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПеременнаяСоответствуетПростомуШаблону(Парам01,Парам02)","ПеременнаяСоответствуетПростомуШаблону","Тогда переменная ""ПроверяемаяСтрока"" соответствует простому шаблону ""*ри*""","Проверяет значение переменной контекста. Возможно использовать шаблонный знак * для пропуска символов.","Регулярные выражения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГлобальнаяПеременнаяСоответствуетПростомуШаблону(Парам01,Парам02)","ГлобальнаяПеременнаяСоответствуетПростомуШаблону","Тогда глобальная переменная ""ПроверяемаяСтрока"" соответствует простому шаблону ""*ри*""","Проверяет значение переменной контекста. Возможно использовать шаблонный знак * для пропуска символов.","Регулярные выражения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПеременнаяНеСоответствуетРегулярномуВыражению(Парам01,Парам02)","ПеременнаяНеСоответствуетРегулярномуВыражению","Тогда переменная ""ПроверяемаяСтрока"" не соответствует регулярному выражению ""\d{4}""","Проверяет значение переменной контекста.","Регулярные выражения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГлобальнаяПеременнаяНеСоответствуетРегулярномуВыражению(Парам01,Парам02)","ГлобальнаяПеременнаяНеСоответствуетРегулярномуВыражению","Тогда глобальная переменная ""ПроверяемаяСтрока"" не соответствует регулярному выражению ""\d{4}""","Проверяет значение переменной контекста.","Регулярные выражения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПеременнаяНеСоответствуетПростомуШаблону(Парам01,Парам02)","ПеременнаяНеСоответствуетПростомуШаблону","Тогда переменная ""ПроверяемаяСтрока"" не соответствует простому шаблону ""*ДругойТекст*""","Проверяет значение переменной контекста. Возможно использовать шаблонный знак * для пропуска символов. В качестве шаблона можно передавать мультистрочный текст.","Регулярные выражения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ГлобальнаяПеременнаяНеСоответствуетПростомуШаблону(Парам01,Парам02)","ГлобальнаяПеременнаяНеСоответствуетПростомуШаблону","Тогда глобальная переменная ""ПроверяемаяСтрока"" не соответствует простому шаблону ""*ДругойТекст*""","Проверяет значение переменной контекста. Возможно использовать шаблонный знак * для пропуска символов. В качестве шаблона можно передавать мультистрочный текст.","Регулярные выражения");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюВПеременнуюСтроку(Парам01,Парам02)","ЯЗапоминаюВПеременнуюСтроку","Когда Я запоминаю в переменную ""ПроверяемаяСтрока"" строку ""значение""","Сохранение значения как переменной контекста. В качестве строки можно передавать мультистрочный текст.","Контекст.Контекст.Сохранить значение");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯЗапоминаюВГлобальнуюПеременнуюСтроку(Парам01,Парам02)","ЯЗапоминаюВГлобальнуюПеременнуюСтроку","Когда я запоминаю в глобальную переменную ""ПроверяемаяСтрока"" строку ""значение""","Сохранение значения как переменной глобального контекста. В качестве строки можно передавать мультистрочный текст.","Контекст.Контекст сохраняемый.Сохранить значение");

	Возврат ВсеТесты;
КонецФункции

&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции

&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции

#КонецОбласти

#Область Работа_со_сценариями

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт

КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт

КонецПроцедуры

#КонецОбласти

///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда Я запоминаю строку "Привет" как переменную "ПроверяемаяСтрока"
//@ЯЗапоминаюСтрокуКакПеременную(Парам01,Парам02)
Процедура ЯЗапоминаюСтрокуКакПеременную(ИсходнаяСтрока, ИмяПеременной) Экспорт
	Попытка
		Контекст.Вставить(ИмяПеременной, ИсходнаяСтрока);
	Исключение
		Ванесса.СохранитьЗначениеВКонтекст(ИмяПеременной, ИсходнаяСтрока);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//Когда Я запоминаю строку "Привет" как переменную "ПроверяемаяСтрока" глобально
//@ЯЗапоминаюСтрокуКакПеременнуюГлобально(Парам01,Парам02)
Процедура ЯЗапоминаюСтрокуКакПеременнуюГлобально(ИсходнаяСтрока, ИмяПеременной) Экспорт
	Попытка
		КонтекстСохраняемый.Вставить(ИмяПеременной, ИсходнаяСтрока);
	Исключение
		Ванесса.СохранитьЗначениеВКонтекстСохраняемый(ИмяПеременной, ИсходнаяСтрока);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
//Тогда переменная "ЗначениеВариантЗаполненияСостава" имеет значение "Отбор" глобально
//@ПеременнаяИмеетЗначениеГлобально(Парам01,Парам02)
Процедура ПеременнаяИмеетЗначениеГлобально(ИмяПеременной, ОжидаемоеЗначение) Экспорт
	ТекущееЗначение = Ванесса.ПолучитьЗначениеИзКонтекстаСохраняемого(ИмяПеременной);

	Если ТекущееЗначение <> ОжидаемоеЗначение Тогда
		ТекстСообщения = "Ожидали, что переменная <%1> будет равна <%2>. Текущее значение <%3>";
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ИмяПеременной);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ОжидаемоеЗначение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%3", ТекущееЗначение);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
//Тогда переменная "ПроверяемаяСтрока" соответствует регулярному выражению "/d/d/d"
//@ПеременнаяСоответствуетРегулярномуВыражению(Парам01,Парам02)
Процедура ПеременнаяСоответствуетРегулярномуВыражению(ИмяПеременной, ШаблонРегулярки) Экспорт

	ПроверяемаяСтрока = "";

	Нашли = ПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);

	Ожидаем = Ванесса.Плагин("УтвержденияBDD");
	Ожидаем.Что(Нашли,
		СтрШаблон_("Ожидали, что проверяемая строка из переменной совпадает с шаблоном регулярного выражения, а это не так
		|Регулярное выражение %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоИстина();
КонецПроцедуры

&НаКлиенте
//Тогда глобальная переменная "ПроверяемаяСтрока" соответствует регулярному выражению "/d/d/d"
//@ГлобальнаяПеременнаяСоответствуетРегулярномуВыражению(Парам01,Парам02)
Процедура ГлобальнаяПеременнаяСоответствуетРегулярномуВыражению(ИмяПеременной, ШаблонРегулярки) Экспорт

	ПроверяемаяСтрока = "";

	Нашли = ГлобальнаяПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);

	Ожидаем = Ванесса.Плагин("УтвержденияBDD");
	Ожидаем.Что(Нашли,
		СтрШаблон_("Ожидали, что проверяемая строка из переменной совпадает с шаблоном регулярного выражения, а это не так
		|Регулярное выражение %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоИстина();
КонецПроцедуры

&НаКлиенте
//Тогда переменная "ПроверяемаяСтрока" не соответствует регулярному выражению "\d{4}"
//@ПеременнаяНеСоответствуетРегулярномуВыражению(Парам01,Парам02)
Процедура ПеременнаяНеСоответствуетРегулярномуВыражению(ИмяПеременной, ШаблонРегулярки) Экспорт

	ПроверяемаяСтрока = "";

	Нашли = ПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);

	Ожидаем = Ванесса.Плагин("УтвержденияBDD");
	Ожидаем.Что(Нашли,
		СтрШаблон_("Ожидали, что проверяемая строка не совпадает с шаблоном регулярного выражения, а она совпадает, что неверно
		|Регулярное выражение %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
//Тогда глобальная переменная "ПроверяемаяСтрока" не соответствует регулярному выражению "\d{4}"
//@ГлобальнаяПеременнаяНеСоответствуетРегулярномуВыражению(Парам01,Парам02)
Процедура ГлобальнаяПеременнаяНеСоответствуетРегулярномуВыражению(ИмяПеременной, ШаблонРегулярки) Экспорт

	ПроверяемаяСтрока = "";

	Нашли = ГлобальнаяПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);

	Ожидаем = Ванесса.Плагин("УтвержденияBDD");
	Ожидаем.Что(Нашли,
		СтрШаблон_("Ожидали, что проверяемая строка не совпадает с шаблоном регулярного выражения, а она совпадает, что неверно
		|Регулярное выражение %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
//Тогда переменная "ПроверяемаяСтрока" соответствует простому шаблону "*ри*"
//@ПеременнаяСоответствуетПростомуШаблону(Парам01,Парам02)
Процедура ПеременнаяСоответствуетПростомуШаблону(ИмяПеременной, ШаблонРегулярки) Экспорт

	ПроверяемаяСтрока = "";
	Нашли = ПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);

	Ожидаем = Ванесса.Плагин("УтвержденияBDD");
	Ожидаем.Что(Нашли,
		СтрШаблон_("Ожидали, что проверяемая строка совпадает с шаблоном регулярного выражения, а это не так
		|Шаблон проверки %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоИстина();
КонецПроцедуры

&НаКлиенте
//Тогда глобальная переменная "ПроверяемаяСтрока" соответствует простому шаблону "*ри*"
//@ГлобальнаяПеременнаяСоответствуетПростомуШаблону(Парам01,Парам02)
Процедура ГлобальнаяПеременнаяСоответствуетПростомуШаблону(ИмяПеременной, ШаблонРегулярки) Экспорт

	ПроверяемаяСтрока = "";
	Нашли = ГлобальнаяПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);

	Ожидаем = Ванесса.Плагин("УтвержденияBDD");
	Ожидаем.Что(Нашли,
		СтрШаблон_("Ожидали, что проверяемая строка совпадает с шаблоном регулярного выражения, а это не так
		|Шаблон проверки %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоИстина();
КонецПроцедуры

&НаКлиенте
//Тогда переменная "ПроверяемаяСтрока" не соответствует простому шаблону "*ДругойТекст*"
//@ПеременнаяНеСоответствуетПростомуШаблону(Парам01,Парам02)
Процедура ПеременнаяНеСоответствуетПростомуШаблону(ИмяПеременной, ШаблонРегулярки) Экспорт
	ПроверяемаяСтрока = "";
	Нашли = ПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);

	Ожидаем = Ванесса.Плагин("УтвержденияBDD");
	Ожидаем.Что(Нашли,
		СтрШаблон_("Ожидали, что проверяемая строка не совпадает с простым шаблоном, а она совпадает, что неверно
		|Шаблон проверки %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
//Тогда глобальная переменная "ПроверяемаяСтрока" не соответствует простому шаблону "*ДругойТекст*"
//@ГлобальнаяПеременнаяНеСоответствуетПростомуШаблону(Парам01,Парам02)
Процедура ГлобальнаяПеременнаяНеСоответствуетПростомуШаблону(ИмяПеременной, ШаблонРегулярки) Экспорт
	ПроверяемаяСтрока = "";
	Нашли = ГлобальнаяПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока);

	Ожидаем = Ванесса.Плагин("УтвержденияBDD");
	Ожидаем.Что(Нашли,
		СтрШаблон_("Ожидали, что проверяемая строка не совпадает с простым шаблоном, а она совпадает, что неверно
		|Шаблон проверки %1
		|Имя переменной %2
		|Проверяемая строка:
		|%3", ШаблонРегулярки, ИмяПеременной, ПроверяемаяСтрока))
		.ЭтоЛожь();
КонецПроцедуры

&НаКлиенте
Функция ПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока)

	ПроверяемаяСтрока = Ванесса.ПолучитьЗначениеИзКонтекста(ИмяПеременной);
	Возврат ЗначениеСоответствуетРегулярномуВыражениюВнутр(ПроверяемаяСтрока, ШаблонРегулярки);
	
	//РегулярныеВыражения = Ванесса.Плагин("РегулярныеВыражения");
	//РегулярныеВыражения.Подготовить(ШаблонРегулярки);

	//ПроверяемаяСтрока = Ванесса.ПолучитьЗначениеИзКонтекста(ИмяПеременной);

	//Нашли = РегулярныеВыражения.Совпадает(ПроверяемаяСтрока);

	//Возврат Нашли;
КонецФункции

&НаКлиенте
Функция ГлобальнаяПеременнаяСоответствуетРегулярномуВыражениюВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока)

	ПроверяемаяСтрока = Ванесса.ПолучитьЗначениеИзКонтекстаСохраняемого(ИмяПеременной);
	Возврат ЗначениеСоответствуетРегулярномуВыражениюВнутр(ПроверяемаяСтрока, ШаблонРегулярки);
	
КонецФункции

&НаКлиенте
Функция ЗначениеСоответствуетРегулярномуВыражениюВнутр(ПроверяемаяСтрока, ШаблонРегулярки)

	РегулярныеВыражения = Ванесса.Плагин("РегулярныеВыражения");
	РегулярныеВыражения.Подготовить(ШаблонРегулярки);

	Нашли = РегулярныеВыражения.Совпадает(ПроверяемаяСтрока);

	Возврат Нашли;
КонецФункции

&НаКлиенте
Функция ПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока)

	РегулярныеВыражения = Ванесса.Плагин("РегулярныеВыражения");

	ПроверяемаяСтрока = Ванесса.ПолучитьЗначениеИзКонтекста(ИмяПеременной);

	Нашли = РегулярныеВыражения.СтрокаСоответствуетШаблону(ПроверяемаяСтрока, ШаблонРегулярки);

	Возврат Нашли;
КонецФункции

&НаКлиенте
Функция ГлобальнаяПеременнаяСоответствуетПростомуШаблонуВнутр(ИмяПеременной, ШаблонРегулярки, ПроверяемаяСтрока)

	РегулярныеВыражения = Ванесса.Плагин("РегулярныеВыражения");

	ПроверяемаяСтрока = Ванесса.ПолучитьЗначениеИзКонтекстаСохраняемого(ИмяПеременной);

	Нашли = РегулярныеВыражения.СтрокаСоответствуетШаблону(ПроверяемаяСтрока, ШаблонРегулярки);

	Возврат Нашли;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрШаблон_(Знач СтрокаШаблон, Знач Парам1 = Неопределено, Знач Парам2 = Неопределено, Знач Парам3 = Неопределено, Знач Парам4 = Неопределено, Знач Парам5 = Неопределено)

	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Парам1);
	МассивПараметров.Добавить(Парам2);
	МассивПараметров.Добавить(Парам3);
	МассивПараметров.Добавить(Парам4);
	МассивПараметров.Добавить(Парам5);

	Для Сч = 1 По МассивПараметров.Количество() Цикл
		ТекЗначение = МассивПараметров[Сч-1];
		СтрокаШаблон = СтрЗаменить(СтрокаШаблон, "%"+Сч, Строка(ТекЗначение));
	КонецЦикла;

	Возврат СтрокаШаблон;

КонецФункции

&НаКлиенте
//Когда Я запоминаю в переменную "ПроверяемаяСтрока" строку "мультистрочное значение"
//@ЯЗапоминаюВПеременнуюСтроку(Парам01,Парам02)
Процедура ЯЗапоминаюВПеременнуюСтроку(ИмяПеременной, ИсходнаяСтрока) Экспорт
	ЯЗапоминаюСтрокуКакПеременную(ИсходнаяСтрока, ИмяПеременной)
КонецПроцедуры

&НаКлиенте
//Когда Я запоминаю в глобальную переменную "ПроверяемаяСтрока" строку "мультистрочное значение"
//@ЯЗапоминаюВГлобальнуюПеременнуюСтроку(Парам01,Парам02)
Процедура ЯЗапоминаюВГлобальнуюПеременнуюСтроку(ИмяПеременной, ИсходнаяСтрока) Экспорт
	ЯЗапоминаюСтрокуКакПеременнуюГлобально(ИсходнаяСтрока, ИмяПеременной)
КонецПроцедуры
