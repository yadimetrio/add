////////////////////////////////////////////////////////////////////////////////
// Разбор фич и шагов фич
//
////////////////////////////////////////////////////////////////////////////////

Перем ТаблицаКлючевыхСлов;
Перем ЭтоУФ;
Перем СоответствиеТаблицПереводов;
Перем ТекущийЯзыкФичаФайла;
Перем ПредставлениеВертЧертыВТабДок;
Перем ПредставлениеАпостроф;
Перем ПредставлениеКавычка;
Перем ПредставлениеДвойнойСлеш;
Перем ПредставлениеВертикальнаяЧерта;
Перем ПредставлениеТире;
Перем ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок;
Перем ТаблицаКешПервыхСлов;
Перем СоответствиеПервыхСимволов;
Перем СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых;
Перем МассивПараметровХХХ;
Перем ОписаниеТипаЧисло;

#Область ПрограммныйИнтерфейс

// Загружает фичу, ее сценарии и шаги в дерево значений с учетом кеша фич и шагов
//
// Параметры:
//   ИмяФайла - Строка - Путь файла фичи
//   ДеревоСтроки - КоллекцияСтрокДереваЗначений  - <описание параметра>
//   ТаблицаИзвестныхШагов - ТаблицаЗначений - <описание параметра>
//   СтруктураПараметров - Структура - заполняется в методе СоздатьСтруктураПараметровДляЗагрузкиШага Упр.формы Ванессы
//			а также в методе ЗагрузитьФичиПродолжение
//
//  Возвращаемое значение:
//   Булево - Истина в случае успеха, Ложь, если не удалось загрузить
//
Функция ЗагрузитьФичу(ИмяФайла, ДеревоСтроки, ТаблицаИзвестныхШагов, СтруктураПараметров) Экспорт

	Если НЕ СтруктураПараметров.Свойство("КешФич") Тогда
		КешФич = Новый ТаблицаЗначений;
		КешФич.Колонки.Добавить("ИмяФайла");
		КешФич.Колонки.Добавить("Дерево");

		СтруктураПараметров.Вставить("КешФич",КешФич);
	КонецЕсли;

	ДобавитьКолонкуСнипетаВТаблицаУжеСуществующихСценариев(СтруктураПараметров.ТаблицаУжеСуществующихСценариев,
		СтруктураПараметров);

	Если НЕ СтруктураПараметров.Свойство("БылаПроверкаНаПовторыСнипетов") Тогда
		Если БылиПовторыИменСнипетов(СтруктураПараметров.ТаблицаУжеСуществующихСценариев, ТаблицаИзвестныхШагов) Тогда
			Сообщить("Были конфликты в именах снипетов!");
		КонецЕсли;
		СтруктураПараметров.Вставить("БылаПроверкаНаПовторыСнипетов", Истина);
	КонецЕсли;

	ОписаниеОшибки = "";
	ПередаваемыеТаблицы = Неопределено;
	БылаЗаменаТаблицыПараметровВСтруктуреСценария = Ложь;

	Если Не ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(ИмяФайла, ОписаниеОшибки, ДеревоСтроки,
		ТаблицаИзвестныхШагов, СтруктураПараметров, Неопределено, Ложь, ПередаваемыеТаблицы, Неопределено) Тогда

		Сообщить("Не смог загрузить " + ИмяФайла + ". " + ОписаниеОшибки);
		СтруктураПараметров.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Получить описание шага по строке
//
// Параметры:
//   Стр - Строка - текст шага на языке Gherkin
//
//  Возвращаемое значение:
//   Структура - описание найденного шага со свойствами:
// * StepDefinition - Строка - текст шага без служебных параметров
// * ЗначенияПараметров - СписокЗначений - значения параметров
// * СтрокаПараметров - Строка - строка параметров без служебных параметров
// * ДанныеОбработкиПараметров - Структура - данные обработки
// * КлючевоеСлово - Строка - текущее ключевое слов
// * ТекстПереводаШаг - Строка - исходный текст шага
//
Функция ПолучитьОписаниеШагаПоСтроке(Знач Стр) Экспорт
	ВтораяЧастьСтрокиПозиция = 1;
	ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(НРег(Стр), ВтораяЧастьСтрокиПозиция);
	ИмяШагаБезКлючевогоСлова = СокрЛП(Сред(Стр, ВтораяЧастьСтрокиПозиция));

	ЗначенияПараметров = Новый СписокЗначений;
	СтараяСтрокаПараметров = "";
	ДанныеОбработкиПараметров = Новый Структура;
	СтарыйStepDefinition   = ПолучитьStepDefinitionПоСтроке(ИмяШагаБезКлючевогоСлова, ЗначенияПараметров,
	                                           СтараяСтрокаПараметров,Ложь,0,ДанныеОбработкиПараметров);

	НовыйStepDefinition    = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	НоваяСтрокаПараметров  = ПолучитьНовуюСтрокуПараметров(СтараяСтрокаПараметров);

	ОписаниеШага = Новый Структура;
	ОписаниеШага.Вставить("StepDefinition",НовыйStepDefinition);
	ОписаниеШага.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	ОписаниеШага.Вставить("СтрокаПараметров",НоваяСтрокаПараметров);
	ОписаниеШага.Вставить("ДанныеОбработкиПараметров",ДанныеОбработкиПараметров);
	ОписаниеШага.Вставить("КлючевоеСлово",ТекущееКлючевоеСлово);
	ОписаниеШага.Вставить("ТекстПереводаШаг",Стр);

	Возврат ОписаниеШага;

КонецФункции

// Вызывается из обычной формы
//
// Параметры:
//   СтруктураПараметров - Структура - заполняется в методе СоздатьСтруктураПараметровДляЗагрузкиШага Упр.формы Ванессы
//			а также в методе ЗагрузитьФичиПродолжение
//
//  Возвращаемое значение:
//   ДеревоЗначений - построенное дерево фич, сценариев и шагов
//
Функция ПолучитьДеревоФич(СтруктураПараметров) Экспорт
	КаталогИнструментов     = СтруктураПараметров.КаталогИнструментов;
	КаталогФич              = СтруктураПараметров.КаталогФич;
	МассивСообщений         = СтруктураПараметров.МассивСообщений;
	DebugLog                = СтруктураПараметров.DebugLog;
	КонтекстВанессы			= СтруктураПараметров.КонтекстVanessaADD;
	КаталогиБиблиотек       = СтруктураПараметров.КаталогиБиблиотек;
	СписокТеговИсключение   = СтруктураПараметров.СписокТеговИсключение;
	СписокТеговОтбор        = СтруктураПараметров.СписокТеговОтбор;

	ПутьКФичам = Новый Файл(КаталогФич);
	Если Не ПутьКФичам.Существует() Тогда
		МассивСообщений.Добавить("Не найден путь " + КаталогФич);
		Возврат Неопределено;
	КонецЕсли;

	ТаблицаКонтекстовОбработок = Новый Массив;

	ТаблицаИзвестныхШагов = СтруктураПараметров.ТаблицаИзвестныхStepDefinition;
	ТаблицаВерсийEPF               = СтруктураПараметров.ТаблицаВерсийEPF;

	Путь = ПутьКФичам.ПолноеИмя;
	СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Истина);
	Если ПутьКФичам.ЭтоФайл() Тогда
		СтруктураПараметров.Вставить("ИдетЗагрузкаИзКаталога", Ложь);
		Путь = ПутьКФичам.Путь;
	КонецЕсли;

	ПолучитьУжеСуществующиеСнипетыИзОбработок(Путь, ТаблицаКонтекстовОбработок, ТаблицаИзвестныхШагов,
		ТаблицаВерсийEPF, КонтекстВанессы);
	Для каждого Элем Из КаталогиБиблиотек Цикл
		ПолучитьУжеСуществующиеСнипетыИзОбработок(Элем.Значение, ТаблицаКонтекстовОбработок, ТаблицаИзвестныхШагов,
			ТаблицаВерсийEPF, КонтекстВанессы);
	КонецЦикла;

	ДеревоЗначений = СоздатьДеревоЗначений();

	ЗаполнитьДерево(ДеревоЗначений, ПутьКФичам.ПолноеИмя, ТаблицаИзвестныхШагов, СтруктураПараметров);

	Возврат ДеревоЗначений;
КонецФункции

// Добавить начальное заполнение в модуль при генерации текста шага в обработке 1С
//
// Параметры:
//   ТелоМодуля - Таблица значений,Строка - ранее полученный текст модуля.
// 		Если ЭтоУФ = Истина, тогда передается строка-представление таблицы значений через ЗначениеВСтрокуВнутр
//   ШагСтрокДляМодуля - Число - интервал строк модуля
//   ГенерироватьУФ - Булево - Истина, если генерим шаг для упр.формы
//   ЭтоУФ - Булево - это упр.форма. По умолчанию Ложь
//   СоздаватьОбластиПриГенерацииКода - Булево - создавать области при генерации модуля. По умолчанию Ложь
//
Процедура ДобавитьНачальноеЗаполнениеВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ГенерироватьУФ, ЭтоУФ = Ложь,
	СоздаватьОбластиПриГенерацииКода = Ложь) Экспорт

	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля,"");
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "#Область Служебные_функции_и_процедуры");
	Иначе
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "///////////////////////////////////////////////////");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "//Служебные функции и процедуры");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "///////////////////////////////////////////////////");
	КонецЕсли;
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");

	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "&НаКлиенте");
	КонецЕсли;
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// контекст фреймворка Vanessa-ADD");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Перем Ванесса;");

	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, " ");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Перем Контекст Экспорт;");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, " ");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-ADD.");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Перем КонтекстСохраняемый Экспорт;");
	КонецЕсли;

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "&НаКлиенте");
	КонецЕсли;
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	Ванесса = КонтекстФреймворкаBDD;");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	ВсеТесты = Новый Массив;");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	Возврат ВсеТесты;");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "КонецФункции");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	");

	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "&НаСервере");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// Служебная функция.");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Функция ПолучитьМакетСервер(ИмяМакета)");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "КонецФункции");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "&НаКлиенте");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// Служебная функция для подключения библиотеки создания fixtures.");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	Возврат ПолучитьМакетСервер(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "КонецФункции");
	Иначе
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// Служебная функция для подключения библиотеки создания fixtures.");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	Возврат ПолучитьМакет(ИмяМакета);");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "КонецФункции");
	КонецЕсли;

	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "#КонецОбласти");
	КонецЕсли;

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");
	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "#Область Работа_со_сценариями");
	Иначе
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "///////////////////////////////////////////////////");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "//Работа со сценариями");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "///////////////////////////////////////////////////");
	КонецЕсли;

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "&НаКлиенте");
	КонецЕсли;
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// Процедура выполняется перед началом каждого сценария");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Процедура ПередНачаломСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "КонецПроцедуры");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");

	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "&НаКлиенте");
	КонецЕсли;
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "// Процедура выполняется перед окончанием каждого сценария");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "Процедура ПередОкончаниемСценария() Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "КонецПроцедуры");

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");

	Если СоздаватьОбластиПриГенерацииКода Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "#КонецОбласти");
	КонецЕсли;

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");

	//Если СоздаватьОбластиПриГенерацииКода Тогда
	//	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "#Область Реализация_шагов");
	//Иначе
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "///////////////////////////////////////////////////");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "//Реализация шагов");
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "///////////////////////////////////////////////////");
	//КонецЕсли;

	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;
КонецПроцедуры

// Получить уже существующие шаги из обработок
//
// Параметры:
//   КаталогФич - Строка - каталог с фичами
//   ТаблицаКонтекстовОбработок - ТаблицаЗначений - таблица контекстов обработок
//   ТаблицаИзвестныхШагов - ТаблицаЗначений - таблица известных шагов
//   ТаблицаВерсийEPF - ТаблицаЗначений - таблица версий файлов обработок
//   КонтекстВанессы - Произвольный - контекст фреймворка Ванессы (серверный контекст)
//
Процедура ПолучитьУжеСуществующиеСнипетыИзОбработок(Знач КаталогФич, ТаблицаКонтекстовОбработок,
	ТаблицаИзвестныхШагов, ТаблицаВерсийEPF, КонтекстВанессы) Экспорт

	Файл = Новый Файл(КаталогФич);
	Если Не Файл.Существует() Тогда
		СделатьСообщение("Ошибка в ПолучитьУжеСуществующиеСнипетыИзОбработок(). Файл/каталог "
			+ КаталогФич + " не существует!");
		Возврат;
	КонецЕсли;

	Если Файл.ЭтоФайл() Тогда
		КаталогФич = Файл.Путь;
	КонецЕсли;

	Файл = Новый Файл(КаталогФич);

	БылиОшибки = Ложь;
	НачальныйКаталог = КаталогФич;
	КаталогПоиска    = НачальныйКаталог;

	Файл = Новый Файл(НачальныйКаталог);
	Если НРег(Файл.Расширение) = ".feature" Тогда
		КаталогПоиска = Файл.Путь;
	КонецЕсли;

	Отладка("Ищу снипеты в каталоге " + КаталогПоиска);

	МассивФайлов = НайтиФайлы(КаталогПоиска,"*.epf",Истина);
	Для Каждого Файл Из МассивФайлов Цикл

		ВерсияФайла = Файл.ПолучитьВремяИзменения();

		СтрТаблицаВерсийEPF = ТаблицаВерсийEPF.Найти(НРег(Файл.ПолноеИмя),"ИмяФайла");
		Если СтрТаблицаВерсийEPF = Неопределено Тогда
			СтрТаблицаВерсийEPF             = ТаблицаВерсийEPF.Добавить();
			СтрТаблицаВерсийEPF.ИмяФайла    = НРег(Файл.ПолноеИмя);
			СтрТаблицаВерсийEPF.ВерсияФайла = ВерсияФайла;
		Иначе
			Если СтрТаблицаВерсийEPF.ВерсияФайла <> ВерсияФайла Тогда
				//значит файл изменился
				//обновляем версию и удаляем старые снипеты
				СтрТаблицаВерсийEPF.ВерсияФайла = ВерсияФайла;

				Отбор = Новый Структура;
				Отбор.Вставить("ИмяФайла",НРег(Файл.ПолноеИмя));
				МассивСтрок = ТаблицаИзвестныхШагов.НайтиСтроки(Отбор);

				Для каждого СтрокаТаблицы Из МассивСтрок Цикл
					ТаблицаИзвестныхШагов.Удалить(СтрокаТаблицы);
				КонецЦикла;

				Отладка("Обновил версию! " + Файл.ПолноеИмя);
			Иначе
				//значит уже актуальная версия файла загружена
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Попытка
			Обработка = ВнешниеОбработки.Создать(Файл.ПолноеИмя);
			МассивСнипетовИзОбработки = Обработка.ПолучитьСписокТестов(КонтекстВанессы);
		Исключение
			Отладка("Не смог получить список шагов в обработке: " + Файл.ПолноеИмя); // TODO возможно, лучше писать пользователю
			Отладка("" + ОписаниеОшибки());
			Продолжить;
		КонецПопытки;

		СтрТаблицаКонтекстовОбработок = Новый Структура;
		СтрТаблицаКонтекстовОбработок.Вставить("ИмяФайла",Файл.ПолноеИмя);
		СтрТаблицаКонтекстовОбработок.Вставить("Обработка",Обработка);
		ТаблицаКонтекстовОбработок.Добавить(СтрТаблицаКонтекстовОбработок);

		Для каждого Снипет Из МассивСнипетовИзОбработки Цикл
			ДобавитьСнипет(Снипет.Снипет, Снипет.ИмяПроцедуры, Файл.ПолноеИмя, БылиОшибки, ТаблицаИзвестныхШагов,
				Снипет);
		КонецЦикла;

		Продолжить;

	КонецЦикла;

	Если БылиОшибки Тогда
		Сообщить("Были ошибки в ПросканироватьИсходникиИНайтиВсеStepDefinition.");
	КонецЕсли;

КонецПроцедуры

// Получить программные шаги по шагам Gherkin
//
// Параметры:
//   Шаги - Массив - массив описаний шагов Gherkin
//
//  Возвращаемое значение:
//   Массив - массив структур-описаний программных шагов со свойствами
// * Шаг - Строка - имя шага Gherkin
// * StepDefinition - Строка - служебного имя шага
// * ЗначенияПараметров - СписокЗначений - значения параметров шага
// * АдресСнипета - Строка - адрес шага
//
Функция СнипетыПолучитьСнипетыПоШагам(Шаги) Экспорт
	МассивСнипетов = Новый Массив;

	МассивПовторов = Новый Массив;

	Для каждого СтрШаг Из Шаги Цикл
		ЗначенияПараметров = Новый Массив;
		СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(СтрШаг.ИмяШагаБезКлючевогоСлова,ЗначенияПараметров,,СтрШаг.ШагСПараметрамиВТаблице,СтрШаг.КоличествоПередаваемыхТаблиц);
		НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
		StepDefinition       = НовыйStepDefinition;

		СнипетБезПараметров = Лев(StepDefinition,Найти(StepDefinition,"(")-1);
		Если МассивПовторов.Найти(СнипетБезПараметров) = Неопределено Тогда
			МассивПовторов.Добавить(СнипетБезПараметров);
		Иначе
			Продолжить;
		КонецЕсли;

		Отладка("По (" + СтрШаг.Имя + ") получил StepDefinition: " + StepDefinition);

		СтруктураСнипета = Новый Структура;
		СтруктураСнипета.Вставить("Шаг",СтрШаг.Имя);
		СтруктураСнипета.Вставить("StepDefinition",StepDefinition);
		СтруктураСнипета.Вставить("ЗначенияПараметров",ЗначенияПараметров);
		СтруктураСнипета.Вставить("АдресСнипета",СтрШаг.АдресСнипета);

		МассивСнипетов.Добавить(СтруктураСнипета);
	КонецЦикла;

	Возврат МассивСнипетов;
КонецФункции

// Добавить код шага в текст модуля при генерации файла шагов
//
// Параметры:
//   СтруктураОписанияEpf - Структура - описание создаваемого файла шагов
//   StepDefinition - Строка - сокращенный текст шага, равный имени процедуры-обработчика шага
//   ПримерИспользованияПроцедуры - Строка - текст шага на Gherkin
//   ШагСтрокДляМодуля - Число - интервал строк модуля
//   АдресСнипета - Строка - адрес шага
//   СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур - Булево - создавать комментированный код
// 		для уже существующих обработчиков
//   ГенерироватьУФ - Булево - Истина, если генерим шаг для упр.формы
//   ЭтоУФ - Булево - это упр.форма. По умолчанию Ложь
//
Процедура ДобавитьStepDefinitionВТекстМодуля(СтруктураОписанияEpf, StepDefinition, ПримерИспользованияПроцедуры,
		ШагСтрокДляМодуля, АдресСнипета, СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур, ГенерироватьУФ,
		ЭтоУФ = Ложь) Экспорт

	ГенерироватьСнипетЗакоментаренным = ?(СокрЛП(АдресСнипета) = "",Ложь,Истина);
	Если СравнитьПутиФайлов(СтруктураОписанияEpf.ИмяФайлаEpf,АдресСнипета) Тогда
		ГенерироватьСнипетЗакоментаренным = Ложь;
	КонецЕсли;

	Если Не СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур Тогда
		Если ГенерироватьСнипетЗакоментаренным Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТелоМодуля = СтруктураОписанияEpf.ТелоМодуля;
	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;
	ТелоМодуля.Сортировать("НомСтр");

	СтрокаПоискаStepDefinition = "//@" + НРег(Лев(StepDefinition,Найти(StepDefinition,"(")));//будем искать без параметров
	Если СтрокаПоискаStepDefinition = "" Тогда
		ВызватьИсключение "Ошибка в ДобавитьStepDefinitionВТекстМодуля!";
	КонецЕсли;

	УжеЕсть = Ложь;
	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = СокрЛ(СтрТелоМодуля.Стр);
		Если Лев(Стр,3) = "//@" Тогда //так определяется StepDefinition
			Если Найти(НРег(Стр),СтрокаПоискаStepDefinition) > 0 Тогда
				УжеЕсть = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если УжеЕсть Тогда
		Возврат;
	КонецЕсли;

	ПрефиксКоментария = ?(ГенерироватьСнипетЗакоментаренным,"//","");

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "");
	Если ГенерироватьУФ Тогда
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ПрефиксКоментария + "&НаКлиенте");
	КонецЕсли;
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ПрефиксКоментария + "//" + ПримерИспользованияПроцедуры);
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ПрефиксКоментария + "//@" + StepDefinition);
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ПрефиксКоментария + "Процедура " + StepDefinition + " Экспорт");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ПрефиксКоментария + "	//Ванесса.ПосмотретьЗначение(Парам01,Истина);");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ПрефиксКоментария + "	ВызватьИсключение ""Не реализовано."";");
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ПрефиксКоментария + "КонецПроцедуры");

	Если ЭтоУФ Тогда
		СтруктураОписанияEpf.ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;
КонецПроцедуры

// Заполнить процедура ПолучитьСписокТестов с описаниями шагов при генерации файла шагов
//
// Параметры:
//   ТелоМодуля - Таблица значений,Строка - ранее полученный текст модуля.
// 		Если ЭтоУФ = Истина, тогда передается строка-представление таблицы значений через ЗначениеВСтрокуВнутр
//   Снипеты - Массив - массив структур-описаний программных шагов со свойствами.
//		Результат функции FeatureReader.СнипетыПолучитьСнипетыПоШагам()
//		* Шаг - Строка - имя шага Gherkin
//		* StepDefinition - Строка - служебного имя шага
//		* ЗначенияПараметров - СписокЗначений - значения параметров шага
//		* АдресСнипета - Строка - адрес шага
//   ЭтоУФ - Булево - это упр.форма. По умолчанию Ложь
//   ИмяФайлаФичи - Строка - Путь файла фичи
//   СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур - Булево - создавать комментированный код
// 		для уже существующих обработчиков
//
Процедура ЗаполнитьПроцедуруПолучитьСписокТестов(ТелоМодуля, Снипеты, ЭтоУФ, ИмяФайлаФичи,
		СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур) Экспорт

	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеИзСтрокиВнутр(ТелоМодуля);
	КонецЕсли;
	ТелоМодуля.Сортировать("НомСтр");

	КодПроцедурыПолучитьСписокТестов = Новый ТаблицаЗначений;
	КодПроцедурыПолучитьСписокТестов.Колонки.Добавить("Стр");

	НашелПроцедуруПолучитьСписокТестов = Ложь;
	НомерСтрокиНачалоФункции           = -1;

	НашелКонецФункции                  = Ложь;
	НомерСтрокиКонецФункции            = -1;

	Для Каждого СтрТелоМодуля Из ТелоМодуля Цикл
		Стр = НРег(СокрЛП(СтрТелоМодуля.Стр));
		Если (Найти(Стр,"функция") > 0) И (Найти(Стр,"получитьсписоктестов(") > 0) Тогда
			НашелПроцедуруПолучитьСписокТестов = Истина;
			НомерСтрокиНачалоФункции           = СтрТелоМодуля.НомСтр;
			Продолжить;
		КонецЕсли;

		Если НашелПроцедуруПолучитьСписокТестов Тогда
			СтрКодПроцедурыПолучитьСписокТестов     = КодПроцедурыПолучитьСписокТестов.Добавить();
			СтрКодПроцедурыПолучитьСписокТестов.Стр = СтрТелоМодуля.Стр;
		КонецЕсли;

		Если НашелПроцедуруПолучитьСписокТестов Тогда
			Если Стр = "конецфункции" Тогда
				НашелКонецФункции       = Истина;
				НомерСтрокиКонецФункции = СтрТелоМодуля.НомСтр;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если Не НашелПроцедуруПолучитьСписокТестов Тогда
		СтрОшибки = "Не нашел функцию ""ПолучитьСписокТестов"".";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;
	Если Не НашелКонецФункции Тогда
		СтрОшибки = "Не нашел конец функции ""ПолучитьСписокТестов"".";
		Сообщить(СтрОшибки);
		ВызватьИсключение СтрОшибки;
	КонецЕсли;

	СтрокиДляУдаления = Новый Массив;
	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из КодПроцедурыПолучитьСписокТестов Цикл
		СтрокаКода = СокрЛП(НРег(СтрКодПроцедурыПолучитьСписокТестов.Стр));
		Если Лев(СтрокаКода,2) = "//" Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
			Продолжить;
		КонецЕсли;

		Если Найти(СтрокаКода,НРег("ДобавитьШагВМассивТестов")) = 0 Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
			Продолжить;
		КонецЕсли;

		Нашли = Ложь;
		Для каждого Снипет Из Снипеты Цикл
			StepDefinition = НРег(Снипет.StepDefinition);

			Если Найти(СтрокаКода,StepDefinition) > 0 Тогда //значит этот шаг надо удалить из КодПроцедурыПолучитьСписокТестов
				Нашли = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если Нашли Тогда
			СтрокиДляУдаления.Добавить(СтрКодПроцедурыПолучитьСписокТестов);
		КонецЕсли;
	КонецЦикла;

	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из СтрокиДляУдаления Цикл
		КодПроцедурыПолучитьСписокТестов.Удалить(СтрКодПроцедурыПолучитьСписокТестов);
	КонецЦикла;

	//очистим содержимое функции
	КолСтрок = ТелоМодуля.Количество();
	Для Ккк = 0 По КолСтрок-1 Цикл //TODO ?? исправить ошибку чтения последней строки - д.б. По КолСтрок
		ИдСтроки = КолСтрок - Ккк - 1;

		СтрокаМодуля = ТелоМодуля[ИдСтроки];
		Если (СтрокаМодуля.НомСтр > НомерСтрокиНачалоФункции) И (СтрокаМодуля.НомСтр < НомерСтрокиКонецФункции) Тогда
			ТелоМодуля.Удалить(СтрокаМодуля);
		КонецЕсли;
	КонецЦикла;

	НомСтр = НомерСтрокиНачалоФункции;

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	Ванесса = КонтекстФреймворкаBDD;", ИнкрементЗначения(НомСтр, 1));
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	", ИнкрементЗначения(НомСтр, 1));
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	ВсеТесты = Новый Массив;", ИнкрементЗначения(НомСтр, 1));
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "", ИнкрементЗначения(НомСтр, 1));

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	// описание шагов", ИнкрементЗначения(НомСтр, 1));
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	// пример вызова Ванесса.ДобавитьШагВМассивТестов(ВсеТесты, Снипет, ИмяПроцедуры, ПредставлениеТеста, ОписаниеШага, ТипШагаДляОписания, ТипШагаВДереве);",
		ИнкрементЗначения(НомСтр, 1));
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "", ИнкрементЗначения(НомСтр, 1));

	ФайлФичи = Новый Файл(ИмяФайлаФичи);
	ИмяEPFФичи = УниверсальноеПолноеИмяФайлаШаговФичи(ФайлФичи.Путь, ФайлФичи.ИмяБезРасширения);
	ИмяEPFФичи_Устаревшее = УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(ФайлФичи.Путь, ФайлФичи.ИмяБезРасширения);

	//добавим строки, которые были раньше, но их нет в текущей фиче
	//это бывает, когда мы хотим добавить шаг,в библиотеку сначала из одной фичи, потом из другой
	Для каждого СтрКодПроцедурыПолучитьСписокТестов Из КодПроцедурыПолучитьСписокТестов Цикл
		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, СтрКодПроцедурыПолучитьСписокТестов.Стр,ИнкрементЗначения(НомСтр, 1));
	КонецЦикла;

	МассивДобавленыхСнипетов = Новый Массив;
	Для каждого Снипет Из Снипеты Цикл

		СнипетУжеБылВДругойEPF = СокрЛП(Снипет.АдресСнипета) <> "";
		Если 	СнипетУжеБылВДругойEPF
				И (	СравнитьПутиФайлов(ИмяEPFФичи, Снипет.АдресСнипета)
					Или СравнитьПутиФайлов(ИмяEPFФичи_Устаревшее, Снипет.АдресСнипета)) Тогда

			СнипетУжеБылВДругойEPF = Ложь;
		КонецЕсли;

		Если Не СоздаватьЗакоментированныйКодДляПереиспользуемыхПроцедур Тогда
			Если СнипетУжеБылВДругойEPF Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ПрефиксКомментарий     = ?(СнипетУжеБылВДругойEPF,"//","");
		ПостфиксКомментарий    = ?(СнипетУжеБылВДругойEPF," //уже был в " + Снипет.АдресСнипета,"");

		Зн = МассивДобавленыхСнипетов.Найти(Снипет.StepDefinition);
		Если Зн <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИмяПроцедуры = Снипет.StepDefinition;
		Поз = Найти(ИмяПроцедуры,"(");
		ИмяПроцедуры = Лев(ИмяПроцедуры,Поз-1);

		ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, ПрефиксКомментарий + 
			"	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""" + Снипет.StepDefinition + """,""" + ИмяПроцедуры + """,""" + СтрЗаменить(Снипет.Шаг,"""","""""") + ""","""","""");" 
			+ ПостфиксКомментарий,
			ИнкрементЗначения(НомСтр, 1));
		МассивДобавленыхСнипетов.Добавить(Снипет.StepDefinition);
	КонецЦикла;

	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "", ИнкрементЗначения(НомСтр, 1));
	ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, "	Возврат ВсеТесты;", ИнкрементЗначения(НомСтр, 1));

	ТелоМодуля.Сортировать("НомСтр");

	Если ЭтоУФ Тогда
		ТелоМодуля = ЗначениеВСтрокуВнутр(ТелоМодуля);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СделатьСообщение(Знач Сообщение)
	Сообщить(Строка(ТекущаяДата()) + " " + Сообщение);
КонецПроцедуры

Процедура СделатьПереводТекстаGherkin(ДанныеПеревода) Экспорт

	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ДанныеПеревода.ЯзыкПеревода]);

	ЯзыкКеш = ДанныеПеревода.КешДанныеПеревода.Язык;

	Если ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода = Неопределено или ЯзыкКеш <> ДанныеПеревода.ЯзыкПеревода Тогда
		ТаблицаПеревода = СоздатьТаблицаПеревода();

		ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
		ПрочитатьФайлПеревода(ДанныеПеревода);

		ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);
	Иначе
		Если ТипЗнч(ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода) = Тип("Строка") Тогда
			ДанныеПеревода.Вставить("ТаблицаПеревода",
				ЗначениеИзСтрокиВнутр(ДанныеПеревода.КешДанныеПеревода.ТаблицаПеревода));
		КонецЕсли;
	КонецЕсли;

	Перевод = ПеревестиТекстПоТаблицеПеревода(ДанныеПеревода);
	ДанныеПеревода.Вставить("Перевод",Перевод);

	ДанныеПеревода.Вставить("КлючевыеСловаРусский",Неопределено);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",Неопределено);
КонецПроцедуры

Процедура ПолучитьПереводТекстаGherkin(ДанныеПеревода) Экспорт
	ДанныеПеревода.Вставить("ТабДок",Неопределено);

	ТаблицаПеревода = СоздатьТаблицаПеревода();

	Для Каждого СтрокаТаблицаДляПереводаИзвестныхШагов Из ДанныеПеревода.ТаблицаДляПереводаИзвестныхШагов Цикл
		СтрокаТаблицаПеревода                        = ТаблицаПеревода.Добавить();
		СтрокаТаблицаПеревода.ОригиналРусскийШаг     = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ОригиналРусскийШагНРег = НРег(СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийШаг);

		СтрокаТаблицаПеревода.ОригиналРусскийОписание = СтрокаТаблицаДляПереводаИзвестныхШагов.ОригиналРусскийОписаниеШага;

		ОписаниеШагаРусский                          = ПолучитьОписаниеШагаПоСтроке(
			ПолучитьПервуюСтрокуИзМногострочной(СтрокаТаблицаПеревода.ОригиналРусскийШаг));
		СтрокаТаблицаПеревода.StepDefinitionРусский  = ОписаниеШагаРусский.StepDefinition;
	КонецЦикла;

	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ДанныеПеревода.ЯзыкПеревода]);

	ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
	ПрочитатьФайлПеревода(ДанныеПеревода);

	ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);

	//проверим ТаблицаПеревода на дубли
	ПроверитьТаблицаПереводаНаДубли(ТаблицаПеревода);

	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		Если СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = 0 Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = 10000000;
		КонецЕсли;

		Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -2;
		ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -3;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТаблицаПеревода.ТекстПереводаШаг) Тогда
			//выводим наверх то что не переведено.
			СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = -1;
		КонецЕсли;
	КонецЦикла;

	ТаблицаПеревода.Сортировать("НомерСтрокиВФайлеПеревода,ОригиналРусскийШаг");

	ТабДок = ДанныеПеревода.МакетШаблонПеревода;
	Сч = 1;
	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		Сч = Сч + 1;
		ТабДок.Область(Сч,1,Сч,1).Текст = СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода;
		ТабДок.Область(Сч,2,Сч,2).Текст = СтрокаТаблицаПеревода.ОригиналРусскийОписание;
		ТабДок.Область(Сч,3,Сч,3).Текст = СтрокаТаблицаПеревода.ТекстПереводаШаг;
		ТабДок.Область(Сч,4,Сч,4).Текст = СтрокаТаблицаПеревода.ТекстПереводаОписание;
	КонецЦикла;

	ДанныеПеревода.Вставить("ТабДок",ТабДок);
КонецПроцедуры

Процедура Отладка(Знач Сообщение)
	Если DebugLog Тогда
		СделатьСообщение(Сообщение);
	КонецЕсли;
КонецПроцедуры

Функция ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(Версия1, Версия2)
	Массив1 = РазложитьСтрокуВМассивПодстрок(Версия1, ".");
	Массив2 = РазложитьСтрокуВМассивПодстрок(Версия2, ".");

	Версия1БольшеИлиРавно = Истина;
	Для Ккк = 0 По Массив1.Количество()-1 Цикл
		Элем1 = Массив1.Получить(Ккк);
		Элем2 = Массив2.Получить(Ккк);

		Если Число(Элем2) > Число(Элем1) Тогда
			Версия1БольшеИлиРавно = Ложь;
		ИначеЕсли Число(Элем2) < Число(Элем1) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Версия1БольшеИлиРавно;
КонецФункции

Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено)
	Результат = Новый Массив;

	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//

	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок Тогда
		Если ПропускатьПустыеСтроки = Истина Тогда
			Возврат Вычислить("СтрРазделить(Строка,Разделитель,Ложь)");
		Иначе
			Возврат Вычислить("СтрРазделить(Строка,Разделитель,Истина)");
		КонецЕсли;

	КонецЕсли;

	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;

	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

///  Объединяет строки из массива в строку с разделителями.
//
// Параметры:
//  Массив      - Массив - массив строк которые необходимо объединить в одну строку;
//  Разделитель - Строка - любой набор символов, который будет использован в качестве разделителя.
//
// Возвращаемое значение:
//  Строка - строка с разделителями.
//
Функция СтрСоединить_(Массив, Разделитель = ",") Экспорт

	Если ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок Тогда
		Возврат Вычислить("СтрСоединить(Массив, Разделитель)");
	КонецЕсли;

	Результат = "";

	Для Индекс = 0 По Массив.ВГраница() Цикл
		Подстрока = Массив[Индекс];

		Если ТипЗнч(Подстрока) <> Тип("Строка") Тогда
			Подстрока = Строка(Подстрока);
		КонецЕсли;

		Если Индекс > 0 Тогда
			Результат = Результат + Разделитель;
		КонецЕсли;

		Результат = Результат + Подстрока;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ВЭтойСтрокеКлючевоеСловоПримеры(НРег_Стр)
	Если НРег_Стр = "" Тогда
		Возврат Ложь;
	КонецЕсли;

	ДанныеПеревода      = СоответствиеТаблицПереводов.Получить(ТекущийЯзыкФичаФайла);
	ТаблицаКлючевыхСлов = ДанныеПеревода.ТаблицаКлючевыхСлов;
	СловаПоТипамПримеры = ДанныеПеревода.СловаПоТипам.Получить("examples");

	//поиск в кеше
	Для каждого КлючевоеСлово Из СловаПоТипамПримеры Цикл
		Позиция = Найти(НРег_Стр, КлючевоеСлово);
		Если Позиция = 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция ПолучитьКлючевоеСлово(Стр, ВтораяЧастьСтрокиПозиция = 1, ПервоеСлово = Неопределено)
	Если Стр = "" Тогда
		Возврат "";
	КонецЕсли;
	ПервыйСимвол = Лев(Стр, 1);//TODO ускорить, передавая 1-й символ как параметр

	Если СоответствиеПервыхСимволов.Получить(ПервыйСимвол) <> Неопределено Тогда
		Возврат "";
	КонецЕсли;

	ДанныеПеревода      = СоответствиеТаблицПереводов.Получить(ТекущийЯзыкФичаФайла);
	ТаблицаКлючевыхСлов = ДанныеПеревода.ТаблицаКлючевыхСлов;

	Если ПервоеСлово <> Неопределено Тогда
		СтрТаблицаКлючевыхСлов = ТаблицаКлючевыхСлов.Найти(НРег(ПервоеСлово),"Слово");
		Если СтрТаблицаКлючевыхСлов <> Неопределено И СтрТаблицаКлючевыхСлов.Уникально Тогда
			ВтораяЧастьСтрокиПозиция = СтрДлина(ПервоеСлово)+1;
			Возврат СтрТаблицаКлючевыхСлов.Тип;
		КонецЕсли;
	КонецЕсли;

	//поиск в кеше
	МаксДлинаСлова = ДанныеПеревода.МаксДлинаСлова;

	ПодСтрока = Лев(Стр, МаксДлинаСлова);
	СтрТаблицаКешПервыхСлов = ТаблицаКешПервыхСлов.Найти(ПодСтрока, "ПерваяЧастьСтроки");
	Если СтрТаблицаКешПервыхСлов <> Неопределено Тогда
		ВтораяЧастьСтрокиПозиция = СтрДлина(СтрТаблицаКешПервыхСлов.Слово)+1;
		Возврат СтрТаблицаКешПервыхСлов.Тип;
	КонецЕсли;

	НРег_Стр = НРег(Стр);
	Для каждого СтрТаблицаКлючевыхСлов Из ТаблицаКлючевыхСлов Цикл
		Позиция = Найти(НРег_Стр, СтрТаблицаКлючевыхСлов.Слово);
		Если Позиция = 1 Тогда
			ДлинаСловаИзТаблицыКлючевыхСлов = СтрДлина(СтрТаблицаКлючевыхСлов.Слово);
			ВтораяЧастьСтрокиПозиция = ДлинаСловаИзТаблицыКлючевыхСлов + 1;

			Если ДлинаСловаИзТаблицыКлючевыхСлов < МаксДлинаСлова Тогда
				СтрТаблицаКешПервыхСлов = ТаблицаКешПервыхСлов.Добавить();
				СтрТаблицаКешПервыхСлов.ПерваяЧастьСтроки = Подстрока;
				СтрТаблицаКешПервыхСлов.Слово             = СтрТаблицаКлючевыхСлов.Слово;
				СтрТаблицаКешПервыхСлов.Позиция           = ВтораяЧастьСтрокиПозиция;
				СтрТаблицаКешПервыхСлов.Тип               = СтрТаблицаКлючевыхСлов.Тип;
			КонецЕсли;

			Возврат СтрТаблицаКлючевыхСлов.Тип;
		КонецЕсли;
	КонецЦикла;

	Возврат "";
КонецФункции

Функция ПодготовитьСтрокуПримераКРазбору(Знач Стр)
	Если Найти(Стр, "'") = 0 Тогда
		Возврат Стр;
	КонецЕсли;

	НовСтр = "";

	Стр     = СтрЗаменить(Стр, "\\", ПредставлениеДвойнойСлеш);
	Стр     = СтрЗаменить(Стр, "\'", ПредставлениеАпостроф);
	Стр     = СтрЗаменить(Стр, "\|", ПредставлениеВертикальнаяЧерта);
	Стр     = СтрЗаменить(Стр, "\""", ПредставлениеКавычка);
	Стр     = СтрЗаменить(Стр, ПредставлениеДвойнойСлеш, "\\");

	Длина = СтрДлина(Стр);
	ЭтоПараметр = Ложь;
	Для Ккк = 1 По Длина Цикл
		Символ = Сред(Стр, Ккк, 1);
		Если Символ = "'" Тогда
			ЭтоПараметр = Не ЭтоПараметр;
		ИначеЕсли Символ = "|" Тогда
			Если ЭтоПараметр Тогда
				Символ = ПредставлениеВертЧертыВТабДок;
			КонецЕсли;
		КонецЕсли;

		НовСтр = НовСтр + Символ;
	КонецЦикла;

	НовСтр = СтрЗаменить(НовСтр, ПредставлениеАпостроф, "\'");
	НовСтр = СтрЗаменить(НовСтр, ПредставлениеКавычка, "\""");
	НовСтр = СтрЗаменить(НовСтр, ПредставлениеВертикальнаяЧерта, "\|");

	Возврат НовСтр;
КонецФункции

Функция ОпределитьПараметрыВСтрокеПримера(ОбъектСоСтрокой, СтруктураПараметров)
	СписокЗн = Новый СписокЗначений;

	Стр = СокрЛП(ОбъектСоСтрокой.Стр);

	Если Лев(Стр, 1) <> "|" Тогда
		СтрОшибки = "Таблица параметров должна начинаться с символа |";
		НомерСтрокиВФиче = Неопределено;
		Попытка
			НомерСтрокиВФиче = ОбъектСоСтрокой.НомерСтрокиВФиче;
			СтрОшибки = СтрОшибки + ". Строка №" + НомерСтрокиВФиче;
		Исключение
		КонецПопытки;

		Сообщить(СтрОшибки);
		Возврат СписокЗн;
	КонецЕсли;

	Если Прав(Стр, 1) <> "|" Тогда
		СтрОшибки = "Таблица параметров должна заканчиваться символом |";
		НомерСтрокиВФиче = Неопределено;
		Попытка
			НомерСтрокиВФиче = ОбъектСоСтрокой.НомерСтрокиВФиче;
			СтрОшибки = СтрОшибки + ". Строка №" + НомерСтрокиВФиче;
		Исключение
		КонецПопытки;

		Сообщить(СтрОшибки);
		Возврат СписокЗн;
	КонецЕсли;

	Стр = Сред(Стр, 2);
	Стр = Сред(Стр, 1, СтрДлина(Стр) - 1);
	//убрали символы | слева и справа

	Стр    = ПодготовитьСтрокуПримераКРазбору(Стр);
	Стр    = СтрЗаменить(Стр, "\|", ПредставлениеВертикальнаяЧерта);
	Массив = РазложитьСтрокуВМассивПодстрок(Стр, "|");

	Для Ккк = 0 По Массив.Количество()-1 Цикл
		Значение    = Массив[Ккк];
		Значение    = СтрЗаменить(Значение,ПредставлениеВертЧертыВТабДок, "|");//учли что вертикальная черта может быть в значении
		Значение    = СтрЗаменить(Значение,ПредставлениеВертикальнаяЧерта, "\|");//учли что вертикальная черта может быть в значении
		Массив[Ккк] = Значение;//TODO странный код
		Массив[Ккк] = СокрЛП(Массив[Ккк]);
	КонецЦикла;

	СписокЗн = Новый СписокЗначений;
	Для каждого Элем Из Массив Цикл
		СписокЗн.Добавить(Элем);//TODO сделать метод МассивВСписокЗначений
	КонецЦикла;

	Возврат  СписокЗн;
КонецФункции

Процедура ФорматТаблицыПримеров(Тзн, РазныеИменованныеПараметры, БылаОшибка, ЭтоПередачаТаблицы, СтруктураПараметров)
	Если Тзн.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СписокПараметров = ОпределитьПараметрыВСтрокеПримера(Тзн[0], СтруктураПараметров);
	Для Ккк = 0 По СписокПараметров.Количество()-1 Цикл
		СписокПараметров[Ккк].Значение = СокрЛП(НРег(СписокПараметров[Ккк].Значение));
	КонецЦикла;

	//проверим соответствие параметров в шагах и в таблице примеров
	Если НЕ ЭтоПередачаТаблицы Тогда
		Для каждого ЭлемРазныеИменованныеПараметры Из РазныеИменованныеПараметры Цикл
			Если СписокПараметров.НайтиПоЗначению(НРег(ЭлемРазныеИменованныеПараметры)) = Неопределено Тогда
				БылаОшибка = Истина;
				Сообщить("Параметр " + ЭлемРазныеИменованныеПараметры + " не найден в таблице параметров!");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	СписокПараметров = ОпределитьПараметрыВСтрокеПримера(Тзн[0], СтруктураПараметров);
	КолПараметров = СписокПараметров.Количество();
	МассивДлин = Новый Массив;
	Для каждого Элем Из СписокПараметров Цикл
		МассивДлин.Добавить(0);
	КонецЦикла;

	Для каждого СтрТзн Из Тзн Цикл
		Если СокрЛП(СтрТзн.Стр) = "" Тогда
			Продолжить;
		КонецЕсли;

		СписокПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн, СтруктураПараметров);
		Если СписокПараметров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Для Ккк = 0 По МассивДлин.Количество()-1 Цикл
			Если СписокПараметров.Количество()-1 < Ккк Тогда
				ВызватьИсключение "Неверное число параметров в строке табилцы. Должно быть <"
				   + МассивДлин.Количество() + "> параметров, а в строке найдено <" + СписокПараметров.Количество() + ">."
				   + Символы.ПС + СтрТзн.Стр;
			КонецЕсли;
			ДлинаСтроки = СтрДлина(СокрЛП(СписокПараметров.Получить(Ккк)));
			Если ДлинаСтроки > МассивДлин[Ккк] Тогда
				МассивДлин[Ккк] = ДлинаСтроки;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	Для каждого СтрТзн Из Тзн Цикл
		Если СокрЛП(СтрТзн.Стр) = "" Тогда
			Продолжить;
		КонецЕсли;

		//последним параметром специально идёт неопределено, иначе не работает фича ПередачаВоВложенныйСценарийТаблиц
		СписокПараметров = ОпределитьПараметрыВСтрокеПримера(СтрТзн, Неопределено);
		Если СписокПараметров.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрПараметров = "| ";
		Для Ккк = 0 По МассивДлин.Количество()-1 Цикл
			Зн = СокрЛП(СписокПараметров[Ккк]);
			Пока СтрДлина(Зн) < МассивДлин[Ккк] Цикл
				Зн = Зн + " ";
			КонецЦикла;
			СтрПараметров = СтрПараметров + Зн + " | ";
		КонецЦикла;

		СтрПараметров = СокрЛП(СтрПараметров);

		СтрТзн.Стр = СтрПараметров;
	КонецЦикла;

КонецПроцедуры

Функция ЭтоДата(Стр)
	Массив = РазложитьСтрокуВМассивПодстрок(Стр,".");
	Если Массив.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;

	Элем1 = Массив[0];
	Элем2 = Массив[1];
	Элем3 = Массив[2];

	Если СтрДлина(Элем1) <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если СтрДлина(Элем2) <> 2 Тогда
		Возврат Ложь;
	КонецЕсли;

	Если (СтрДлина(Элем3) <> 2) И (СтрДлина(Элем3) <> 4) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ЭтоЦелоеЧисло(Элем1) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЭтоЦелоеЧисло(Элем2) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

 Процедура ОпределитьТипЗначенияСтрокиЦеликом(Знач Стр, Тип)
	Тип = "Строка";

	Если ЭтоКорректноеЧисло(Стр) Тогда
		Тип = "Число";
	КонецЕсли;

	Если ЭтоДата(Стр) Тогда//TODO оптимизировать через ИначеЕсли
		Тип = "Дата";
	КонецЕсли;

КонецПроцедуры

Функция УбратьКавычкиСлеваИСправа(Знач Стр)
	Возврат Сред(Стр,2,СтрДлина(Стр)-2);
КонецФункции

Функция ПреобразоватьИменнованныеПараметрыСОпределениемТипов(Спс, СпсИмен)
	НовыйСписок = Новый СписокЗначений;
	Ном = 0;
	Для каждого Элем Из Спс Цикл
		СтруктураЗначения = Новый Структура;

		Значение = Неопределено;
		Тип      = Неопределено;
		ОпределитьТипЗначенияСтрокиЦеликом(Элем.Значение, Тип);

		Если Тип = "Строка" Тогда
			ЛевыйСимвол = Лев(Элем.Значение, 1);
			ПравыйСимвол = Прав(Элем.Значение, 1);
			Если (ЛевыйСимвол = """") И (ПравыйСимвол = """") Тогда
				Элем.Значение = УбратьКавычкиСлеваИСправа(Элем.Значение);
			ИначеЕсли (ЛевыйСимвол = "'") И (ПравыйСимвол = "'") Тогда
				Элем.Значение = УбратьКавычкиСлеваИСправа(Элем.Значение);
			КонецЕсли;
		КонецЕсли;

		Элем.Значение = СтрЗаменить(Элем.Значение,"\'","'");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\""","""");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\|","|");
		Элем.Значение = СтрЗаменить(Элем.Значение,"\\","\");
		СтруктураЗначения.Вставить("Значение", Элем.Значение);
		СтруктураЗначения.Вставить("Тип",Тип);
		СтруктураЗначения.Вставить("ИмяПараметра", СпсИмен[Ном].Значение);//TODO странный код

		НовыйСписок.Добавить(СтруктураЗначения);

		Ном = Ном + 1;
	КонецЦикла;

	Возврат НовыйСписок;
КонецФункции

Функция СоздатьИмяШагаДляScenarioOutline_И_ОбработатьЗначенияПараметров(Знач Стр,
		ЗначенияПараметровОбычные, ЗначенияПараметровИменованные)
	Для каждого Элем Из ЗначенияПараметровОбычные Цикл
		Если Элем.Значение.Тип = "ПараметрИменованный" Тогда

			ИмяПараметра      = Элем.Значение.Значение;
			ЗначениеПараметра = Неопределено;
			ТипПараметра      = Неопределено;
			Для каждого ЗнПарам Из ЗначенияПараметровИменованные Цикл
				Если ЗнПарам.Значение.ИмяПараметра = ИмяПараметра Тогда
					ЗначениеПараметра = ЗнПарам.Значение.Значение;
					ТипПараметра      = ЗнПарам.Значение.Тип;
				КонецЕсли;
			КонецЦикла;

			Если ЗначениеПараметра = Неопределено Тогда
				СтрОшибки = "Не смог найти  в массиве ЗначенияПараметровИменованные элемент с именем " + ИмяПараметра;
				Сообщить(СтрОшибки);
				ВызватьИсключение СтрОшибки;
			КонецЕсли;

			Если ТипПараметра = "Строка" Тогда
				Стр = СтрЗаменить(Стр,"<"+ ИмяПараметра + ">","""" + ЗначениеПараметра + """");
			Иначе
				Стр = СтрЗаменить(Стр,"<"+ ИмяПараметра + ">",ЗначениеПараметра);
			КонецЕсли;

			Элем.Значение.Значение = ЗначениеПараметра;
			Элем.Значение.Тип      = ТипПараметра;

		КонецЕсли;
	КонецЦикла;

	Возврат Стр;
КонецФункции

Функция СкопироватьСписокЗначенийСтруктур(Массив)
	НовыйСписок = Новый СписокЗначений;

	Для каждого ЭлемМассив Из Массив Цикл
		НоваяСтруктура = Новый Структура;
		Для каждого ЭлемСтруктура Из ЭлемМассив.Значение Цикл
			НоваяСтруктура.Вставить(ЭлемСтруктура.Ключ,ЭлемСтруктура.Значение);
		КонецЦикла;

		НовыйСписок.Добавить(НоваяСтруктура);
	КонецЦикла;

    Возврат НовыйСписок;
КонецФункции

Процедура ДобавитьСценарийДляДанногоПримера(СтрокаПримеров, ИменованныеПараметры)

	СтрокиШагов = СтрокаПримеров.Родитель.Родитель;
	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("СозданиеСекцииПримеров", Истина);
	ПараметрыКопирования.Вставить("СтрокаПримеров", СтрокаПримеров);
	ПараметрыКопирования.Вставить("ИменованныеПараметры", ИменованныеПараметры);

	СкопироватьСтрокуВДереваПодчиненныеЭлементы(СтрокаПримеров, СтрокиШагов, ПараметрыКопирования);
	ПараметрыКопирования = Неопределено;
КонецПроцедуры

Функция ПолучитьНовыйStepDefinition(Знач Стр)

	Стр = СтрЗаменить(Стр,"СтрокаК)",")");
	Стр = СтрЗаменить(Стр,"СтрокаА)",")");
	Стр = СтрЗаменить(Стр,"СтрокаМ)",")");
	Стр = СтрЗаменить(Стр,"Дата)",")");
	Стр = СтрЗаменить(Стр,"Число)",")");

	Стр = СтрЗаменить(Стр,"СтрокаК,",",");
	Стр = СтрЗаменить(Стр,"СтрокаА,",",");
	Стр = СтрЗаменить(Стр,"СтрокаМ,",",");
	Стр = СтрЗаменить(Стр,"Дата,",",");
	Стр = СтрЗаменить(Стр,"Число,",",");

	Возврат Стр;
КонецФункции

Функция ПолучитьНовуюСтрокуПараметров(Знач Стр)
	Стр = Стр + ",";

	Стр = СтрЗаменить(Стр, "Строка,", ",");
	Стр = СтрЗаменить(Стр, "Дата,", ",");
	Стр = СтрЗаменить(Стр, "Число,", ",");

	Стр = Лев(Стр, СтрДлина(Стр) - 1);

	Возврат Стр;
КонецФункции

Функция СкопироватьСтруктуру(Оригинал)
	Результат = Новый Структура();
	Для каждого Элем Из Оригинал Цикл
		Результат.Вставить(Элем.Ключ,Элем.Значение);
	КонецЦикла;

	Возврат Результат;
КонецФункции

Процедура ОбработатьПередачуПараметровТаблицей(СтрСтрокиШагов, МассивТаблицПередаваемыхКакПараметр,
	                                 РазныеИменнованныеПараметры,СтруктураПараметров = Неопределено)

	Если МассивТаблицПередаваемыхКакПараметр.Количество() > 0 Тогда
		СтрСтрокиШагов.ШагСПараметрамиВТаблице = Истина;
		СтрокиТаблицаСтрокПередачаПараметровТаблицей = СтрСтрокиШагов.Строки;

		МассивСтрокДляУдаления = Новый Массив;
		Для Каждого ТекСтрока Из СтрокиТаблицаСтрокПередачаПараметровТаблицей Цикл
			Если ТекСтрока.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда
				МассивСтрокДляУдаления.Добавить(ТекСтрока);
			ИначеЕсли СокрЛП(ТекСтрока.Имя) = "" Тогда
				МассивСтрокДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;

		Для Каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
			СтрокиТаблицаСтрокПередачаПараметровТаблицей.Удалить(ТекСтрока);
		КонецЦикла;

		ИндексВставки = 0;
		НомерТаблицы = 0;
		Для Каждого ТаблицаСтрокПередачаПараметровТаблицей Из МассивТаблицПередаваемыхКакПараметр Цикл
			НомерТаблицы = НомерТаблицы + 1;

			БылаОшибка = Ложь;
			ФорматТаблицыПримеров(ТаблицаСтрокПередачаПараметровТаблицей, РазныеИменнованныеПараметры, БылаОшибка,
			                                                                         Истина, Неопределено);

			Если НомерТаблицы > 1 Тогда
				СтрокаТаблицы             = СтрокиТаблицаСтрокПередачаПараметровТаблицей.Добавить(); //добавим разделитель
				ИндексВставки             = ИндексВставки + 1;
				СтрокаТаблицы.ТипКартинки = -1;
			КонецЕсли;

			Для каждого СтрТаблицаСтрокПередачаПараметровТаблицей Из ТаблицаСтрокПередачаПараметровТаблицей Цикл
				СтрокаТаблицы                                  = СтрокиТаблицаСтрокПередачаПараметровТаблицей.Вставить(ИндексВставки);
				ИндексВставки                                  = ИндексВставки + 1;
				СтрокаТаблицы.СтрокаПараметровШагаВВидеТаблицы = Истина;
				СтрокаТаблицы.Имя                              = СтрТаблицаСтрокПередачаПараметровТаблицей.Стр;
				СтрокаТаблицы.ТипКартинки                      = -1;
				Если СокрЛП(СтрТаблицаСтрокПередачаПараметровТаблицей.Стр) <> "" Тогда
					СтрокаТаблицы.ПараметрыТаблицы = ОпределитьПараметрыВСтрокеПримера(
						СтрТаблицаСтрокПередачаПараметровТаблицей, СтруктураПараметров);
					СтрокаТаблицы.ПараметрыТаблицы = ПреобразоватьИменнованныеПараметрыСОпределениемТипов(
					                          СтрокаТаблицы.ПараметрыТаблицы, СтрокаТаблицы.ПараметрыТаблицы);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ОпределитьКоличествоПередаваемыхТаблиц(СтрокаДерева)
	Если СтрокаДерева.ШагСПараметрамиВТаблице <> Истина Тогда
		Возврат 0;
	КонецЕсли;

	Количество = 1;
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		Если Не ЗначениеЗаполнено(ПодчиненнаяСтрокаДерева.Имя) Тогда
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат Количество;
КонецФункции

Функция ЗаменитьТаблицуПримеровНаПереданнуюТаблицу(Тзн)
	Массив = Новый Массив;
	Для Каждого СтрТзн Из Тзн Цикл
		Массив.Добавить(Новый Структура("Стр,НомерСтрокиВФиче",СтрТзн.Имя,СтрТзн.НомерСтрокиВФиче));
	КонецЦикла;

	Возврат Массив;
КонецФункции

Процедура ОпределитьРодителяШага(СтрТаблицаШагов, СтрокиШагов, СтрДеревоСтроки, СтруктураПараметров)

	Если СтрТаблицаШагов.Родитель <> Неопределено Тогда
		Если СтрТаблицаШагов.Родитель = -1 Тогда
			СтрокиШагов = СтрДеревоСтроки.Строки;
		Иначе
			СтрокаТаблицыОбластей = СтруктураПараметров.ТаблицаОбластей.Найти(СтрТаблицаШагов.Родитель,
				"НомерСтрокиВФиче");
			Если СтрокаТаблицыОбластей <> Неопределено Тогда
				СтрокаДерева = СтрокаТаблицыОбластей.СтрокаДерева;
				СтрокиШагов  = СтрокаДерева.Строки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОпределитьУровеньГруппы(СтрокиШагов,СтрТаблицаШагов)
	Родитель = СтрокиШагов.Родитель;
	Пока Истина Цикл
		Если Родитель.Тип = "Сценарий" Тогда
			Прервать;
		КонецЕсли;
		Если Родитель.Тип = "Пример" Тогда
			Прервать;
		КонецЕсли;

		Если СтрТаблицаШагов.ЗначениеОтступа > Родитель.ЗначениеОтступа Тогда
			Прервать;
		КонецЕсли;

		Родитель = Родитель.Родитель;
	КонецЦикла;

	СтрокиШагов = Родитель.Строки;
КонецПроцедуры

Функция StepDefinitionИзТаблицыСценариев(IDИзStepDefinition,ТаблицаУжеСуществующихСценариев,СтруктураПараметров,НовыйStepDefinition)
	СтрТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Найти(IDИзStepDefinition,"Снипет");
	Если СтрТаблицаУжеСуществующихСценариев = Неопределено И ТекущийЯзыкФичаФайла <> "ru"  Тогда
		Если Не СтруктураПараметров.Свойство("ТаблицаПеревода") Тогда
			СтруктураПараметров.Вставить("ТаблицаПеревода",ПолучитьТаблицуПеревода(СтруктураПараметров));
		КонецЕсли;

		ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			СтрТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Найти(СтрокаТаблицаПеревода.СтрокаДляПоискаРусский,"Снипет");
			Если СтрТаблицаУжеСуществующихСценариев <> Неопределено Тогда
				НовыйStepDefinition                = СтрТаблицаУжеСуществующихСценариев.Снипет + "()";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СтрТаблицаУжеСуществующихСценариев;
КонецФункции

Функция StepDefinitionИзТаблицы(IDИзStepDefinition, ТаблицаИзвестныхШагов, СтруктураПараметров, ЗначенияПараметров,
		СтрокаДереваШаг)
	СтрТаблицаИзвестныхStepDefinition = Неопределено;
	ЯзыкРодителя = ТекущийЯзыкФичаФайла;
	Если СтруктураПараметров.Свойство("ЯзыкРодителя") Тогда
		ЯзыкРодителя = СтруктураПараметров. ЯзыкРодителя;
	КонецЕсли;
	Если ТекущийЯзыкФичаФайла = "ru" И ЯзыкРодителя = "ru" Тогда
		СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхШагов.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
	Иначе
		Если Не СтруктураПараметров.Свойство("ТаблицаПеревода") Тогда
			СтруктураПараметров.Вставить("ТаблицаПеревода",ПолучитьТаблицуПеревода(СтруктураПараметров));
		КонецЕсли;

		ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");

		Если СтрокаТаблицаПеревода = Неопределено Тогда
			//возможно идёт встраивание вложенного сценария
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаРусский");
			Если СтрокаТаблицаПеревода <> Неопределено Тогда
				СтрокаДереваШаг.Имя = СтрокаТаблицаПеревода.ТекстПереводаШаг;
			КонецЕсли;
		КонецЕсли;

		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхШагов.Найти(
					СтрокаТаблицаПеревода.СтрокаДляПоискаРусский, "СтрокаДляПоиска");

			Если СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров <> Неопределено Тогда
				Если СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров.Количество() > 0 Тогда
					//значит надо поменять параметры местами
					Попытка
						НовыеЗначенияПараметров = Новый СписокЗначений;
						Для Каждого НоваяПозиция Из СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров Цикл
							НовыеЗначенияПараметров.Добавить(ЗначенияПараметров[НоваяПозиция-1].Значение);
						КонецЦикла;

						ЗначенияПараметров = НовыеЗначенияПараметров;
					Исключение
						Сообщить("Не смог поменять параметры шага местами <" + СтрокаТаблицаПеревода.ТекстПереводаШаг + ">");
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат СтрТаблицаИзвестныхStepDefinition;
КонецФункции

Процедура РассчитатьStepDefinition(Параметры)

	СтруктураПараметров = Параметры.СтруктураПараметров;
	Если СтруктураПараметров.Свойство("КешStepDefinition") Тогда
		КешStepDefinition = СтруктураПараметров.КешStepDefinition;
		СтрокаКешStepDefinition = КешStepDefinition.Найти(Параметры.ИмяШагаБезКлючевогоСлова,"ИмяШагаБезКлючевогоСлова");
		Если СтрокаКешStepDefinition <> Неопределено Тогда
			Параметры.Вставить("НовыйStepDefinition",СтрокаКешStepDefinition.StepDefinition);
			Параметры.Вставить("НоваяСтрокаПараметров",СтрокаКешStepDefinition.СтрокаПараметров);
			Параметры.Вставить("ЗначенияПараметров",СтрокаКешStepDefinition.ЗначенияПараметров);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СтараяСтрокаПараметров = "";
	СтарыйStepDefinition   = ПолучитьStepDefinitionПоСтроке(Параметры.ИмяШагаБезКлючевогоСлова,
	                                                        Параметры.ЗначенияПараметров,
															СтараяСтрокаПараметров,
															Параметры.ШагСПараметрамиВТаблице,
															Параметры.КоличествоПередаваемыхТаблиц);

	НовыйStepDefinition    = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
	НоваяСтрокаПараметров  = ПолучитьНовуюСтрокуПараметров(СтараяСтрокаПараметров);

	Параметры.Вставить("НовыйStepDefinition",НовыйStepDefinition);
	Параметры.Вставить("НоваяСтрокаПараметров",НоваяСтрокаПараметров);

	Если СтруктураПараметров.Свойство("КешStepDefinition") Тогда
		СтрокаКешStepDefinition                          = КешStepDefinition.Добавить();
		СтрокаКешStepDefinition.StepDefinition           = НовыйStepDefinition;
		СтрокаКешStepDefinition.СтрокаПараметров         = НоваяСтрокаПараметров;
		СтрокаКешStepDefinition.ЗначенияПараметров       = Параметры.ЗначенияПараметров;
		СтрокаКешStepDefinition.ИмяШагаБезКлючевогоСлова = Параметры.ИмяШагаБезКлючевогоСлова;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьОбластьВТаблицуОбластей(НомерСтрокиВФиче,ТаблицаОбластей,СтрокаДерева)
	СтрокаТаблицаОбластей = ТаблицаОбластей.Добавить();
	СтрокаТаблицаОбластей.НомерСтрокиВФиче = НомерСтрокиВФиче;
	СтрокаТаблицаОбластей.СтрокаДерева     = СтрокаДерева;
КонецПроцедуры

Функция ОпределитьАдресСнипета(ИмяФайла,ЭтоLinux)
	Если ЭтоLinux Тогда
		Возврат ИмяФайла;
	Иначе
		Возврат СтрЗаменить(ИмяФайла,"/","\");
	КонецЕсли;
КонецФункции

Процедура ЗакрытьПредыдущийСценарий(ИмяФичи, ПолноеИмяФичи, ТекущийТипСценария, ПредыдущееКлючевоеСлово,
		ТекущееКлючевоеСлово, ДеревоСтроки, ОписаниеСценария, ТаблицаШагов, ТаблицаИзвестныхШагов,
		ТаблицаСтрокПримеров, НомерСтрокиСценария, ТаблицаУжеСуществующихСценариев, СтруктураПараметров,
		МассивСценариевЗащитаОтЗацикливанияКеш, ЭтоЗагрузкаПодчиненногоСценария, ПередаваемыеТаблицы,
		ИмяЗагружаемогоСценария)

	Если (ТекущееКлючевоеСлово <> "scenario") И (ТекущееКлючевоеСлово <> "scenario_outline") Тогда
		Возврат;
	КонецЕсли;

	МассивТеговФичи	      = СтруктураПараметров.МассивТеговФичи;
	МассивТеговСценариев  = СтруктураПараметров.МассивТеговСценариев;
	СписокТеговИсключение = СтруктураПараметров.СписокТеговИсключение;
	СписокТеговОтбор      = СтруктураПараметров.СписокТеговОтбор;
	ТегиСценария          = Новый Массив;
	Для Каждого Элем Из МассивТеговСценариев Цикл
		Если Элем.НомерСтрокиСценария = НомерСтрокиСценария Тогда
			ТегиСценария = Элем.МассивТегов;
		КонецЕсли;
	КонецЦикла;

	ДеревоСтроки.Родитель.МассивТегов = МассивТеговФичи;

	НайденТегОтборВФиче          = Ложь;
	НайденТегИсключениеВФиче     = Ложь;
	НайденТегОтборВСценарии      = Ложь;
	НайденТегИсключениеВСценарии = Ложь;
	//когда загружаем явно одну фичу, фильтры не работают
	Если СокрЛП(ТекущийТипСценария) <> "" И ТекущийТипСценария <> "background"
		И НЕ ЭтоЗагрузкаПодчиненногоСценария
		И ( СписокТеговОтбор.Количество() > 0
			Или СписокТеговИсключение.Количество() > 0 ) Тогда

		Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда

			НайденТегИсключениеВФиче = НайтиТегИзСпискаТегов(СписокТеговИсключение, МассивТеговФичи,
					"В фиче <" + ПолноеИмяФичи + "> сценария <" + ОписаниеСценария + "> найден тег исключение");

			НайденТегОтборВФиче = НайтиТегИзСпискаТегов(СписокТеговОтбор, МассивТеговФичи,
					"В фиче <" + ПолноеИмяФичи + "> сценария <" + ОписаниеСценария + "> найден тег отбор");

		КонецЕсли;

		НайденТегИсключениеВСценарии = НайтиТегИзСпискаТегов(СписокТеговИсключение, ТегиСценария,
			"В сценарии <" + ОписаниеСценария + "> найден тег исключение");

		НайденТегОтборВСценарии = НайтиТегИзСпискаТегов(СписокТеговОтбор, ТегиСценария,
			"В сценарии <" + ОписаниеСценария + "> найден тег отбор");

		Если Не НайденТегОтборВСценарии И НЕ НайденТегОтборВФиче Тогда

			//значит это загрузка именно фичи, а не вложенного сценария
			//у отбора приоритет над исключением, значит надо оставить сценарий
			Если СписокТеговОтбор.Количество() > 0
				Или ( СписокТеговИсключение.Количество() > 0
					И ( НайденТегИсключениеВСценарии Или НайденТегИсключениеВФиче ) ) Тогда

				Сообщить("Сценарий <" + ОписаниеСценария + "> не загружен.");
				Возврат; //значит установлен отбор, а у сценария нет этого тега и у фичи нет этого тега
			КонецЕсли;
			
		Иначе
			
			//по исключению сценариев
			ТегИсключение = Неопределено;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговИсключение.НайтиПоЗначению(Тег) <> Неопределено Тогда
					Сообщить("В сценарии <" + ОписаниеСценария + "> найден тег исключение <" + Тег + ">");
					НаденТегИсключениеВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
			
			//по отбору сценариев
			НаденТегОтборВСценарии = Ложь;
			Для Каждого СвойстваТега Из ТегиСценария Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
					Сообщить("В сценарии <" + ОписаниеСценария + "> найден тег отбор <" + Тег + ">");
					НаденТегОтборВСценарии = Истина;
				КонецЕсли;	 
			КонецЦикла;	
            
            // по отборам фичи
            Для Каждого СвойстваТега Из МассивТеговФичи Цикл
                Тег = СвойстваТега.Тег;
                Если СписокТеговОтбор.НайтиПоЗначению(Тег) <> Неопределено Тогда
                    Сообщить("В фиче <" + ПолноеИмяФичи + "> сценария <" + ОписаниеСценария + "> найден тег отбор <" + Тег + ">");
                    НаденТегОтборВФиче = Истина;
                КонецЕсли;	 
            КонецЦикла;	
            
            // по исключениям фичи
            Для Каждого СвойстваТега Из МассивТеговФичи Цикл
				Тег = СвойстваТега.Тег;
				Если СписокТеговИсключение.НайтиПоЗначению(Тег) <> Неопределено Тогда
					Сообщить("В фиче <" + ПолноеИмяФичи + "> сценария <" + ОписаниеСценария + "> найден тег исключение <" + Тег + ">");
					НаденТегИсключениеВФиче = Истина;
				КонецЕсли;	 
			КонецЦикла;	

			Если СписокТеговОтбор.Количество() > 0 Тогда
				Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда
					Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
						Сообщить("Сценарий <" + ОписаниеСценария + "> не загружен.");
						Возврат;//значит установлен отбор, а у сценария нет этого тега и у фичи нет этого тега
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;	 
			
			Если СписокТеговИсключение.Количество() > 0 Тогда
				Если НаденТегИсключениеВСценарии или НаденТегИсключениеВФиче Тогда //значит надо проигнорировать этот сценарий
					Если Не НаденТегОтборВСценарии и НЕ НаденТегОтборВФиче Тогда //у отбора приоритет над исключением, значит надо оставить сценарий
						Если НЕ ЭтоЗагрузкаПодчиненногоСценария Тогда //значит это загрузка именно фичи, а не вложенного сценария
							Сообщить("Сценарий <" + ОписаниеСценария + "> не загружен.");
							Возврат;
						КонецЕсли;	 
					КонецЕсли;	 
				КонецЕсли;	 
			КонецЕсли;
			
		КонецЕсли;	 
	КонецЕсли;	 
	
	ИмяСценария = ОписаниеСценария;
	Если ТекущийТипСценария = "background" Тогда
		ИмяСценария = "Контекст";
	КонецЕсли;

	Если (ТекущийТипСценария = "background") Или (ТекущийТипСценария = "scenario") Или (ТекущийТипСценария = "scenario_outline") Тогда
		Если (ТекущийТипСценария <> "background") Тогда
			СтруктураПараметров.КоличествоЗагруженныхСценариев = СтруктураПараметров.КоличествоЗагруженныхСценариев + 1;
		КонецЕсли;
		СтрДеревоСтроки = ДеревоСтроки.Добавить();
		СтрДеревоСтроки.Имя = ИмяСценария;
		СтрДеревоСтроки.Тип = "Сценарий";
		СтрДеревоСтроки.ТипКартинки = 2;
		Если ТекущийТипСценария = "background" Тогда
			СтрДеревоСтроки.ТипКартинки = 7;
		КонецЕсли;
		СтрДеревоСтроки.ПолныйПуть = СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + НомерСтрокиСценария;
		СтрДеревоСтроки.НомерСтрокиВФиче = НомерСтрокиСценария;
		ДобавитьОбластьВТаблицуОбластей(СтрДеревоСтроки.НомерСтрокиВФиче, СтруктураПараметров.ТаблицаОбластей,
			СтрДеревоСтроки);

		Если ТекущийТипСценария = "background" Тогда
			СтрДеревоСтроки.ДопТип = "Контекст";
		КонецЕсли;
		СтрДеревоСтроки.МассивТегов = ТегиСценария;

		СтрокиШагов         = СтрДеревоСтроки.Строки;
		СтрокиШаговИсходные = СтрДеревоСтроки.Строки;//запомним, чтобы потом использовать для секции примеров

		РазныеИменнованныеПараметры = Новый Массив;

		//определим есть ли замена таблицы примеров
		ЕстьЗаменаТаблицыПримеров = Ложь;

		Если (ПередаваемыеТаблицы <> Неопределено) И (ЭтоЗагрузкаПодчиненногоСценария = Истина)
				И (НРег(ИмяСценария) = НРег(ИмяЗагружаемогоСценария)) Тогда
			КолТаблицВФиче = 0;
			Для каждого СтрТаблицаШагов Из ТаблицаШагов Цикл

				Если СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр <> Неопределено Тогда
					КолТаблицВФиче = КолТаблицВФиче + СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр.Количество();
				КонецЕсли;
			КонецЦикла;

			Если КолТаблицВФиче = ПередаваемыеТаблицы.Количество()-1 Тогда
				ЕстьЗаменаТаблицыПримеров                     = Истина;
				БылаЗаменаТаблицыПараметровВСтруктуреСценария = Истина;
				//тогда нам передали ещё одну таблицу, которая заменяет таблицу примеров
			КонецЕсли;
		КонецЕсли;

		ЗакончиласьГруппа = Ложь;
		Для каждого СтрТаблицаШагов Из ТаблицаШагов Цикл

			Если СтрТаблицаШагов.ИмяОбласти <> Неопределено Тогда

				Если СтрТаблицаШагов.НачалоОбласти Тогда
					ОпределитьРодителяШага(СтрТаблицаШагов, СтрокиШагов, СтрДеревоСтроки, СтруктураПараметров);

					СтрОбласть                  = СтрокиШагов.Добавить();
					СтрОбласть.Имя              = СтрТаблицаШагов.ИмяОбласти;
					СтрОбласть.Тип              = "Область";
					СтрОбласть.ТипКартинки      = -1;
					СтрОбласть.НомерСтрокиВФиче = СтрТаблицаШагов.НомерСтроки;
					ДобавитьОбластьВТаблицуОбластей(СтрОбласть.НомерСтрокиВФиче,СтруктураПараметров.ТаблицаОбластей,СтрОбласть);
					СтрОбласть.ЗначениеОтступа  = СтрТаблицаШагов.ЗначениеОтступа;

					СтрокиШагов = СтрОбласть.Строки;

					Если Лев(СтрТаблицаШагов.ИмяОбласти,1) <> "*" Тогда
						Если ЗначениеЗаполнено(СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр) Тогда
							ОбработатьПередачуПараметровТаблицей(СтрОбласть,СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр,РазныеИменнованныеПараметры,СтруктураПараметров);
						КонецЕсли;

						ЗначенияПараметров = Новый СписокЗначений;

						ПараметрыДляПолученияStepDefenition = Новый Структура;
						ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
						ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
						ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
						ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова);
						ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",СтрОбласть.ШагСПараметрамиВТаблице);
						ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрОбласть));
						ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);

						РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);

						НоваяСтрокаПараметров             = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
						НовыйStepDefinition               = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
						ЗначенияПараметров                = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;

						IDИзStepDefinition     = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));
						СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхШагов.Найти(IDИзStepDefinition,"СтрокаДляПоиска");

						Если СтрТаблицаИзвестныхStepDefinition = Неопределено И ТекущийЯзыкФичаФайла <> "ru" Тогда
							ТаблицаПеревода = СтруктураПараметров.ТаблицаПеревода;
							СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(IDИзStepDefinition,"СтрокаДляПоискаПеревод");
							Если СтрокаТаблицаПеревода <> Неопределено Тогда
								IDИзStepDefinition = СтрокаТаблицаПеревода.СтрокаДляПоискаРусский;
								СтрТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхШагов.Найти(IDИзStepDefinition,"СтрокаДляПоиска");
							КонецЕсли;
						КонецЕсли;

						Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
							Если (СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве = "Условие") Или (СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве = "Цикл") Тогда
								СтрОбласть.ДопТип                  = СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве;
								Если СтрТаблицаШагов.КлючевоеСлово = "elseif" Тогда
									СтрОбласть.ДопТип                  = "УсловиеИначеЕсли";
								КонецЕсли;
								СтрОбласть.ПолныйПуть              = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
								СтрОбласть.Снипет                  = НовыйStepDefinition;
								//СтрОбласть.АдресСнипета            = СтрТаблицаИзвестныхStepDefinition.ИмяФайла;
								СтрОбласть.АдресСнипета            = ОпределитьАдресСнипета(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,СтруктураПараметров.ЭтоLinux);

								СтрОбласть.СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;
								СтрОбласть.ЗначенияПараметров      = ЗначенияПараметров;
							КонецЕсли;
						Иначе
							Если СтрТаблицаШагов.КлючевоеСлово = "if" Тогда
								//тогда считаем, что пользователь хотел в сценари использовать условие, но неверно его написал
								СтрОбласть.ДопТип = "Условие";
								СтрОбласть.ПолныйПуть              = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
								СтрОбласть.Снипет                  = НовыйStepDefinition;
							КонецЕсли;
						КонецЕсли;

						Если СтрТаблицаШагов.КлючевоеСлово = "else" Тогда
							СтрОбласть.ДопТип                  = "УсловиеИначе";
						КонецЕсли;
					КонецЕсли;

				Иначе
					ЗакончиласьГруппа = Истина;
				КонецЕсли;

				Продолжить;
			КонецЕсли;

			Если ЗакончиласьГруппа Тогда
				ЗакончиласьГруппа = Ложь;
				Если СтрТаблицаШагов.ЗначениеОтступа <> Неопределено Тогда
					ОпределитьУровеньГруппы(СтрокиШагов,СтрТаблицаШагов);
				КонецЕсли;
			КонецЕсли;

			СтрСтрокиШагов                  = СтрокиШагов.Добавить();
			СтрСтрокиШагов.Имя              = СтрТаблицаШагов.ИмяШага;
			СтрСтрокиШагов.Тип              = "Шаг";
			СтрСтрокиШагов.ТипКартинки      = 3;
			СтрСтрокиШагов.ПолныйПуть       = "     " + СтрДеревоСтроки.Родитель.ПолныйПуть + ":" + СтрТаблицаШагов.НомерСтроки;
			СтрСтрокиШагов.НомерСтрокиВФиче = СтрТаблицаШагов.НомерСтроки;
			СтрСтрокиШагов.ЗначениеОтступа  = СтрТаблицаШагов.ЗначениеОтступа;

			ОбработатьПередачуПараметровТаблицей(СтрСтрокиШагов,СтрТаблицаШагов.МассивТаблицПередаваемыхКакПараметр,РазныеИменнованныеПараметры,СтруктураПараметров);

			ЗначенияПараметров = Новый СписокЗначений;

			ПараметрыДляПолученияStepDefenition = Новый Структура;
			ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
			ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
			ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
			ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова);
			ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице",СтрСтрокиШагов.ШагСПараметрамиВТаблице);
			ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",ОпределитьКоличествоПередаваемыхТаблиц(СтрСтрокиШагов));
			ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);

			РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);

			НоваяСтрокаПараметров             = ПараметрыДляПолученияStepDefenition.НоваяСтрокаПараметров;
			НовыйStepDefinition               = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;
			СтрСтрокиШагов.ЗначенияПараметров = ПараметрыДляПолученияStepDefenition.ЗначенияПараметров;

			Для каждого ЭлемЗначенияПараметров Из ЗначенияПараметров Цикл
				Если ЭлемЗначенияПараметров.Значение.Тип = "ПараметрИменованный" Тогда
					Если РазныеИменнованныеПараметры.Найти(ЭлемЗначенияПараметров.Значение.Значение) = Неопределено Тогда
						РазныеИменнованныеПараметры.Добавить(ЭлемЗначенияПараметров.Значение.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;

			НашелStepDefinitionВepf = Ложь;

			IDИзStepDefinition = НРег(Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1));

			Если Не НашелStepDefinitionВepf Тогда
				ЗначенияПараметров = СтрСтрокиШагов.ЗначенияПараметров;
				СтрТаблицаИзвестныхStepDefinition = StepDefinitionИзТаблицы(IDИзStepDefinition,
					ТаблицаИзвестныхШагов, СтруктураПараметров, ЗначенияПараметров, СтрСтрокиШагов);
				СтрСтрокиШагов.ЗначенияПараметров = ЗначенияПараметров;
				Если СтрТаблицаИзвестныхStepDefinition <> Неопределено Тогда
					СтрСтрокиШагов.Снипет   = НовыйStepDefinition;
					НашелStepDefinitionВepf = Истина;
				КонецЕсли;
			КонецЕсли;

			Если НашелStepDefinitionВepf Тогда

				СтрСтрокиШагов.АдресСнипета = ОпределитьАдресСнипета(СтрТаблицаИзвестныхStepDefinition.ИмяФайла,
					СтруктураПараметров.ЭтоLinux);

				СтрСтрокиШагов.СтрокаРеальнойПроцедуры = СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры;

				СтрЗамены = НРег("/" + ИмяФичи + ".feature");
				ПутьФичи  = СтрЗаменить(НРег(ПолноеИмяФичи), СтрЗамены, "");
				Если Найти(НРег(СтрТаблицаИзвестныхStepDefinition.ИмяФайла),ПутьФичи) = 0 Тогда
					СтрСтрокиШагов.ЭтоЧужойСнипет = Истина;
				КонецЕсли;
				ФайлОбработки = Новый Файл(СтрТаблицаИзвестныхStepDefinition.ИмяФайла);
				Если НРег(ИмяФичи) <> НРег(ФайлОбработки.ИмяБезРасширения) Тогда
					СтрСтрокиШагов.ЭтоЧужойСнипет = Истина;
				КонецЕсли;
			Иначе

				СтрокаДляПоиска = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);
				СтрТаблицаУжеСуществующихСценариев = StepDefinitionИзТаблицыСценариев(НРег(СтрокаДляПоиска),
					ТаблицаУжеСуществующихСценариев, СтруктураПараметров, НовыйStepDefinition);
				Если СтрТаблицаУжеСуществующихСценариев = Неопределено Тогда
					СтрСтрокиШагов.Снипет                  = НовыйStepDefinition;
					СтрСтрокиШагов.СтрокаРеальнойПроцедуры = СтрЗаменить(НовыйStepDefinition,
						"("+НоваяСтрокаПараметров+")", "");
				Иначе
					//это подчиненное дерево

					НовыйStepDefinition = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);

					Если МассивСценариевЗащитаОтЗацикливанияКеш = Неопределено Тогда
						МассивСценариевЗащитаОтЗацикливанияКеш = Новый Массив;
					КонецЕсли;

					Элем = МассивСценариевЗащитаОтЗацикливанияКеш.Найти(СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
					Если Элем <> Неопределено Тогда
						//значит этот сценарий уже вызывался выше и сейчас произойдёт зацикливание
						Сообщить("Не смог скопировать сценарий " + СтрТаблицаУжеСуществующихСценариев.ИмяСценария + ", т.к. произошло бы зацикливание.");
						Возврат;
					КонецЕсли;

					МассивСценариевЗащитаОтЗацикливанияКеш.Добавить(СтрТаблицаУжеСуществующихСценариев.ИмяСценария);

					СтрСтрокиШагов.Тип         = "ШагСценарий";
					Если СтрТаблицаУжеСуществующихСценариев.ЭтоСтруктураСценария Тогда
						СтрСтрокиШагов.ДопТип  = "СтруктураСценария";
					КонецЕсли;

					СтрСтрокиШагов.ТипКартинки         = -1;
					//СтрСтрокиШагов.АдресСнипета        = СтрТаблицаУжеСуществующихСценариев.ИмяФайла;
					СтрСтрокиШагов.АдресСнипета = ОпределитьАдресСнипета(СтрТаблицаУжеСуществующихСценариев.ИмяФайла,СтруктураПараметров.ЭтоLinux);

					//Загрузим эту фичу в промежуточное дерево

					КешФич = СтруктураПараметров.КешФич;

					СтрКешФич = КешФич.Найти(СтрТаблицаУжеСуществующихСценариев.ИмяФайла,"ИмяФайла");
					Если СтрКешФич = Неопределено Тогда
						ПромДерево       = СоздатьДеревоЗначений();
						ПромДеревоСтроки = ПромДерево.Строки;

						ПромСтрокаФичи   = ПромДеревоСтроки.Добавить();
						ПромСтрокаФичи.Тип = "Фича";
						ПромСтрокаФичи.Имя  = СтрТаблицаУжеСуществующихСценариев.ИмяФайла;
						ПромСтрокаФичи.ПолныйПуть = СтрТаблицаУжеСуществующихСценариев.ПолноеИмя;

						КопияСтруктураПараметров = СкопироватьСтруктуру(СтруктураПараметров);
						КопияСтруктураПараметров.ИдетЗагрузкаИзКаталога = Ложь;

						ИмяВременнойФичи = ФайлФичиПоДвоичнымДанным(СтрТаблицаУжеСуществующихСценариев.ДвоичныеДанные);

						ПустаяСтрокаДереваРазделитель = Неопределено;
						ПередаваемыеТаблицы  = ПолучитьТаблицыОткудаКопировать(СтрСтрокиШагов.Строки,
							ПустаяСтрокаДереваРазделитель);
						Если ПередаваемыеТаблицы.Количество() = 0 Тогда
							ПередаваемыеТаблицы = Неопределено;
						КонецЕсли;

						ПредыдущийЯзыкФичаФайла = ТекущийЯзыкФичаФайла;

						КопияСтруктураПараметров.Вставить("ЯзыкРодителя",ТекущийЯзыкФичаФайла);
						ОписаниеОшибки = "";
						Если Не ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(
									ИмяВременнойФичи, ОписаниеОшибки, ПромСтрокаФичи.Строки,
									ТаблицаИзвестныхШагов, КопияСтруктураПараметров,
									МассивСценариевЗащитаОтЗацикливанияКеш, Истина, ПередаваемыеТаблицы,
									СтрТаблицаУжеСуществующихСценариев.ИмяСценария) Тогда

							Сообщить("Не смог загрузить " + СтрТаблицаУжеСуществующихСценариев.ИмяФайла + ". " + ОписаниеОшибки);
							ТекущийЯзыкФичаФайла = ПредыдущийЯзыкФичаФайла;
							Возврат;
						КонецЕсли;

						ТекущийЯзыкФичаФайла = ПредыдущийЯзыкФичаФайла;

						ВФичеЕстьСтруктурыСценария = Ложь;
						ФичаСодержитСтруктурыСценария(ПромДерево,ВФичеЕстьСтруктурыСценария);
						Если НЕ ВФичеЕстьСтруктурыСценария Тогда
							СтрКешФич          = КешФич.Добавить();
							СтрКешФич.Дерево   = ПромДерево;
							СтрКешФич.ИмяФайла = СтрТаблицаУжеСуществующихСценариев.ИмяФайла;
						КонецЕсли;
					Иначе
						ПромДерево = СтрКешФич.Дерево;
					КонецЕсли;

					МассивСценариевЗащитаОтЗацикливанияКеш.Удалить(МассивСценариевЗащитаОтЗацикливанияКеш.Количество()-1);

					СкопироватьСтрокиСценарияВУказаннуюСтроку(СтрСтрокиШагов, ПромДерево, НРег(НовыйStepDefinition),
						СтрТаблицаУжеСуществующихСценариев.ИмяФайла);

				КонецЕсли;

			КонецЕсли;

			СтрСтрокиШагов.ИмяШагаБезКлючевогоСлова   = СтрТаблицаШагов.ИмяШагаБезКлючевогоСлова;

		КонецЦикла;

		БылаОшибка = Ложь;

		Если ЕстьЗаменаТаблицыПримеров Тогда
			ТаблицаСтрокПримеров = ЗаменитьТаблицуПримеровНаПереданнуюТаблицу(ПередаваемыеТаблицы[ПередаваемыеТаблицы.Количество()-1]);
		КонецЕсли;

		ФорматТаблицыПримеров(ТаблицаСтрокПримеров,РазныеИменнованныеПараметры,БылаОшибка,Ложь,СтруктураПараметров);
		Если БылаОшибка Тогда
			СтрОшибки = "Ошибка парсинга фичи " + ДеревоСтроки.Родитель.Имя + "! Сценарий: " + ОписаниеСценария;
			Сообщить(СтрОшибки);
			ВызватьИсключение СтрОшибки;
		КонецЕсли;

		Если ТаблицаСтрокПримеров.Количество() > 0 Тогда
			СтрДеревоСтроки.ДопТип = "СтруктураСценария";

			СтрДеревоСтроки = СтрокиШаговИсходные.Добавить();
			СтрДеревоСтроки.Имя         = "Примеры";
			СтрДеревоСтроки.Тип         = "Примеры";
			СтрДеревоСтроки.ТипКартинки = -1;

			СтрокиПримеров = СтрДеревоСтроки.Строки;
			Ном = 0;
			ИменованныеПараметры = Неопределено;
			Для каждого СтрТаблицаСтрокПримеров Из ТаблицаСтрокПримеров Цикл
				Ном = Ном + 1;
				Если Ном = 1 Тогда
					//в первой строке лежат имена параметров
					СтрДеревоСтроки.ИменованныеПараметры = ОпределитьПараметрыВСтрокеПримера(СтрТаблицаСтрокПримеров,
					                                                                                 Неопределено);
					ИменованныеПараметры                 = СтрДеревоСтроки.ИменованныеПараметры;
				КонецЕсли;

				СтрСтрокаПримеров             = СтрокиПримеров.Добавить();
				СтрСтрокаПримеров.Имя         = СтрТаблицаСтрокПримеров.Стр;
				СтрСтрокаПримеров.Тип         = "Пример";
				СтрСтрокаПримеров.ТипКартинки = -1;
				СтрСтрокаПримеров.НомерСтрокиВФиче = СтрТаблицаСтрокПримеров.НомерСтрокиВФиче;
				СтрокиПримеров.Родитель.НомерСтрокиВФиче = СтрСтрокаПримеров.НомерСтрокиВФиче;

				Если Ном > 1 Тогда
					//тут будут лежать конкретные значения параметров
					СтрСтрокаПримеров.ИменованныеПараметры = ОпределитьПараметрыВСтрокеПримера(СтрТаблицаСтрокПримеров,
					                                                                                  Неопределено);
					//Нужно определить типы значений
					СтрСтрокаПримеров.ИменованныеПараметры = ПреобразоватьИменнованныеПараметрыСОпределениемТипов(
						СтрСтрокаПримеров.ИменованныеПараметры, СтрДеревоСтроки.ИменованныеПараметры);

					ДобавитьСценарийДляДанногоПримера(СтрСтрокаПримеров, ИменованныеПараметры);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

Функция НайтиТегИзСпискаТегов(Знач СписокТегов, Знач КоллекцияТегов, Знач НачалоСообщенияОшибки)
	Для Каждого СвойстваТега Из КоллекцияТегов Цикл
		Тег = СвойстваТега.Тег;
		Если СписокТегов.НайтиПоЗначению(Тег) <> Неопределено Тогда
			Сообщить(НачалоСообщенияОшибки + " <" + Тег + ">");
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Процедура ФичаСодержитСтруктурыСценария(Дерево,Статус)
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		Если СтрокаДерева.ДопТип = "СтруктураСценария" Тогда
			Статус = Истина;
		КонецЕсли;

		Если Статус Тогда
			Возврат;
		КонецЕсли;

		ФичаСодержитСтруктурыСценария(СтрокаДерева,Статус);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСтрокуДляЗаменыПараметровВложенныхСценариев(Знач Стр)
	ПараметрыЧисла       = Новый Массив;
	ПараметрыСтрокиА     = Новый Массив;
	ПараметрыСтрокиК     = Новый Массив;
	ПараметрыСтрокиМ     = Новый Массив;
	ПараметрыДаты        = Новый Массив;
	ПараметрыИменованные = Новый Массив;

	ЭмуляцияRegExp(Стр, ПараметрыСтрокиА, ПараметрыСтрокиК, ПараметрыСтрокиМ, ПараметрыЧисла,
		ПараметрыДаты, ПараметрыИменованные, Истина);

	Ном = 0;
	Для каждого ПараметрДаты Из ПараметрыДаты Цикл
		Ном = Ном + 1;
		Стр = СтрЗаменить(Стр, "*||*ПараметрДата" + Ном + "*||*", "*||*" + ПараметрДаты + "*||*");
	КонецЦикла;

	Возврат Стр;
КонецФункции

Процедура СкопироватьСтрокиСценарияВУказаннуюСтроку(КудаКопировать, ДеревоОткудаКопировать, ИмяСценария, ИмяФайла)
	СтрокаСценария = Неопределено;

	МассивСценариевЗащитаОтЗацикливания = КудаКопировать.МассивСценариевЗащитаОтЗацикливания;
	Если МассивСценариевЗащитаОтЗацикливания = Неопределено Тогда
		МассивСценариевЗащитаОтЗацикливания = Новый Массив();
		КудаКопировать.МассивСценариевЗащитаОтЗацикливания = МассивСценариевЗащитаОтЗацикливания;
	КонецЕсли;

	Элем = МассивСценариевЗащитаОтЗацикливания.Найти(ИмяСценария);
	Если Элем <> Неопределено Тогда
		//значит этот сценарий уже вызывался выше и сейчас произойдёт зацикливание
		Сообщить("Не смог скопировать сценарий " + ИмяСценария + ", т.к. произошло бы зацикливание.");
		Возврат;
	КонецЕсли;

	МассивСценариевЗащитаОтЗацикливания.Добавить(ИмяСценария);

	ЗначенияПараметровДляЗаменыВРодительскомСценарии   = Новый Массив;
	СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(КудаКопировать.Имя,ЗначенияПараметровДляЗаменыВРодительскомСценарии);//получим параметры которые пойдут во вложенный сценарий
	НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);

	ЗначенияПараметровДляЗаменыВоВложенномСценарии = Неопределено;
	ЗначенияТаблицДляЗаменыВоВложенномСценарии     = Неопределено;

	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Тип","Сценарий");
	НайденныеСтрокиВсе = ДеревоОткудаКопировать.Строки.НайтиСтроки(ПараметрыОтбора,Истина);
	НайденныеСтроки = Новый Массив;
	Для Каждого НайденнаяСтрока Из НайденныеСтрокиВсе Цикл
		ЗначенияПараметров   = Новый Массив;
		СтарыйStepDefinition = ПолучитьStepDefinitionПоСтроке(НайденнаяСтрока.Имя,ЗначенияПараметров);
		НовыйStepDefinition  = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
		НовыйStepDefinition  = Лев(НовыйStepDefinition,Найти(НовыйStepDefinition,"(")-1);

		Если НРег(НовыйStepDefinition) = ИмяСценария Тогда
			НайденныеСтроки.Добавить(НайденнаяСтрока);
			//имя сценария уже вставлено правильно из родительского шага
			ЗначенияПараметровДляЗаменыВоВложенномСценарии = ЗначенияПараметров;

			Если КудаКопировать.ШагСПараметрамиВТаблице = Истина Тогда
				//надо передать ещё и таблицы
				ЗначенияТаблицДляЗаменыВоВложенномСценарии = КудаКопировать.Строки;
			КонецЕсли;

			Прервать;
		КонецЕсли;

	КонецЦикла;

	СтрокаОткудаКопировать = Неопределено;
	КолСценариев           = 0;
	Для каждого СтрокаДерева Из НайденныеСтроки Цикл
		Если СтрокаДерева.Тип = "Сценарий" Тогда
			КолСценариев = КолСценариев + 1;
			СтрокаОткудаКопировать = СтрокаДерева;
		КонецЕсли;
	КонецЦикла;

	Если КолСценариев <> 1 Тогда
		Сообщить("Ошибка! В фиче " + ИмяФайла + " было найдено несколько сценариев с именем " + ИмяСценария);
		Возврат;
	КонецЕсли;

	ПараметрыКопирования = Новый Структура;
	ПараметрыКопирования.Вставить("ЗначенияПараметровДляЗаменыВРодительскомСценарии",
		ЗначенияПараметровДляЗаменыВРодительскомСценарии);
	ПараметрыКопирования.Вставить("ЗначенияПараметровДляЗаменыВоВложенномСценарии",
		ЗначенияПараметровДляЗаменыВоВложенномСценарии);
	ПараметрыКопирования.Вставить("ЗначенияТаблицДляЗаменыВоВложенномСценарии",
		ЗначенияТаблицДляЗаменыВоВложенномСценарии);
	ПараметрыКопирования.Вставить("ИдТаблицыДляКопирования", -1);

	Если ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
		ПустаяСтрокаДереваРазделитель  = Неопределено;
		ТаблицыКудаКопировать          = ПолучитьТаблицыОткудаКопировать(КудаКопировать.Строки,ПустаяСтрокаДереваРазделитель);
	КонецЕсли;

	СкопироватьСтрокуВДереваПодчиненныеЭлементы(КудаКопировать, СтрокаОткудаКопировать, ПараметрыКопирования);

	Если ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
		Если СтрокаОткудаКопировать.ДопТип = "СтруктураСценария" Тогда
			Если ПараметрыКопирования.ИдТаблицыДляКопирования < (ТаблицыКудаКопировать.Количество()-2) Тогда //т.к. если была замена таблицы примеров - то это было сделано на этапе загрузки вложенного сценария
				ВызватьИсключение "Во вложенный сценарий <" + КудаКопировать.Имя + "> было передано <" + ТаблицыКудаКопировать.Количество() +"> таблиц, а он принимает только <" + (ПараметрыКопирования.ИдТаблицыДляКопирования+1) + "> таблиц.";
			КонецЕсли;
		Иначе
			Если ПараметрыКопирования.ИдТаблицыДляКопирования < (ТаблицыКудаКопировать.Количество()-1) Тогда
				ВызватьИсключение "Во вложенный сценарий <" + КудаКопировать.Имя + "> было передано <" + ТаблицыКудаКопировать.Количество() +"> таблиц, а он принимает только <" + (ПараметрыКопирования.ИдТаблицыДляКопирования+1) + "> таблиц.";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТаблицыОткудаКопировать(ДеревоСтроки, ПустаяСтрокаДереваРазделитель)
	МассивТаблиц = Новый Массив;
	ТекТаблица   = Новый Массив;
	МассивТаблиц.Добавить(ТекТаблица);

	БылаХотяБыОднаСтрока = Ложь;
	Для Каждого СтрокаДерева Из ДеревоСтроки Цикл
		Если Не ЗначениеЗаполнено(СтрокаДерева.Имя) Тогда
			ПустаяСтрокаДереваРазделитель = СтрокаДерева;
			ТекТаблица   = Новый Массив;
			МассивТаблиц.Добавить(ТекТаблица);
			Продолжить;
		КонецЕсли;

		Если СтрокаДерева.СтрокаПараметровШагаВВидеТаблицы <> Истина Тогда
			Прервать; // тут могут после строк таблицы идти обычные шаги, т.к. ранее уже было копирование шагов в эту ветку дерева
		КонецЕсли;

		ТекТаблица.Добавить(СтрокаДерева);
		БылаХотяБыОднаСтрока = Истина;
	КонецЦикла;

	Если Не БылаХотяБыОднаСтрока  Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Возврат МассивТаблиц;
КонецФункции

Функция ЭтоПустаяТаблицаСОднойКолонкой(ТаблицаСтрок)
	Для Каждого Строка Из ТаблицаСтрок Цикл
		Если Строка.Имя = "||" Тогда
			Продолжить;
		КонецЕсли;
		Если Строка.Имя = "| |" Тогда
			Продолжить;
		КонецЕсли;

		Возврат Ложь;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Если Лев(Строка, 1) = "'" И Прав(Строка, 1) = "'" Тогда
		Возврат Строка;
	Иначе
		Возврат "'" + Строка + "'";
	КонецЕсли;
КонецФункции

Процедура СкопироватьСтрокуВДереваПодчиненныеЭлементы(КудаКопировать, ОткудаКопировать,
		ПараметрыКопирования)

	ЗначенияПараметровДляЗаменыВРодительскомСценарии = Неопределено;
	ЕстьЗначенияПараметровДляЗаменыВРодительскомСценарии = ПараметрыКопирования.Свойство(
		"ЗначенияПараметровДляЗаменыВРодительскомСценарии", ЗначенияПараметровДляЗаменыВРодительскомСценарии);
	ЗначенияПараметровДляЗаменыВоВложенномСценарии = Неопределено;
	ЕстьЗначенияПараметровДляЗаменыВоВложенномСценарии = ПараметрыКопирования.Свойство(
		"ЗначенияПараметровДляЗаменыВоВложенномСценарии", ЗначенияПараметровДляЗаменыВоВложенномСценарии);

	СтрокаПримеров = Неопределено;
	ЕстьСтрокаПримеров = ПараметрыКопирования.Свойство(
		"СтрокаПримеров", СтрокаПримеров);

	ИменованныеПараметры = Неопределено;
	Если ЕстьСтрокаПримеров Тогда
		ИменованныеПараметры = СтрокаПримеров.ИменованныеПараметры;
	КонецЕсли;

	СозданиеСекцииПримеров = ПараметрыКопирования.Свойство("СозданиеСекцииПримеров");
	Для каждого СтрОткудаКопировать Из ОткудаКопировать.Строки Цикл
		Если СозданиеСекцииПримеров И СтрОткудаКопировать.Тип = "Примеры" Тогда
			Продолжить;
		КонецЕсли;

		//создаём строку и копируем свойства
		СтрокаКуда = КудаКопировать.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКуда, СтрОткудаКопировать);

		Если СтрОткудаКопировать.Тип = "Пример" Тогда
			ПараметрыКопирования.ИдТаблицыДляКопирования = -1;
		КонецЕсли;

		Если СозданиеСекцииПримеров Тогда

			ЗначенияПараметров = Неопределено;
			ИмяШага            = СтрОткудаКопировать.Имя;
			Если СтрОткудаКопировать.ЗначенияПараметров <> Неопределено Тогда
				ЗначенияПараметров = СкопироватьСписокЗначенийСтруктур(СтрОткудаКопировать.ЗначенияПараметров);
				ИмяШага            = СоздатьИмяШагаДляScenarioOutline_И_ОбработатьЗначенияПараметров(
					СтрОткудаКопировать.Имя, ЗначенияПараметров,
					ИменованныеПараметры);
			КонецЕсли;

			Если СтрОткудаКопировать.СтрокаПараметровШагаВВидеТаблицы = Истина Тогда //тогда надо обновить параметры внутри таблицы
				//TODO бессмысленный цикл верхнего уровня по СтрОткудаКопировать.ПараметрыТаблицы, проверить на тестах
				Для Каждого ПараметрТаблицы Из СтрОткудаКопировать.ПараметрыТаблицы Цикл
					Для Каждого ИменованныйПараметр Из ИменованныеПараметры Цикл // а этот цикл нормальный

						Если Найти(ИмяШага, "<" + ИменованныйПараметр.Значение.ИмяПараметра + ">") <> 0 Тогда

							Если ИменованныйПараметр.Значение.Тип="Строка" Тогда
								// обеспечиваем совместимость когда указали |"<Параметр>"| или |'<Параметр>'| - чтобы избежать двойных кавычек
								ИмяШага = СтрЗаменить(ИмяШага, """", "");
								ИмяШага = СтрЗаменить(ИмяШага, "'", "");
								ЗначениеПараметра = ОбернутьВКавычки(ИменованныйПараметр.Значение.Значение);
							Иначе
								ЗначениеПараметра =  ИменованныйПараметр.Значение.Значение;
							КонецЕсли;

							ИмяШага = СтрЗаменить(ИмяШага,"<" + ИменованныйПараметр.Значение.ИмяПараметра + ">", ЗначениеПараметра);

						КонецЕсли;

					КонецЦикла;
				КонецЦикла;
			КонецЕсли;

			СтрШагПримера                    = СтрокаКуда;
			ЗаполнитьЗначенияСвойств(СтрШагПримера, СтрОткудаКопировать);

			//надо заменить только имя шага (с учетом реальных параметров) и значения параметров
			СтрШагПримера.Имя                = ИмяШага;
			СтрШагПримера.ЗначенияПараметров = ЗначенияПараметров;

		КонецЕсли;

		Если ЕстьЗначенияПараметровДляЗаменыВРодительскомСценарии
				И ЗначенияПараметровДляЗаменыВРодительскомСценарии.Количество() > 0 Тогда

			СтрокаДляЗаменыПараметров = ПолучитьСтрокуДляЗаменыПараметровВложенныхСценариев(СтрокаКуда.Имя);
			Ном = -1;
			Для каждого РодительскийПараметр Из ЗначенияПараметровДляЗаменыВРодительскомСценарии Цикл
				Ном = Ном + 1;
				ВложенныйПараметр = ЗначенияПараметровДляЗаменыВоВложенномСценарии[Ном];

				МассивЧтоЗаменяем = Новый Массив;

				ЧтоЗаменяем = ВложенныйПараметр.Значение;
				ТипВложенногоПараметра = ВложенныйПараметр.Тип;
				Если ТипВложенногоПараметра = "Строка" Тогда
					МассивЧтоЗаменяем.Добавить("'" + ЧтоЗаменяем + "'");
					МассивЧтоЗаменяем.Добавить("""" + ЧтоЗаменяем + """");
				ИначеЕсли ТипВложенногоПараметра = "Число" Или ТипВложенногоПараметра = "Дата" Тогда
					МассивЧтоЗаменяем.Добавить(ЧтоЗаменяем);
				КонецЕсли;

				НаЧтоЗаменяем = РодительскийПараметр.Значение;
				ТипНаЧтоЗаменяем = РодительскийПараметр.Тип;
				Если ТипНаЧтоЗаменяем = "Строка" Тогда
					НаЧтоЗаменяем = "'" + НаЧтоЗаменяем + "'";
				ИначеЕсли ТипНаЧтоЗаменяем = "ПараметрИменованный"  Тогда
					НаЧтоЗаменяем = "<" + НаЧтоЗаменяем + ">";
				КонецЕсли;

				Для каждого ЧтоЗаменяем Из МассивЧтоЗаменяем Цикл
					СтрокаДляЗаменыПараметров = СтрЗаменить(СтрокаДляЗаменыПараметров,
						"*||*" + ЧтоЗаменяем + "*||*", НаЧтоЗаменяем);
				КонецЦикла;

			КонецЦикла;

			СтрокаДляЗаменыПараметров = СтрЗаменить(СтрокаДляЗаменыПараметров, "*||*", "");
			// СтрокаДляЗаменыПараметров = СтрЗаменить(СтрокаДляЗаменыПараметров, "*||*", "");//TODO проверить на тестах

			СтрокаКуда.Имя = СтрокаДляЗаменыПараметров;

			ЗначенияПараметров = Новый СписокЗначений;
			СтараяСтрокаПараметров = "";
			СтарыйStepDefinition   = ПолучитьStepDefinitionПоСтроке(СтрокаДляЗаменыПараметров, ЗначенияПараметров);
			НовыйStepDefinition    = ПолучитьНовыйStepDefinition(СтарыйStepDefinition);
			НоваяСтрокаПараметров  = ПолучитьНовуюСтрокуПараметров(СтараяСтрокаПараметров);
			СтрокаКуда.ЗначенияПараметров = ЗначенияПараметров;

		КонецЕсли;

		//подчиненный элемент получил МассивСценариевЗащитаОтЗацикливания
		СтрокаКуда.МассивСценариевЗащитаОтЗацикливания = КудаКопировать.МассивСценариевЗащитаОтЗацикливания;

		СкопироватьСтрокуВДереваПодчиненныеЭлементы(СтрокаКуда, СтрОткудаКопировать, ПараметрыКопирования);

	КонецЦикла;

	Если ОткудаКопировать.ШагСПараметрамиВТаблице  = Истина  Тогда
		РазныеИменнованныеПараметры            = Новый Массив;
		ТаблицаСтрокПередачаПараметровТаблицей = СоздатьТаблицуСтрокПримеров();

		ОткудаКопироватьТаблицу        = КудаКопировать.Строки;

		Если ПараметрыКопирования.Свойство("ЗначенияТаблицДляЗаменыВоВложенномСценарии")
				И (ОткудаКопировать.Родитель.ДопТип <> "СтруктураСценария") Тогда
			Если ПараметрыКопирования.ЗначенияТаблицДляЗаменыВоВложенномСценарии <> Неопределено Тогда
				ПустаяСтрокаДереваРазделитель  = Неопределено;
				ТаблицыКудаКопировать          = ПолучитьТаблицыОткудаКопировать(КудаКопировать.Строки,
					ПустаяСтрокаДереваРазделитель);
				КоличествоТаблицДляКопирования = ТаблицыКудаКопировать.Количество();

				//надо заменить таблицы в подчиненном сценарии
				ПустаяСтрокаДереваРазделитель = Неопределено;
				ТаблицыОткудаКопировать       = ПолучитьТаблицыОткудаКопировать(
					ПараметрыКопирования.ЗначенияТаблицДляЗаменыВоВложенномСценарии,ПустаяСтрокаДереваРазделитель);

				ФинальныйМассивДляКопирования = Новый Массив;
				Для Ккк = 1 По КоличествоТаблицДляКопирования Цикл
					Если Ккк > 1 Тогда
						ФинальныйМассивДляКопирования.Добавить(ПустаяСтрокаДереваРазделитель);
					КонецЕсли;

					ПараметрыКопирования.ИдТаблицыДляКопирования = ПараметрыКопирования.ИдТаблицыДляКопирования + 1;

					Если ПараметрыКопирования.ИдТаблицыДляКопирования <= (ТаблицыОткудаКопировать.Количество()-1) Тогда

						Если ЭтоПустаяТаблицаСОднойКолонкой(ТаблицыОткудаКопировать[
								ПараметрыКопирования.ИдТаблицыДляКопирования]) Тогда
							//тогда не будем заменять таблицу
							Для Каждого СтрокаТаблицыОткудаКопировать Из ТаблицыКудаКопировать[
									ПараметрыКопирования.ИдТаблицыДляКопирования] Цикл
								ФинальныйМассивДляКопирования.Добавить(СтрокаТаблицыОткудаКопировать);
							КонецЦикла;

							Продолжить;
						КонецЕсли;

						Для Каждого СтрокаТаблицыОткудаКопировать Из ТаблицыОткудаКопировать[ПараметрыКопирования.ИдТаблицыДляКопирования] Цикл
							ФинальныйМассивДляКопирования.Добавить(СтрокаТаблицыОткудаКопировать);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;

				Если ФинальныйМассивДляКопирования.Количество() > 0 Тогда
					ОткудаКопироватьТаблицу = ФинальныйМассивДляКопирования;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;

		Для Каждого ПодчиненнаяСтрока Из ОткудаКопироватьТаблицу Цикл
			Если (ПодчиненнаяСтрока.СтрокаПараметровШагаВВидеТаблицы <> Истина) И (СокрЛП(ПодчиненнаяСтрока.Имя) <> "") Тогда
				Продолжить;
			КонецЕсли;

			СтрТаблицаСтрокиСРазделителями = Новый Структура;
			СтрТаблицаСтрокиСРазделителями.Вставить("Стр",ПодчиненнаяСтрока.Имя);
			СтрТаблицаСтрокиСРазделителями.Вставить("Тип",ПодчиненнаяСтрока.Тип);
			ТаблицаСтрокПередачаПараметровТаблицей.Добавить(СтрТаблицаСтрокиСРазделителями);
		КонецЦикла;

		МассивТаблицПередаваемыхКакПараметр = Новый Массив;
		МассивТаблицПередаваемыхКакПараметр.Добавить(ТаблицаСтрокПередачаПараметровТаблицей);

		ОбработатьПередачуПараметровТаблицей(КудаКопировать,МассивТаблицПередаваемыхКакПараметр,РазныеИменнованныеПараметры);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСледующееОжидаемоеКлючевоеСлово(Стр, ТекущийТипСценария, ИдетЧтениеПримеров)
	СледующаяСтрокаМожетБыть = "";

	ЭтоФича = 1;
	ЭтоСценарийИлиСтруктураСценарияИлиКонтекст = 2;
	ЭтоШаг = 3;
	ЭтоПримеры = 4;

	Вариант = Неопределено;
	СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Свойство(Стр, Вариант);
	Если Вариант = ЭтоФича Тогда
		СледующаяСтрокаМожетБыть = "background,scenario,scenario_outline";
		ИдетЧтениеПримеров = Ложь;

	ИначеЕсли Вариант = ЭтоСценарийИлиСтруктураСценарияИлиКонтекст Тогда
		ТекущийТипСценария = Стр;
		СледующаяСтрокаМожетБыть = "when,given,then,and,but,if,elseif,else";
		ИдетЧтениеПримеров = Ложь;

	ИначеЕсли Вариант = ЭтоШаг Тогда
		Если ТекущийТипСценария = "background" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,scenario,scenario_outline";
		ИначеЕсли ТекущийТипСценария = "scenario_outline" Тогда
			СледующаяСтрокаМожетБыть = "when,then,and,but,given,if,elseif,else,examples";
		КонецЕсли;

	ИначеЕсли Вариант = ЭтоПримеры Тогда
		ИдетЧтениеПримеров = Истина;
		СледующаяСтрокаМожетБыть = "scenario,scenario_outline";
	КонецЕсли;

	Если СледующаяСтрокаМожетБыть = Неопределено Тогда
		Сообщить("Не смог определить СледующееОжидаемоеКлючевое по: " + Стр);
	КонецЕсли;

	Возврат СледующаяСтрокаМожетБыть;
КонецФункции

Функция ПолучитьСтруктуруКлючевыхСловДляПоискаОжидаемыхКлючевых()
	Если СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых = Неопределено Тогда

		ЭтоФича = 1;
		ЭтоСценарийИлиСтруктураСценарияИлиКонтекст = 2;
		ЭтоШаг = 3;
		ЭтоПримеры = 4;

		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых = Новый Структура;
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("feature", ЭтоФича);

		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("scenario",
			ЭтоСценарийИлиСтруктураСценарияИлиКонтекст);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("scenario_outline",
			ЭтоСценарийИлиСтруктураСценарияИлиКонтекст);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("background",
			ЭтоСценарийИлиСтруктураСценарияИлиКонтекст);

		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("and", ЭтоШаг);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("when", ЭтоШаг);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("then", ЭтоШаг);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("given", ЭтоШаг);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("but", ЭтоШаг);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("if", ЭтоШаг);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("elseif", ЭтоШаг);
		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("else", ЭтоШаг);

		СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых.Вставить("examples", ЭтоПримеры);
	КонецЕсли;

	Возврат СтруктураКлючевыхСловДляПоискаОжидаемыхКлючевых;
КонецФункции

Функция ТекущееКлючевоеСловоСоответствуетОжидаемому(ТекущееКлючевоеСлово, ОжидаемоеКлючевоеСлово)
	Если ТекущееКлючевоеСлово = "" Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Найти(ОжидаемоеКлючевоеСлово, ТекущееКлючевоеСлово) > 0;
КонецФункции

Функция СоздатьТаблицуШагов()
	Тзн = Новый Массив;
	Возврат Тзн;
КонецФункции

Процедура ДобавитьШаг(ТаблицаШагов,СтрокаТаблицаТекстФичи,КлючевоеСлово,ИмяШагаБезКлючевогоСлова,ИмяШага,НомерСтроки,МассивТаблицПередаваемыхКакПараметр,СруктураОбласти = Неопределено)

	СтруктураШага = Новый Структура;
	СтруктураШага.Вставить("КлючевоеСлово",КлючевоеСлово);
	СтруктураШага.Вставить("ИмяШагаБезКлючевогоСлова",ИмяШагаБезКлючевогоСлова);
	СтруктураШага.Вставить("ИмяШага",ИмяШага);
	СтруктураШага.Вставить("НомерСтроки",НомерСтроки);
	СтруктураШага.Вставить("МассивТаблицПередаваемыхКакПараметр",МассивТаблицПередаваемыхКакПараметр);
	СтруктураШага.Вставить("ЗначениеОтступа",СтрокаТаблицаТекстФичи.ЗначениеОтступа);

	СтруктураШага.Вставить("ИмяОбласти",Неопределено);
	СтруктураШага.Вставить("НачалоОбласти",Неопределено);
	СтруктураШага.Вставить("Родитель",Неопределено);
	СтруктураШага.Вставить("РазмерОтступа",0);
	Если СруктураОбласти <> Неопределено Тогда
		СтруктураШага.Вставить("ИмяОбласти",СруктураОбласти.ИмяОбласти);
		СтруктураШага.Вставить("НачалоОбласти",СруктураОбласти.НачалоОбласти);
		Если СруктураОбласти.Свойство("Родитель") Тогда
			СтруктураШага.Вставить("Родитель",СруктураОбласти.Родитель);
		КонецЕсли;
		Если СруктураОбласти.Свойство("РазмерОтступа") Тогда
			СтруктураШага.Вставить("РазмерОтступа",СруктураОбласти.РазмерОтступа);
		КонецЕсли;
	КонецЕсли;

	ТаблицаШагов.Добавить(СтруктураШага);
КонецПроцедуры

Функция СоздатьТаблицуСтрокПримеров()
	Тзн = Новый Массив;
	Возврат Тзн;
КонецФункции

Функция ПроверитьЧтоФичаИмеетКорректныеОтступыВНачалеСтрок(Тзн, ИмяФайлаОригинальное)
	Статус = Истина;
	ВыводилИмяФичи = Ложь;

	КолСтрокПробелы = 0;
	КолСтрокТабы    = 0;

	НомСтр               = 0;
	НайденоКлючевоеСлово = Ложь;
	Для Каждого СтрТзн Из Тзн Цикл
		НомСтр = НомСтр + 1;

		СокрСтр = СтрТзн.СтрокаБезПробелов;

		Если СокрСтр = "" Тогда
			Продолжить;
		КонецЕсли;
		ПервыйСимвол = СтрТзн.ПервыйСимвол;

		Если ПервыйСимвол = "#" Или ПервыйСимвол = "@" Или ПервыйСимвол = "|" Тогда
			Продолжить;
		КонецЕсли;

		КоличествоПробеловВНачалеСтроки = 0;
		КоличествоТабовВНачалеСтроки    = 0;

		ДлинаСтроки = СтрДлина(СтрТзн.Стр);

		Поз = -1;
		КлючевоеСлово        = ПолучитьКлючевоеСлово(СокрСтр, Поз);
		СтрТзн.КлючевоеСлово = КлючевоеСлово;

		Если КлючевоеСлово = "scenario" или КлючевоеСлово = "scenario_outline" или КлючевоеСлово = "background" Тогда
			НайденоКлючевоеСлово = Истина;
			СтрТзн.ЗначениеОтступа = 0;
		КонецЕсли;

		Если Не НайденоКлючевоеСлово Тогда
			Продолжить;
		КонецЕсли;

		Для Ккк = 1 По ДлинаСтроки Цикл
			Символ = Сред(СтрТзн.Стр, Ккк, 1);
			Если Символ = " " Тогда
				КоличествоПробеловВНачалеСтроки = КоличествоПробеловВНачалеСтроки + 1;
			ИначеЕсли Символ = Символы.Таб Тогда
				КоличествоТабовВНачалеСтроки = КоличествоТабовВНачалеСтроки + 1;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если КоличествоПробеловВНачалеСтроки > 0 Тогда
			КолСтрокПробелы = КолСтрокПробелы + 1;
		КонецЕсли;
		Если КоличествоТабовВНачалеСтроки > 0 Тогда
			КолСтрокТабы = КолСтрокТабы + 1;
		КонецЕсли;

		Если (КоличествоПробеловВНачалеСтроки > 0) И (КоличествоТабовВНачалеСтроки > 0) Тогда
			Если Не ВыводилИмяФичи Тогда
				ВыводилИмяФичи = Истина;
				Сообщить("Фича <" + ИмяФайлаОригинальное + "> содержит тег @Tree. Найдены строки, которые содержат символы пробелов и символы табуляции в начале строки. Дерево не может быть корректно построено.");
			КонецЕсли;

			Сообщить(СтрТзн.Стр);
			Статус = Ложь;
		КонецЕсли;
	КонецЦикла;

	Если (КолСтрокПробелы > 0) И (КолСтрокТабы > 0) Тогда
		Сообщить("Фича <" + ИмяФайлаОригинальное + "> содержит тег @Tree. Часть строк содержит в начале строки символы пробелов <" + КолСтрокПробелы + ">, часть строк содержит символы табуляции <" + КолСтрокТабы + ">. Дерево не может быть корректно построено.");
		Статус = Ложь;
	КонецЕсли;

	Возврат Статус;
КонецФункции

Функция ЗагрузитьФичуВТаблицуЗначений(ИмяФайла, НадоСтроитьДерево, ИмяФайлаОригинальное, ТэгУказанияЯзыка)
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Стр");
	Тзн.Колонки.Добавить("ЗначениеОтступа");
	Тзн.Колонки.Добавить("СледующийОступ");
	Тзн.Колонки.Добавить("ПредыдущийОтступ");
	Тзн.Колонки.Добавить("НомСтр");
	Тзн.Колонки.Добавить("Примеры");
	Тзн.Колонки.Добавить("НельзяСоздаватьОбласть");
	Тзн.Колонки.Добавить("КлючевоеСлово");
	Тзн.Колонки.Добавить("СтрокаБезПробелов");
	Тзн.Колонки.Добавить("СтрокаБезПробеловНРег");
	Тзн.Колонки.Добавить("ПервыйСимвол");

	//TODO подумать об ускорении через Потоки или другой алгоритм вместо передачи и чтения временного файла
	МассивСтрокФайла = ЗагрузитьФайлВМассив(ИмяФайла);

	ДлинаТэгаУказанияЯзыка = СтрДлина(ТэгУказанияЯзыка);
	НомСтр = 0;
	Для каждого Стр Из МассивСтрокФайла Цикл

		СтрокаБезЛевыхПробелов = СокрЛ(Стр);
		СтрокаБезПробелов = СокрП(СтрокаБезЛевыхПробелов);
		СтрокаБезПробеловНРег = НРег(СтрокаБезПробелов);
		ПервыйСимвол = Лев(СтрокаБезЛевыхПробелов, 1);

		Если ПервыйСимвол = "#" Тогда
			ПозицияПоиска = Найти(СтрокаБезПробелов, ТэгУказанияЯзыка);
			Если  ПозицияПоиска > 0 Тогда
				СтрокаЯзыка = СокрЛП(Сред(СтрокаБезПробелов, ПозицияПоиска + ДлинаТэгаУказанияЯзыка));
				Если СоответствиеТаблицПереводов.Получить(СтрокаЯзыка) <> Неопределено Тогда
					ТекущийЯзыкФичаФайла = СтрокаЯзыка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если СтрокаБезПробеловНРег = "@tree" Тогда
			НадоСтроитьДерево = Истина;
		КонецЕсли;

		СтрТзн = Тзн.Добавить();
		СтрТзн.Стр = Стр;
		СтрТзн.СтрокаБезПробелов = СтрокаБезПробелов;
		СтрТзн.СтрокаБезПробеловНРег = СтрокаБезПробеловНРег;
		СтрТзн.ПервыйСимвол = ПервыйСимвол;

		НомСтр        = НомСтр + 1;
		СтрТзн.НомСтр = НомСтр;
	КонецЦикла;

	ПредыдущийОтступ = 0;
	Если НадоСтроитьДерево Тогда

		Для Ном = 0 По Тзн.Количество() - 1 Цикл

			СтрТзн                  = Тзн[Ном];
			СтрТзн.ЗначениеОтступа  = ВычислитьЗначениеОтступа(СтрТзн.Стр, СтрТзн.ПервыйСимвол,
				СтрТзн.СтрокаБезПробелов, ПредыдущийОтступ);
			СтрТзн.ПредыдущийОтступ = ПредыдущийОтступ;
			СтрТзн.СледующийОступ   = СтрТзн.ЗначениеОтступа;

			Если Ном > 0 Тогда
				Тзн[Ном-1].СледующийОступ = СтрТзн.ЗначениеОтступа;
			КонецЕсли;

			ПредыдущийОтступ        = СтрТзн.ЗначениеОтступа;
		КонецЦикла;

		ЕстьПримеры = Ложь;
		КолСтрок = Тзн.Количество()-1;
		ОбойтиТаблицуОтступов(Тзн, КолСтрок, ЕстьПримеры);

		Если ЕстьПримеры Тогда
			СтрокаСШагом = Неопределено;
			Для Ккк = 0 По КолСтрок-1 Цикл //TODO исправить ошибку чтения последнего примера - д.б. По КолСтрок
				ТекСтрокаТзн  = Тзн[Ккк];

				Если ТекСтрокаТзн.Примеры = Истина Тогда
					//нашел строку секции примеров
					Если СтрокаСШагом <> Неопределено Тогда
						СтрокаСШагом.НельзяСоздаватьОбласть = Истина;
					КонецЕсли;
				КонецЕсли;

				Если Не ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(ТекСтрокаТзн.СтрокаБезПробелов,
							ТекСтрокаТзн.ПервыйСимвол) Тогда
					СтрокаСШагом = ТекСтрокаТзн;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		ПроверитьЧтоФичаИмеетКорректныеОтступыВНачалеСтрок(Тзн, ИмяФайлаОригинальное);
	КонецЕсли;

	Возврат Тзн;
КонецФункции

Функция ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(СтрокаБезПробелов, ПервыйСимвол)
	Если  (СтрокаБезПробелов = "") Или (ПервыйСимвол = "#") Или (ПервыйСимвол = "@") Или (ПервыйСимвол = "|") Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура ОбойтиТаблицуОтступов(Тзн, КолСтрок, ЕстьПримеры)
	Для Ккк = 0 По КолСтрок-1 Цикл
		ТекСтрокаТзн  = Тзн[КолСтрок - Ккк];
		ПредСтрокаТзн = Тзн[КолСтрок - Ккк - 1];

		ПредСтрокаБезПробелов = ПредСтрокаТзн.СтрокаБезПробелов;
		ПредПервыйСимвол = ПредСтрокаТзн.ПервыйСимвол;
		СтрокаБезПробеловНРег = ПредСтрокаТзн.СтрокаБезПробеловНРег;

		//для пустых строк отступ приравнивается снизу вверх
		Если ЭтоНеСтрокаСШагом_ОпределимПоПервомуСимволу(ПредСтрокаБезПробелов, ПредПервыйСимвол) Тогда
			ПредСтрокаТзн.ЗначениеОтступа = ТекСтрокаТзн.ЗначениеОтступа;
		ИначеЕсли ВЭтойСтрокеКлючевоеСловоПримеры(СтрокаБезПробеловНРег) Тогда
			ПредСтрокаТзн.ЗначениеОтступа = ТекСтрокаТзн.ЗначениеОтступа;
			ПредСтрокаТзн.Примеры = Истина;
			ЕстьПримеры           = Истина;
		КонецЕсли;

		ПредСтрокаТзн.СледующийОступ = ТекСтрокаТзн.ЗначениеОтступа;

	КонецЦикла;
КонецПроцедуры

Функция ВычислитьЗначениеОтступа(Знач Стр, Знач ПервыйСимвол, Знач СтрокаБезПробелов, ПредыдущийОтступ)
	Если СтрокаБезПробелов = "" Или ПервыйСимвол = "|" Или ПервыйСимвол = "#" Или ПервыйСимвол = "@" Тогда
		//чтобы строки обозначающие таблицы всегда шли как следущая строка
		Возврат ПредыдущийОтступ;
	КонецЕсли;

	Кол = 0;
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр, Ккк, 1);
		Если Символ = Символы.Таб Тогда
			Кол = Кол + 1;
		ИначеЕсли Символ = " " Тогда
			Кол = Кол + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Кол;

КонецФункции

Процедура ДобавитьКолонкуСнипетаВТаблицаУжеСуществующихСценариев(ТаблицаУжеСуществующихСценариев,СтруктураПараметров)

	КолонкаСнипет = ТаблицаУжеСуществующихСценариев.Колонки.Найти("Снипет");

	Если ТаблицаУжеСуществующихСценариев.Колонки.Найти("Снипет") = Неопределено Тогда
		ТаблицаУжеСуществующихСценариев.Колонки.Добавить("Снипет");
	КонецЕсли;

	Для каждого СтрТаблицаУжеСуществующихСценариев Из ТаблицаУжеСуществующихСценариев Цикл
		Если ЗначениеЗаполнено(СтрТаблицаУжеСуществующихСценариев.Снипет) Тогда
			Продолжить;
		КонецЕсли;

		ЗначенияПараметров = Новый СписокЗначений;

		ПараметрыДляПолученияStepDefenition = Новый Структура;
		ПараметрыДляПолученияStepDefenition.Вставить("ЗначенияПараметров",ЗначенияПараметров);
		ПараметрыДляПолученияStepDefenition.Вставить("НоваяСтрокаПараметров","");
		ПараметрыДляПолученияStepDefenition.Вставить("НовыйStepDefinition","");
		ПараметрыДляПолученияStepDefenition.Вставить("ИмяШагаБезКлючевогоСлова",СтрТаблицаУжеСуществующихСценариев.ИмяСценария);
		ПараметрыДляПолученияStepDefenition.Вставить("ШагСПараметрамиВТаблице","");
		ПараметрыДляПолученияStepDefenition.Вставить("КоличествоПередаваемыхТаблиц",0);
		ПараметрыДляПолученияStepDefenition.Вставить("СтруктураПараметров",СтруктураПараметров);

		РассчитатьStepDefinition(ПараметрыДляПолученияStepDefenition);

		НовыйStepDefinition = ПараметрыДляПолученияStepDefenition.НовыйStepDefinition;

		НовыйStepDefinition  = Лев(НовыйStepDefinition, Найти(НовыйStepDefinition, "(") - 1);

		СтрТаблицаУжеСуществующихСценариев.Снипет             = НРег(НовыйStepDefinition);
	КонецЦикла;

КонецПроцедуры

Функция ПреобразоватьСписокЗначенийНСтр(Спс)
	Копия = Спс.Скопировать();
	Для каждого Элем Из Копия Цикл
		Элем.Значение = НРег(Элем.Значение);
	КонецЦикла;

	Возврат Копия;
КонецФункции

Процедура ОпределитьТегиФичи(ТаблицаТекстФичи,  МассивТеговФичи, МассивТеговСценариев, МассивТеговВсе,
		МассивТеговВсеДляПоиска)

	НайденСценарий = Ложь;
	ИмяСценария    = "";
	МассивТеговСценария = Новый Массив;
	Ном = 0;
	Для каждого СтрокаТаблицы Из ТаблицаТекстФичи Цикл
		Ном = Ном + 1;
		Стр = СтрокаТаблицы.СтрокаБезПробелов;
		ПервыйСимвол = СтрокаТаблицы.ПервыйСимвол;
		СтрНрег = СтрокаТаблицы.СтрокаБезПробеловНРег;

		Поз = -1;
		КлючевоеСлово = ПолучитьКлючевоеСлово(Стр, Поз);

		Если КлючевоеСлово = "feature" Тогда
			//все теги фичи должны были быть объявлены выше ключевого слова Функционал и подобного
			НайденСценарий = Истина;

		ИначеЕсли КлючевоеСлово = "scenario" Или КлючевоеСлово = "scenario_outline" Тогда
			НайденСценарий = Истина;
			ИмяСценария = СокрЛП(Сред(СтрНрег, Поз));

			Если Лев(ИмяСценария, 1) = ":" Тогда
				ИмяСценария = Сред(ИмяСценария, 2);
			КонецЕсли;

			ДанныеСценария      = Новый Структура;
			ДанныеСценария.Вставить("ИмяСценария", ИмяСценария);
			//здесь мы добавляем к сценарию теги, объявленные выше
			ДанныеСценария.Вставить("МассивТегов", МассивТеговСценария);
			ДанныеСценария.Вставить("НомерСтрокиСценария", Ном);
			МассивТеговСценариев.Добавить(ДанныеСценария);

			МассивТеговСценария = Новый Массив;
		КонецЕсли;

		Если ПервыйСимвол = "@" Тогда //Это символ, обозначающий тег.
			Тег = НРег(Сред(Стр, 2));
			ОписаниеСтрокиТега = Новый Структура("Тег,НомерСтроки", Тег, Ном);
			Если НайденСценарий Тогда
				МассивТеговСценария.Добавить(ОписаниеСтрокиТега);
			Иначе
				МассивТеговФичи.Добавить(ОписаниеСтрокиТега);
			КонецЕсли;

			МассивТеговВсе.Добавить(Новый Структура("Тег,НомерСтроки",Тег,Ном));
			МассивТеговВсеДляПоиска.Добавить(Тег);
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры

Функция СледующаяСтрокаСодержитВертикальнуюЧерту(ТаблицаТекстФичи, Знач СчетчикСтрокФичи)
	Пока Истина Цикл
		СчетчикСтрокФичи = СчетчикСтрокФичи + 1;
		Если СчетчикСтрокФичи > ТаблицаТекстФичи.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;

		СтрокаФичи = ТаблицаТекстФичи[СчетчикСтрокФичи - 1];
		Стр = СтрокаФичи.СтрокаБезПробелов;
		ПервыйСимвол = СтрокаФичи.ПервыйСимвол;
		Если Стр = "" Или ПервыйСимвол = "#" Тогда
			Продолжить;
		КонецЕсли;

		Если ПервыйСимвол = "|" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция ОпределитьКакойСтрокеПодчиненаОбласть(ТаблицаТекстФичи, НомСтр, ЗначениеОтступа)
	Ид = НомСтр;

	Результат = -1;

	Пока Истина Цикл
		Ид = Ид - 1;

		Если Ид < 0 Тогда
			Прервать;
		КонецЕсли;

		СтрТаблицаТекстФичи = ТаблицаТекстФичи[Ид];

		Если СтрТаблицаТекстФичи.ЗначениеОтступа < ЗначениеОтступа Тогда
			Возврат Ид + 1;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция ПроверитьЧтоМожноСоздатьОбласть(ТаблицаТекстФичи, СчетчикСтрокФичи)
	СледующееКлючевоеСлово = Неопределено;

	Ид = СчетчикСтрокФичи-1;
	Пока Истина Цикл
		Ид = Ид + 1;
		Если Ид > (ТаблицаТекстФичи.Количество()-1) Тогда
			Прервать;
		КонецЕсли;

		СтрТаблицаТекстФичи = ТаблицаТекстФичи[Ид];
		Если Не ЗначениеЗаполнено(СтрТаблицаТекстФичи.КлючевоеСлово) Тогда
			Продолжить;
		КонецЕсли;

		СледующееКлючевоеСлово = СтрТаблицаТекстФичи.КлючевоеСлово;
		Прервать;
	КонецЦикла;

	Если СледующееКлючевоеСлово = Неопределено Или СледующееКлючевоеСлово = "scenario"
		Или СледующееКлючевоеСлово = "scenario_outline" Или СледующееКлючевоеСлово = "examples" Тогда

		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция СоздатьТаблицуОбластей()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("НомерСтрокиВФиче",Новый ОписаниеТипов("Число"));
	Тзн.Колонки.Добавить("СтрокаДерева");
	Тзн.Индексы.Добавить("НомерСтрокиВФиче");

	Возврат Тзн;
КонецФункции

Функция ПроверитьФичуНаКорректностьСинтаксисаИЗагрузитьСценарии(Знач ИмяФайла, ОписаниеОшибки, ДеревоСтроки,
		ТаблицаИзвестныхШагов, СтруктураПараметров, МассивСценариевЗащитаОтЗацикливанияКеш,
		ЭтоЗагрузкаПодчиненногоСценария, ПередаваемыеТаблицы, ИмяЗагружаемогоСценария)

	Перем ТэгУказанияЯзыка;

	СписокТеговИсключение           = ПреобразоватьСписокЗначенийНСтр(СтруктураПараметров.СписокТеговИсключение);
	СписокТеговОтбор                = ПреобразоватьСписокЗначенийНСтр(СтруктураПараметров.СписокТеговОтбор);
	ТаблицаУжеСуществующихСценариев = СтруктураПараметров.ТаблицаУжеСуществующихСценариев;

	СтруктураПараметров.Вставить("ТаблицаОбластей", СоздатьТаблицуОбластей());

	ТекущийТипСценария      = Неопределено;
	ПредыдущееКлючевоеСлово = Неопределено;
	ОжидаемоеКлючевоеСлово  = "feature";
	ТекущееКлючевоеСлово    = Неопределено;
	ВтораяЧастьСтроки       = Неопределено;
	ОписаниеФичи            = "";
	ОписаниеСценария        = "";
	РасшифровкаСценария 	= "";
	СтрокаШага              = "";
	ИдетЧтениеПримеров      = Ложь;
	ИдетПередачаПараметровТаблицей = Ложь;

	ТаблицаШагов                           = СоздатьТаблицуШагов();
	ТаблицаСтрокПримеров                   = СоздатьТаблицуСтрокПримеров();
	МассивТаблицПередаваемыхКакПараметр    = Неопределено;
	ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;

	ТэгУказанияЯзыка 	 = "language:";
	ТекущийЯзыкФичаФайла = "ru";

	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "/");
	ФайлФичи = Новый Файл(ИмяФайла);
	ИмяФичи  = ФайлФичи.ИмяБезРасширения;

	НадоСохранятьДвоичныеДанные = СтруктураПараметров.Свойство("МассивРезультатОбходаКаталогов");
	ФайлВременнаяФича = ИмяФайла;
	Если НадоСохранятьДвоичныеДанные Тогда
		МассивРезультатОбходаКаталогов = СтруктураПараметров.МассивРезультатОбходаКаталогов;
		Для каждого Элем Из МассивРезультатОбходаКаталогов Цикл
			Если Не Элем.Свойство("Фича") Тогда
				Продолжить;
			КонецЕсли;

			УниверсальноеИмяФайла = СтрЗаменить(Элем.ПолныйПуть, "\", "/");

			Если НРег(УниверсальноеИмяФайла) = НРег(ИмяФайла) Тогда
				ФайлВременнаяФича = ФайлФичиПоДвоичнымДанным(Элем.ДвоичныеДанные);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НадоСтроитьДерево        = Ложь;
	ТаблицаТекстФичи         = ЗагрузитьФичуВТаблицуЗначений(ФайлВременнаяФича, НадоСтроитьДерево, ИмяФайла,
		ТэгУказанияЯзыка);
	КолСтрокТаблицаТекстФичи = ТаблицаТекстФичи.Количество();

	МассивТеговФичи         = Новый Массив;
	МассивТеговСценариев    = Новый Массив;
	МассивТеговВсе          = Новый Массив;
	МассивТеговВсеДляПоиска = Новый Массив;
	ОпределитьТегиФичи(ТаблицаТекстФичи, МассивТеговФичи, МассивТеговСценариев, МассивТеговВсе,
		МассивТеговВсеДляПоиска);

	СтруктураПараметров.Вставить("МассивТеговФичи",МассивТеговФичи);
	СтруктураПараметров.Вставить("МассивТеговСценариев",МассивТеговСценариев);
	СтруктураПараметров.Вставить("МассивТеговВсе",МассивТеговВсе);
	СтруктураПараметров.Вставить("МассивТеговВсеДляПоиска",МассивТеговВсеДляПоиска);
	СтруктураПараметров.Вставить("СписокТеговИсключение",СписокТеговИсключение);
	СтруктураПараметров.Вставить("СписокТеговОтбор",СписокТеговОтбор);
	СтруктураПараметров.Вставить("КоличествоЗагруженныхСценариев",0);

	Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда
		//ищем теги фильтр - начало
		НашлиТегИзФичиВСпискеТеговФильтр = Ложь;

		Для каждого СтрокаТаблицы Из ТаблицаТекстФичи Цикл
		    Стр = СтрокаТаблицы.Стр;
		    ПервыйСимвол = СтрокаТаблицы.ПервыйСимвол;

			Если ПервыйСимвол = "@" Тогда //Это символ, обозначающий тег.
				Тег = СокрЛП(Сред(Стр,2));
				Если СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда //если явно указали одну фичу, то теги не должны мешать загрузке
					Если МассивТеговВсеДляПоиска.Найти(НРег(Тег)) <> Неопределено Тогда //значит эту фичу надо оставить
						НашлиТегИзФичиВСпискеТеговФильтр = Истина;
					КонецЕсли;
				КонецЕсли;

				Продолжить;
			КонецЕсли;

		КонецЦикла;

		Если СписокТеговОтбор.Количество() > 0 И Не НашлиТегИзФичиВСпискеТеговФильтр Тогда
			Сообщить("Не стал загружать фичу: " + ИмяФайла + ", т.к. в ней не найдено тегов фильтров.");
			СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
			Возврат Истина;
		КонецЕсли;

		//ищем теги фильтр - окончание
	КонецЕсли;

	//проверим всю фичу на то, что её надо исключить по тегу исключение
	//если нет отборов, иначе надо смотреть на каждый сценарий отдельно
	//если явно указали одну фичу, то теги не должны мешать загрузке
	Если СписокТеговОтбор.Количество() = 0 И СтруктураПараметров.ИдетЗагрузкаИзКаталога Тогда
		Для Каждого СвойстваТега Из МассивТеговФичи Цикл
			Тег = СвойстваТега.Тег;
			Зн = СписокТеговИсключение.НайтиПоЗначению(НРег(Тег));
			Если Зн <> Неопределено Тогда //значит эту фичу надо проигнорировать
				Сообщить("Не стал загружать фичу: " + ИмяФайла + ", т.к. обнаружен тег исключение: " + Тег);
				СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НачалсяСценарий           = Ложь;
	НомСтр                    = 0;
	НомерСтрокиНачалоСценария = 0;
	ИмяОбласти                = "";

	СимволМногострочныйТекст = """"""""; //"""

	СчетчикСтрокФичи = 0;
	Пока СчетчикСтрокФичи < КолСтрокТаблицаТекстФичи Цикл
		СчетчикСтрокФичи = СчетчикСтрокФичи + 1;
		СтрокаТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
		СтрИсходная = СтрокаТаблицаТекстФичи.Стр;

		НомСтр = СтрокаТаблицаТекстФичи.НомСтр;

		Стр = СтрокаТаблицаТекстФичи.СтрокаБезПробелов;
		ПервыйСимвол = СтрокаТаблицаТекстФичи.ПервыйСимвол;
		СтрокаБезПробеловНРег = СтрокаТаблицаТекстФичи.СтрокаБезПробеловНРег;

		Если Стр = "" Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				ОписаниеФичи = ОписаниеФичи + Стр + Символы.ПС;//TODO ускорить конкатенацию строк
			ИначеЕсли ПредыдущееКлючевоеСлово = "scenario" ИЛИ ПредыдущееКлючевоеСлово = "scenario_outline" Тогда
				РасшифровкаСценария = РасшифровкаСценария + Стр + Символы.ПС;//TODO ускорить конкатенацию строк
			КонецЕсли;
			ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;
			Продолжить;
		КонецЕсли;

		Если ПервыйСимвол = "#" Тогда //Это комментарий. Его игнорируем.
			// В описании фичи можем использовать markdown а там символ # может быть.
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				ОписаниеФичи = ОписаниеФичи + Стр + Символы.ПС;//TODO ускорить конкатенацию строк
			КонецЕсли;

			Продолжить;

		ИначеЕсли ПервыйСимвол = "@" Тогда //Это символ, обозначающий тег.
			Тег = СокрЛП(Сред(Стр, 2));

			Продолжить;

		ИначеЕсли ПервыйСимвол = "|" Тогда
			Если (Не ИдетЧтениеПримеров) И (Не ИдетПередачаПараметровТаблицей) Тогда //значит ошибка в синтаксисе
				ОписаниеОшибки = "Строка №" + НомСтр + ", обнаружен символ ""|"", хотя не было ключевого слова ""Примеры"".";
				СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Истина);
				Возврат Ложь;
			КонецЕсли;

			СтрТаблицаСтрокиСРазделителями = Новый Структура;
			СтрТаблицаСтрокиСРазделителями.Вставить("Стр", Стр);
			СтрТаблицаСтрокиСРазделителями.Вставить("НомерСтрокиВФиче", НомСтр);
			Если ИдетЧтениеПримеров Тогда
				ТаблицаСтрокПримеров.Добавить(СтрТаблицаСтрокиСРазделителями);
			КонецЕсли;

			Если ИдетПередачаПараметровТаблицей Тогда
				Если ТаблицаСтрокПередачаПараметровТаблицей = Неопределено Тогда
					 ТаблицаСтрокПередачаПараметровТаблицей = СоздатьТаблицуСтрокПримеров();
					 МассивТаблицПередаваемыхКакПараметр.Добавить(ТаблицаСтрокПередачаПараметровТаблицей);
				КонецЕсли;
				ТаблицаСтрокПередачаПараметровТаблицей.Добавить(СтрТаблицаСтрокиСРазделителями);
			КонецЕсли;

			Если НадоСтроитьДерево И НачалсяСценарий Тогда
				СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
				Если СтрТаблицаТекстФичи.ЗначениеОтступа > СтрТаблицаТекстФичи.СледующийОступ Тогда
					//значит группа закрывается
					СруктураОбласти = Новый Структура;
					СруктураОбласти.Вставить("ИмяОбласти", "");
					СруктураОбласти.Вставить("НачалоОбласти", Ложь);
					СруктураОбласти.Вставить("РазмерОтступа",
						СтрТаблицаТекстФичи.ЗначениеОтступа - СтрТаблицаТекстФичи.СледующийОступ);
					ДобавитьШаг(ТаблицаШагов, СтрокаТаблицаТекстФичи, "", "", "", НомСтр, Неопределено,
						СруктураОбласти);

					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Продолжить;

		КонецЕсли;

		Если Стр = СимволМногострочныйТекст Тогда
			Если ТаблицаШагов.Количество() = 0 Тогда
				ОписаниеОшибки = "Строка №" + НомСтр + ", обнаружен символ " + СимволМногострочныйТекст
					+ ", хотя не было строки с шагом.";
				СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Истина);
				Возврат Ложь;
			КонецЕсли;
			УспешноПрочитали = ПолучитьМногострочныйТекст(СчетчикСтрокФичи, ТаблицаТекстФичи, КолСтрокТаблицаТекстФичи,
				ТаблицаШагов);
			Если Не УспешноПрочитали Тогда
				ОписаниеОшибки = "Строка №" + НомСтр + ", не обнаружен завершение многострочного текста.";
				СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Истина);
				Возврат Ложь;
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		ИдетПередачаПараметровТаблицей         = Ложь;
		ТаблицаСтрокПередачаПараметровТаблицей = Неопределено;

		ВтораяЧастьСтрокиПозиция = 1;
		МассивСлов = РазложитьСтрокуВМассивПодстрок(Стр, " ");
		ТекущееКлючевоеСлово = ПолучитьКлючевоеСлово(СтрокаБезПробеловНРег, ВтораяЧастьСтрокиПозиция, МассивСлов[0]);

		ВтораяЧастьСтроки = СокрЛП(Сред(Стр, ВтораяЧастьСтрокиПозиция));
		Символ = Лев(ВтораяЧастьСтроки, 1);
		Если (Символ = " ") Или (Символ = ":") Или (Символ = ",") Тогда
			ВтораяЧастьСтроки = Сред(ВтораяЧастьСтроки, 2);
		КонецЕсли;

		Если ТекущееКлючевоеСлово = "feature" Тогда
			ОписаниеФичи = "";
			ДопДанныеФичи =  Новый Структура("name,tags", ВтораяЧастьСтроки, МассивТеговФичи);
			СтруктураПараметров.Вставить("ДопДанныеФичи", ДопДанныеФичи);

		ИначеЕсли (ТекущееКлючевоеСлово = "scenario") Или (ТекущееКлючевоеСлово = "scenario_outline") Тогда
			РасшифровкаСценария = "";
			НачалсяСценарий = Истина;
			Если (ДеревоСтроки <> Неопределено) Тогда
				ЗакрытьПредыдущийСценарий(ИмяФичи, ИмяФайла, ТекущийТипСценария, ПредыдущееКлючевоеСлово,
					ТекущееКлючевоеСлово, ДеревоСтроки, ОписаниеСценария, ТаблицаШагов,
					ТаблицаИзвестныхШагов, ТаблицаСтрокПримеров, НомерСтрокиНачалоСценария,
					ТаблицаУжеСуществующихСценариев, СтруктураПараметров, МассивСценариевЗащитаОтЗацикливанияКеш,
					ЭтоЗагрузкаПодчиненногоСценария, ПередаваемыеТаблицы, ИмяЗагружаемогоСценария);
			КонецЕсли;

			ТаблицаШагов.Очистить();
			ТаблицаСтрокПримеров.Очистить();

			НомерСтрокиНачалоСценария = НомСтр;
			ОписаниеСценария = СокрЛП(ВтораяЧастьСтроки);

		ИначеЕсли ТекущееКлючевоеСлово = "background" Тогда
			НомерСтрокиНачалоСценария = НомСтр;
			НачалсяСценарий = Истина;
		ИначеЕсли НадоСтроитьДерево И НачалсяСценарий Тогда
			СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи-1];
			Если СтрТаблицаТекстФичи.ЗначениеОтступа < СтрТаблицаТекстФичи.СледующийОступ
					И (СтрТаблицаТекстФичи.НельзяСоздаватьОбласть <> Истина)
					И ПроверитьЧтоМожноСоздатьОбласть(ТаблицаТекстФичи, СчетчикСтрокФичи) Тогда
				//значит группа открывается
				ИмяОбласти      = Стр;
				СруктураОбласти = Новый Структура;
				СруктураОбласти.Вставить("ИмяОбласти",ИмяОбласти);
				СруктураОбласти.Вставить("НачалоОбласти",Истина);
				СруктураОбласти.Вставить("Родитель", ОпределитьКакойСтрокеПодчиненаОбласть(ТаблицаТекстФичи, НомСтр-1,
					СтрТаблицаТекстФичи.ЗначениеОтступа));

				ИдетПередачаПараметровТаблицей = СледующаяСтрокаСодержитВертикальнуюЧерту(
						ТаблицаТекстФичи, СчетчикСтрокФичи);
				МассивТаблицПередаваемыхКакПараметр = Новый Массив;

				ДобавитьШаг(ТаблицаШагов, СтрокаТаблицаТекстФичи, ТекущееКлючевоеСлово, ВтораяЧастьСтроки, "",
					НомСтр, МассивТаблицПередаваемыхКакПараметр,СруктураОбласти);

				Продолжить;
			КонецЕсли;
		Иначе
			СтрокаШага = ВтораяЧастьСтроки;
		КонецЕсли;

		Если ТекущееКлючевоеСлово = "" Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				//значит тут идёт описание фичи. //TODO ускорить конкатенацию строк
				ОписаниеФичи = ОписаниеФичи + ?(СтрДлина(ОписаниеФичи) > 0, Символы.ПС, "") + Стр;
				СтруктураПараметров["ДопДанныеФичи"].Вставить("description", ОписаниеФичи);
			ИначеЕсли ПредыдущееКлючевоеСлово = "scenario" ИЛИ ПредыдущееКлючевоеСлово = "scenario_outline" Тогда
				//TODO ускорить конкатенацию строк
				РасшифровкаСценария = РасшифровкаСценария + ?(СтрДлина(РасшифровкаСценария) > 0, Символы.ПС, "") + Стр;
			КонецЕсли;
			Продолжить;
		КонецЕсли;

		Если Не ТекущееКлючевоеСловоСоответствуетОжидаемому(ТекущееКлючевоеСлово, ОжидаемоеКлючевоеСлово) Тогда
			Если ПредыдущееКлючевоеСлово = "feature" Тогда
				//значит тут идёт описание фичи
				Продолжить;
			КонецЕсли;

			СтрОшибки = ТекущееКлючевоеСлово;
			Если ТекущееКлючевоеСлово = "" Тогда
				СтрОшибки = Стр;
			КонецЕсли;
			ОписаниеОшибки = "Строка №" + НомСтр + ", ожидалось (" + ОжидаемоеКлючевоеСлово + "), а найдено ("
				+ СтрОшибки + ") ПредыдущееКлючевоеСлово="+ПредыдущееКлючевоеСлово;
			//тут не надо ставить признак удаления фичи из дерева, чтобы можно было увидеть в дереве проблему
			//СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Истина);
			Возврат Ложь;
		КонецЕсли;

		Если (ТекущееКлючевоеСлово = "and") Или (ТекущееКлючевоеСлово = "when") Или (ТекущееКлючевоеСлово = "then")
				Или (ТекущееКлючевоеСлово = "given") Или (ТекущееКлючевоеСлово = "but")
				Или (ТекущееКлючевоеСлово = "if") Или (ТекущееКлючевоеСлово = "elseif")
				Или (ТекущееКлючевоеСлово = "else") Тогда
			ИмяШага = Стр;
			МассивТаблицПередаваемыхКакПараметр = Новый Массив;
			ДобавитьШаг(ТаблицаШагов, СтрокаТаблицаТекстФичи, ТекущееКлючевоеСлово, ВтораяЧастьСтроки, ИмяШага,
				НомСтр, МассивТаблицПередаваемыхКакПараметр);

			ИдетПередачаПараметровТаблицей = СледующаяСтрокаСодержитВертикальнуюЧерту(ТаблицаТекстФичи,
				СчетчикСтрокФичи);
		КонецЕсли;

		ПредыдущееКлючевоеСлово = ТекущееКлючевоеСлово;
		ОжидаемоеКлючевоеСлово  = ПолучитьСледующееОжидаемоеКлючевоеСлово(ТекущееКлючевоеСлово, ТекущийТипСценария,
			ИдетЧтениеПримеров);

		Если НадоСтроитьДерево И НачалсяСценарий
			И (ТекущееКлючевоеСлово <> "scenario") И (ТекущееКлючевоеСлово <> "scenario_outline") Тогда

			СтрТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикСтрокФичи - 1];
			Если СтрТаблицаТекстФичи.ЗначениеОтступа > СтрТаблицаТекстФичи.СледующийОступ Тогда
				//значит группа закрывается
				СруктураОбласти = Новый Структура;
				СруктураОбласти.Вставить("ИмяОбласти","");
				СруктураОбласти.Вставить("НачалоОбласти",Ложь);
				СруктураОбласти.Вставить("РазмерОтступа",
					СтрТаблицаТекстФичи.ЗначениеОтступа - СтрТаблицаТекстФичи.СледующийОступ);
				ДобавитьШаг(ТаблицаШагов, СтрокаТаблицаТекстФичи, "", "", "", "", Неопределено, СруктураОбласти);

				Продолжить;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Если ТаблицаШагов.Количество() > 0 Тогда
		ЗакрытьПредыдущийСценарий(ИмяФичи, ИмяФайла, ТекущийТипСценария, ПредыдущееКлючевоеСлово, "scenario",
			ДеревоСтроки, ОписаниеСценария, ТаблицаШагов, ТаблицаИзвестныхШагов, ТаблицаСтрокПримеров,
			НомерСтрокиНачалоСценария, ТаблицаУжеСуществующихСценариев, СтруктураПараметров,
			МассивСценариевЗащитаОтЗацикливанияКеш, ЭтоЗагрузкаПодчиненногоСценария, ПередаваемыеТаблицы,
			ИмяЗагружаемогоСценария);
	КонецЕсли;

	Если СтруктураПараметров.КоличествоЗагруженныхСценариев = 0 Тогда
		СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева", Истина);
	КонецЕсли;

	Возврат Истина;

КонецФункции

// Возвращает Истину, если прочитали многострочную строку, или Ложь, если дошли до конца текста фичи
Функция ПолучитьМногострочныйТекст(СчетчикСтрокФичи, ТаблицаТекстФичи, КолСтрокТаблицаТекстФичи, ТаблицаШагов)
	СимволМногострочныйТекст = """"""""; //"""

	МногострочнаяСтрокаЗакончилась = Ложь;
	СобираемПервыйРаз = Истина;
	СобираемаяСтрока = "";
	Для СчетчикМногострочногоТекста = СчетчикСтрокФичи + 1 По КолСтрокТаблицаТекстФичи  Цикл

		СтрокаТаблицаТекстФичи = ТаблицаТекстФичи[СчетчикМногострочногоТекста - 1];
		ОчереднаяСтрокаИзМногострочной = СтрокаТаблицаТекстФичи.СтрокаБезПробелов;

		МногострочнаяСтрокаЗакончилась = ОчереднаяСтрокаИзМногострочной = СимволМногострочныйТекст;
		Если МногострочнаяСтрокаЗакончилась Тогда
			Прервать;
		КонецЕсли;

		//TODO сделать расчет отступов для нормализации строки, для которой важны передние пробелы
		Если СобираемПервыйРаз Тогда
			СобираемаяСтрока = ОчереднаяСтрокаИзМногострочной;
			СобираемПервыйРаз = Ложь;
		Иначе
			//TODO заменить конкатенацию строки для скорости
			СобираемаяСтрока = СобираемаяСтрока + Символы.ПС + ОчереднаяСтрокаИзМногострочной;
		КонецЕсли;
	КонецЦикла;

	Если МногострочнаяСтрокаЗакончилась Тогда
		СчетчикСтрокФичи = СчетчикМногострочногоТекста;

		СтрокаПредыдущегоШага = ТаблицаШагов[ТаблицаШагов.Количество() - 1];
		//TODO заменить все конкатенации строки для скорости
		ДобавляемаяСтрока = Символы.ПС + СобираемаяСтрока;
		СтрокаПредыдущегоШага.ИмяШага = СтрокаПредыдущегоШага.ИмяШага + ДобавляемаяСтрока;
		СтрокаПредыдущегоШага.ИмяШагаБезКлючевогоСлова = СтрокаПредыдущегоШага.ИмяШагаБезКлючевогоСлова
			+ ДобавляемаяСтрока;

		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Функция БылиПовторыИменСнипетов(ТаблицаУжеСуществующихСценариев, ТаблицаИзвестныхШагов)
	КопияТаблицаУжеСуществующихСценариев = ТаблицаУжеСуществующихСценариев.Скопировать();
	КопияТаблицаУжеСуществующихСценариев.Колонки.Добавить("СтрокаДляПоиска");

	Для Каждого СтрКопияТаблицаУжеСуществующихСценариев Из КопияТаблицаУжеСуществующихСценариев Цикл
		СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска = НРег(СтрКопияТаблицаУжеСуществующихСценариев.ИмяСценария);
	КонецЦикла;

	Для каждого СтрТаблицаИзвестныхStepDefinition Из ТаблицаИзвестныхШагов Цикл
		СтрКопияТаблицаУжеСуществующихСценариев                 = КопияТаблицаУжеСуществующихСценариев.Добавить();
		СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска = СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска;
		СтрКопияТаблицаУжеСуществующихСценариев.ИмяФайла        = СтрТаблицаИзвестныхStepDefinition.ИмяФайла;

	КонецЦикла;

	БылоСтрок = КопияТаблицаУжеСуществующихСценариев.Количество();
	КопияТаблицаУжеСуществующихСценариев.Колонки.Добавить("Кол");
	КопияТаблицаУжеСуществующихСценариев.ЗаполнитьЗначения(1, "Кол");

	ТаблицаУжеСуществующихСценариевСлужебная = КопияТаблицаУжеСуществующихСценариев.Скопировать();
	КопияТаблицаУжеСуществующихСценариев.Свернуть("СтрокаДляПоиска","Кол");

	СталоСтрок = КопияТаблицаУжеСуществующихСценариев.Количество();

	Если БылоСтрок <> СталоСтрок Тогда
		Отбор = Новый Структура;
		Для каждого СтрКопияТаблицаУжеСуществующихСценариев Из КопияТаблицаУжеСуществующихСценариев Цикл
			Если СтрКопияТаблицаУжеСуществующихСценариев.Кол <> 1 Тогда
				Сообщить("Снипет """ + СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска + """ встречается "
					+ СтрКопияТаблицаУжеСуществующихСценариев.Кол + " раз!");

				Если СокрЛП(СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска) <> "" Тогда
					Отбор.Вставить("СтрокаДляПоиска", НРег(СтрКопияТаблицаУжеСуществующихСценариев.СтрокаДляПоиска));
					МассивСтрокСценариев = ТаблицаУжеСуществующихСценариевСлужебная.НайтиСтроки(Отбор);
					Для каждого СтрокаСценария Из МассивСтрокСценариев Цикл
						Сообщить("" + СтрокаСценария.ИмяФайла);
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
КонецФункции

Процедура ОбходКаталогов(ПутьКаталога, РодительВДереве, ТаблицаИзвестныхШагов, СтруктураПараметров)
	ФайлПутьКаталога = Новый Файл(ПутьКаталога);
	Если ФайлПутьКаталога.ЭтоКаталог() Тогда
		НайденныеФайлы = НайтиФайлы(ПутьКаталога,"*");
	Иначе
		НайденныеФайлы = Новый Массив;//вернём одну фичу
		НайденныеФайлы.Добавить(ФайлПутьКаталога);
	КонецЕсли;
	Для каждого ф из НайденныеФайлы цикл
		Если ф.ЭтоКаталог() тогда
			НовСтр = РодительВДереве.Строки.Добавить();
			НовСтр.Тип        = "Каталог";
			НовСтр.ПолныйПуть = ф.ПолноеИмя;
			НовСтр.Имя        = ф.Имя;
			ОбходКаталогов(ПутьКаталога+"/"+ф.Имя, НовСтр, ТаблицаИзвестныхШагов, СтруктураПараметров);

			Если НовСтр.Строки.Количество() = 0 Тогда
				РодительВДереве.Строки.Удалить(НовСтр);
			КонецЕсли;
		ИначеЕсли НРег(ф.Расширение) = ".feature" Тогда
			НовСтр            = РодительВДереве.Строки.Добавить();
			НовСтр.Тип        = "Фича";

			НовСтр.ПолныйПуть = ф.ПолноеИмя;
			НовСтр.Имя        = ф.ИмяБезРасширения;

			СтруктураПараметров.Вставить("УдалитьСтрокуФичиИзДерева",Ложь);

			ЗагрузитьФичу(ф.ПолноеИмя, НовСтр.Строки, ТаблицаИзвестныхШагов, СтруктураПараметров);
			Если СтруктураПараметров.Свойство("ДопДанныеФичи") Тогда
				ДопДанныеФичи = СтруктураПараметров["ДопДанныеФичи"];
				НовСтр.ДополнительныеПараметры = ДопДанныеФичи;
			КонецЕсли;

			Если СтруктураПараметров.УдалитьСтрокуФичиИзДерева Тогда
				РодительВДереве.Строки.Удалить(НовСтр);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДерево(ДеревоЗначений, Каталог, ТаблицаИзвестныхШагов, СтруктураПараметров)
	Файл = Новый Файл(Каталог);

	НовСтр            = ДеревоЗначений.Строки.Добавить();
	НовСтр.Тип        = "Каталог";
	НовСтр.Имя        = Файл.Имя;
	НовСтр.ПолныйПуть = Каталог;
	ОбходКаталогов(Каталог, НовСтр, ТаблицаИзвестныхШагов, СтруктураПараметров);
КонецПроцедуры

Функция СоздатьДеревоЗначений()
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Имя");
	ДеревоЗначений.Колонки.Добавить("ПолныйПуть");
	ДеревоЗначений.Колонки.Добавить("ИменованныеПараметры");
	ДеревоЗначений.Колонки.Добавить("ЗначенияПараметров");
	ДеревоЗначений.Колонки.Добавить("Снипет");
	ДеревоЗначений.Колонки.Добавить("АдресСнипета");
	ДеревоЗначений.Колонки.Добавить("ЭтоЧужойСнипет",Новый ОписаниеТипов("Булево"));
	ДеревоЗначений.Колонки.Добавить("СтрокаРеальнойПроцедуры");
	ДеревоЗначений.Колонки.Добавить("ТипКартинки");
	ДеревоЗначений.Колонки.Добавить("ШагСПараметрамиВТаблице");
	ДеревоЗначений.Колонки.Добавить("СтрокаПараметровШагаВВидеТаблицы");
	ДеревоЗначений.Колонки.Добавить("ПараметрыТаблицы");
	ДеревоЗначений.Колонки.Добавить("ИмяШагаБезКлючевогоСлова");
	ДеревоЗначений.Колонки.Добавить("МассивСценариевЗащитаОтЗацикливания");
	ДеревоЗначений.Колонки.Добавить("МассивТегов");
	ДеревоЗначений.Колонки.Добавить("НомерСтрокиВФиче");
	ДеревоЗначений.Колонки.Добавить("ЗначениеОтступа",Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("Тип",Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ДопТип",Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ДополнительныеПараметры");

	Возврат ДеревоЗначений;
КонецФункции

Процедура ДобавитьКлючевоеСловоВТаблицу(Тзн,Слово,Тип,Уникально = Истина)

	СтрокаТаблицы           = Тзн.Добавить();
	СтрокаТаблицы.Слово     = НРег(Слово);
	СтрокаТаблицы.Тип       = Тип;
	СтрокаТаблицы.Уникально = Уникально;

КонецПроцедуры

Функция ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля)
	Если ТелоМодуля.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Возврат ТелоМодуля[ТелоМодуля.Количество()-1].НомСтр;
КонецФункции

Процедура ДобавитьСтрокуВМодуль(ТелоМодуля, ШагСтрокДляМодуля, Стр, НомерСрокиМодуля = Неопределено)
	НомСтр = ПолучитьМаксНомерИзТелаМодуля(ТелоМодуля);

	СтрТелоМодуля = ТелоМодуля.Добавить();
	Если НомерСрокиМодуля = Неопределено Тогда
		СтрТелоМодуля.НомСтр = НомСтр + ШагСтрокДляМодуля;
	Иначе
		СтрТелоМодуля.НомСтр = НомерСрокиМодуля;
	КонецЕсли;
	СтрТелоМодуля.Стр    = Стр;

КонецПроцедуры

// TODO Дубль кода в методах "УбратьСпецсимволыИзИмениОбработки" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
Функция УбратьСпецсимволыИзИмениОбработки(Знач Стр)
	Стр = СтрЗаменить(Стр," ","_");
	Стр = СтрЗаменить(Стр,"`","");
	Стр = СтрЗаменить(Стр,"~","");
	Стр = СтрЗаменить(Стр,"'","");
	Стр = СтрЗаменить(Стр,".","");
	Стр = СтрЗаменить(Стр,",","");
	Стр = СтрЗаменить(Стр,":","");
	Стр = СтрЗаменить(Стр,";","");
	Стр = СтрЗаменить(Стр,"-","_");
	Стр = СтрЗаменить(Стр,"+","");
	Стр = СтрЗаменить(Стр,"/","");
	Стр = СтрЗаменить(Стр,"\","");
	Стр = СтрЗаменить(Стр,"=","");
	Стр = СтрЗаменить(Стр,"!","");
	Стр = СтрЗаменить(Стр,"@","");
	Стр = СтрЗаменить(Стр,"#","");
	Стр = СтрЗаменить(Стр,"$","");
	Стр = СтрЗаменить(Стр,"%","");
	Стр = СтрЗаменить(Стр,"^","");
	Стр = СтрЗаменить(Стр,"&","");
	Стр = СтрЗаменить(Стр,"*","");
	Стр = СтрЗаменить(Стр,"(","");
	Стр = СтрЗаменить(Стр,")","");
	Стр = СтрЗаменить(Стр,"№","");
	Стр = СтрЗаменить(Стр,"?","");
	Стр = СтрЗаменить(Стр,"<","");
	Стр = СтрЗаменить(Стр,">","");

	ЛевСимвол = Лев(Стр, 1);
	Если ЛевСимвол = "0"
	 Или ЛевСимвол = "1"
	 Или ЛевСимвол = "2"
	 Или ЛевСимвол = "3"
	 Или ЛевСимвол = "4"
	 Или ЛевСимвол = "5"
	 Или ЛевСимвол = "6"
	 Или ЛевСимвол = "7"
	 Или ЛевСимвол = "8"
	 Или ЛевСимвол = "9"
	Тогда
		Стр = "_" + Стр;
	КонецЕсли;

	Возврат Стр;
КонецФункции

Процедура ДобавитьСнипет(Знач ID, Знач СтрокаРеальнойПроцедуры, Знач ИмяФайла, БылиОшибки, ТаблицаИзвестныхШагов,
		Снипет)

	СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	ID                      = СокрЛП(ID);

	//уберем слово "Экспорт"
	ДлинаЭкспорт = 7;
	Если НРег(Прав(СтрокаРеальнойПроцедуры, ДлинаЭкспорт)) = "экспорт" Тогда
		СтрокаРеальнойПроцедуры = Лев(СтрокаРеальнойПроцедуры,СтрДлина(СтрокаРеальнойПроцедуры) - ДлинаЭкспорт);
		СтрокаРеальнойПроцедуры = СокрЛП(СтрокаРеальнойПроцедуры);
	КонецЕсли;

	ДлинаПроцедура = 9;
	Если НРег(Лев(СтрокаРеальнойПроцедуры, ДлинаПроцедура)) = "процедура" Тогда
		СтрокаРеальнойПроцедуры = СокрЛП(Сред(СтрокаРеальнойПроцедуры, ДлинаПроцедура + 1));
	КонецЕсли;

	Поз = Найти(ID, "(");
	СтрПараметры = Сред(ID, Поз + 1);
	СтрПараметры = Лев(СтрПараметры, СтрДлина(СтрПараметры) - 1);

	МассивПром = РазложитьСтрокуВМассивПодстрок(СтрПараметры, ",");
	МассивПараметров = Новый Массив;
	Для Каждого Элем Из МассивПром Цикл
		СтруктураПарам = Новый Структура;
		Тип = "Строка";
		Если Найти(НРег(Элем), "число") > 0 Тогда
			Тип = "Число";
		КонецЕсли;
		Если Найти(НРег(Элем), "дата") > 0 Тогда
			Тип = "Дата";
		КонецЕсли;
		СтруктураПарам.Вставить("Тип", Тип);
		МассивПараметров.Добавить(СтруктураПарам);

	КонецЦикла;

	ПромСтр = ТаблицаИзвестныхШагов.Найти(ID, "ID");
	Если ПромСтр <> Неопределено Тогда
		Если НРег(ПромСтр.ИмяФайла) = НРег(ИмяФайла) Тогда //значит этот снипет из того же файла
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ПромСтр <> Неопределено Тогда
		БылиОшибки = Истина;
		СделатьСообщение("Ошибка в файле " + ИмяФайла + ", снипет " + ID + " уже был в " + ПромСтр.ИмяФайла);
		Возврат;
	КонецЕсли;

	ТипШагаВДереве = Неопределено;
	Если Снипет.Свойство("ТипШагаВДереве") Тогда
		ТипШагаВДереве = Снипет.ТипШагаВДереве;
	КонецЕсли;

	СтрТаблицаИзвестныхStepDefinition                         = ТаблицаИзвестныхШагов.Добавить();
	СтрТаблицаИзвестныхStepDefinition.ID                      = ID;
	СтрТаблицаИзвестныхStepDefinition.СтрокаРеальнойПроцедуры = СтрокаРеальнойПроцедуры;
	СтрТаблицаИзвестныхStepDefinition.ИмяФайла                = ИмяФайла;
	СтрТаблицаИзвестныхStepDefinition.Параметры               = МассивПараметров;
	СтрТаблицаИзвестныхStepDefinition.СтрокаДляПоиска         = НРег(Лев(ID, Поз - 1));
	СтрТаблицаИзвестныхStepDefinition.ТипШагаВДереве          = ТипШагаВДереве;
КонецПроцедуры

Процедура УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition,ДелатьОберткуПараметров = Ложь,ДопПараметры = Неопределено)
	StepDefinition = СтрЗаменить(StepDefinition,".","");
	StepDefinition = СтрЗаменить(StepDefinition,",","");
	StepDefinition = СтрЗаменить(StepDefinition,":","");
	StepDefinition = СтрЗаменить(StepDefinition,";","");
	StepDefinition = СтрЗаменить(StepDefinition,"+","");
	StepDefinition = СтрЗаменить(StepDefinition,"/","");
	StepDefinition = СтрЗаменить(StepDefinition,"\","");
	StepDefinition = СтрЗаменить(StepDefinition,"=","");
	StepDefinition = СтрЗаменить(StepDefinition,"!","");
	StepDefinition = СтрЗаменить(StepDefinition,"@","");
	StepDefinition = СтрЗаменить(StepDefinition,"#","");
	StepDefinition = СтрЗаменить(StepDefinition,"$","");
	StepDefinition = СтрЗаменить(StepDefinition,"%","");
	StepDefinition = СтрЗаменить(StepDefinition,"^","");
	StepDefinition = СтрЗаменить(StepDefinition,"&","");
	StepDefinition = СтрЗаменить(StepDefinition,"(","");
	StepDefinition = СтрЗаменить(StepDefinition,")","");
	StepDefinition = СтрЗаменить(StepDefinition,"№","");
	StepDefinition = СтрЗаменить(StepDefinition,"?","");
	StepDefinition = СтрЗаменить(StepDefinition,"`","");
	StepDefinition = СтрЗаменить(StepDefinition,"'","");
	StepDefinition = СтрЗаменить(StepDefinition,"~","");
	StepDefinition = СтрЗаменить(StepDefinition,Символы.НПП," ");
	StepDefinition = СтрЗаменить(StepDefinition,"<","");
	StepDefinition = СтрЗаменить(StepDefinition,">","");

	StepDefinition = СтрЗаменить(StepDefinition,"-","_");

	Если Не ДелатьОберткуПараметров Тогда
		StepDefinition = СтрЗаменить(StepDefinition,"*","");
	КонецЕсли;
КонецПроцедуры

Функция ДобавитьНолейВСтроку(Знач Стр,Длина)
	Пока СтрДлина(Стр) < Длина Цикл
		Стр = "0" + Стр;
	КонецЦикла;

	Возврат Стр;
КонецФункции

Функция ДобавитьПараметрStepDefinition(Знач Стр, КолПараметров)

	НашлиПараметр = Ложь;
	Для каждого Параметр Из МассивПараметровХХХ() Цикл
		Если Найти(Стр, Параметр) > 0 Тогда
			НашлиПараметр = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НашлиПараметр Тогда
		Если КолПараметров >= 100 Тогда
			КолПараметровСтр = "" + КолПараметров;
		Иначе
			КолПараметровСтр = Формат(КолПараметров, "ЧЦ=2; ЧВН=");
		КонецЕсли;

		Стр = СтрЗаменить(Стр, "||Параметр", "||Парам" + КолПараметровСтр) + ",";
	Иначе
		Стр = Стр + ",";
	КонецЕсли;
	Стр = СтрЗаменить(Стр, "|", "");
	Стр = СтрЗаменить(Стр, ">", "");
	Стр = СтрЗаменить(Стр, "<", "");

	Возврат Стр;
КонецФункции

Функция МассивПараметровХХХ()
	Если Не ЗначениеЗаполнено(МассивПараметровХХХ) Тогда
		МассивПараметровХХХ = Новый Массив;

		МассивПараметровХХХ.Добавить("||ПараметрСтрокаК||");
		МассивПараметровХХХ.Добавить("||ПараметрСтрокаА||");
		МассивПараметровХХХ.Добавить("||ПараметрЧисло||");
		МассивПараметровХХХ.Добавить("||ПараметрСтрокаМ||");
		МассивПараметровХХХ.Добавить("||ПараметрДата||");
		МассивПараметровХХХ = Новый ФиксированныйМассив(МассивПараметровХХХ);
	КонецЕсли;
	Возврат МассивПараметровХХХ;
КонецФункции

Функция СделатьПервуюБуквуЗаглавной(Стр)
	Если СтрДлина(Стр) = 0 Тогда
		Возврат Стр;
	КонецЕсли;

	ПерваяБуква = Лев(Стр, 1);
	ПерваяБукваВРег = ВРег(ПерваяБуква);

	Возврат ?(ПерваяБуква = ПерваяБукваВРег, Стр, ПерваяБукваВРег + Сред(Стр, 2));
КонецФункции

Процедура ОбработатьСтрокиЭмуляцияRegExp(Стр, ПараметрыСтроки, Символ, ДелатьОберткуПараметров = Ложь)
	Если Найти(Стр, Символ) = 0 Тогда //для ускорения
		Возврат;
	КонецЕсли;

	ПромСтр     = Стр;

	ПромСтр     = СтрЗаменить(ПромСтр, "\\", ПредставлениеДвойнойСлеш);

	ПромСтр     = СтрЗаменить(ПромСтр, "\'", ПредставлениеАпостроф);
	ПромСтр     = СтрЗаменить(ПромСтр, "\""", ПредставлениеКавычка);

	ПромСтр     = СтрЗаменить(ПромСтр, ПредставлениеДвойнойСлеш, "\");

	Поз         = Найти(ПромСтр, Символ);

	Если Поз = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивСборкиСтроки = Новый Массив;
	Пока Поз > 0 Цикл
		МассивСборкиСтроки.Добавить(Лев(ПромСтр, Поз-1));
		ПромСтр     = Сред(ПромСтр, Поз+1);

		Поз = Найти(ПромСтр, Символ);
		Если Поз > 0 Тогда
			ЗначениеПараметра = Лев(ПромСтр, Поз-1);
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, ПредставлениеАпостроф, "'");
			ЗначениеПараметра = СтрЗаменить(ЗначениеПараметра, ПредставлениеКавычка, """");
			ПараметрыСтроки.Добавить(ЗначениеПараметра);

			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыСтроки.Количество());
			КонецЕсли;

			ПромСтр = Сред(ПромСтр, Поз+1);

			Если Символ = "'" Тогда
				МассивСборкиСтроки.Добавить(" ||ПараметрСтрокаА");
			Иначе
				МассивСборкиСтроки.Добавить(" ||ПараметрСтрокаК");
			КонецЕсли;
			МассивСборкиСтроки.Добавить(СтрКолПараметров + "|| ");

		Иначе
			МассивСборкиСтроки.Добавить(ПромСтр);
		КонецЕсли;

		Поз = Найти(ПромСтр, Символ);
		Если Поз = 0 Тогда
			МассивСборкиСтроки.Добавить(ПромСтр);
		КонецЕсли;
	КонецЦикла;

	Стр = СтрСоединить_(МассивСборкиСтроки, "");
КонецПроцедуры

Процедура ОбработатьМногострочнуюСтрокуЭмуляцияRegExp(Стр, ПараметрыСтроки, ДелатьОберткуПараметров = Ложь)

	КоличествоСтрок = СтрЧислоСтрок(Стр);
	Если КоличествоСтрок = 1 Тогда
		Возврат;
	КонецЕсли;

	НомерСтрокиСКоторойНачинаетсяМногострочныйТекст = 2;
	СобираемаяСтрока = СтрПолучитьСтроку(Стр, НомерСтрокиСКоторойНачинаетсяМногострочныйТекст);
	Для Счетчик = НомерСтрокиСКоторойНачинаетсяМногострочныйТекст + 1 По КоличествоСтрок Цикл
		//TODO ускорить конкатенацию строк
		СобираемаяСтрока = СобираемаяСтрока + Символы.ПС + СтрПолучитьСтроку(Стр, Счетчик);
	КонецЦикла;
	ПараметрыСтроки.Добавить(СобираемаяСтрока);

	СтрКолПараметров = "";
	Если ДелатьОберткуПараметров Тогда
		СтрКолПараметров = XMLСтрока(ПараметрыСтроки.Количество());
	КонецЕсли;

	Стр = СтрПолучитьСтроку(Стр, 1) + " ||ПараметрСтрокаМ" + СтрКолПараметров + "|| ";
КонецПроцедуры

Функция ЭтоЦелоеЧисло(Стр)
	Для Ккк = 1 По СтрДлина(Стр) Цикл
		Символ = Сред(Стр, Ккк, 1);
		Если    Символ = "0"
			Или Символ = "1"
			Или Символ = "2"
			Или Символ = "3"
			Или Символ = "4"
			Или Символ = "5"
			Или Символ = "6"
			Или Символ = "7"
			Или Символ = "8"
			Или Символ = "9"
			Тогда
			//это цифра
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
КонецФункции

Процедура ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров = Ложь)
	Массив = РазложитьСтрокуВМассивПодстрок(Стр, ".");

	Для Ккк = 0 По Массив.Количество()-1-2 Цикл
		Элем1 = Прав(Массив[Ккк],2);
		Элем2 = Массив[Ккк+1];
		Элем3 = Лев(Массив[Ккк+2],4);
		Если СтрДлина(Элем3) < 4 Тогда
			Элем3 = Лев(Массив[Ккк+2],2);
		КонецЕсли;
		Если СтрДлина(Элем3) = 4 Тогда
			Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
				Элем3 = Лев(Массив[Ккк+2],2);
			КонецЕсли;
		КонецЕсли;

		Если СтрДлина(Элем1) <>  2 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрДлина(Элем2) <>  2 Тогда
			Продолжить;
		КонецЕсли;
		Если (СтрДлина(Элем3) = 2) Или (СтрДлина(Элем3) = 4) Тогда
		Иначе
			Продолжить;
		КонецЕсли;

		Если НЕ ЭтоЦелоеЧисло(Элем1) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭтоЦелоеЧисло(Элем2) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭтоЦелоеЧисло(Элем3) Тогда
			Продолжить;
		КонецЕсли;

		СтрДат = "" + Элем1 + "." + Элем2 + "." +Элем3;

		Поз = Найти(Стр,СтрДат);
		Если Поз > 0 Тогда
			ПараметрыДаты.Добавить(СтрДат);

			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыДаты.Количество());
			КонецЕсли;

			Стр = Лев(Стр,Поз-1) + " ||ПараметрДата" + СтрКолПараметров + "|| " + Сред(Стр,Поз+СтрДлина(СтрДат));

			ОбработатьДатыЭмуляцияRegExp(Стр,ПараметрыДаты,ДелатьОберткуПараметров);
			Прервать;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ЭтоКорректноеЧисло(Стр)
	Если ПустаяСтрока(Стр) Или Стр = "-" Или Стр = "+" Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Стр = "0" Тогда
		Возврат Истина;
	КонецЕсли;
	ПромЗнач = ОписаниеТипаЧисло.ПривестиЗначение(Стр);

	Возврат ПромЗнач <> 0;
КонецФункции

Процедура ОбработатьЧислаЭмуляцияRegExp(Стр, ПараметрыЧисла, ДелатьОберткуПараметров = Ложь)
	МассивСборкиСтроки = Новый Массив;
	НакопленнаяСтрока = "";
	РазделительПробел = " ";

	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, РазделительПробел, Истина);
	Для Каждого НакопленнаяСтрока Из МассивСтрок Цикл
		Если ЭтоКорректноеЧисло(НакопленнаяСтрока) Тогда
			ПараметрыЧисла.Добавить(НакопленнаяСтрока);

			СтрКолПараметров = "";
			Если ДелатьОберткуПараметров Тогда
				СтрКолПараметров = XMLСтрока(ПараметрыЧисла.Количество());
			КонецЕсли;

			МассивСборкиСтроки.Добавить("||ПараметрЧисло" + СтрКолПараметров + "|| ");
		Иначе
			МассивСборкиСтроки.Добавить(НакопленнаяСтрока);
		КонецЕсли;
	КонецЦикла;

	Стр = СтрСоединить_(МассивСборкиСтроки, РазделительПробел);
КонецПроцедуры

Процедура ОбработатьПараметрыИменованные(Стр,ПараметрыИменованные)

	МассивТекПараметров = Новый Массив;

	Пока Истина Цикл
		Поз1 = Найти(Стр,"<");
		Поз2 = Найти(Стр,">");

		Если (Поз1 > 0) И (Поз2 > 0) И ((Поз2-Поз1) > 1) Тогда
			СтрПараметр = (Сред(Стр,Поз1+1,Поз2-Поз1-1));

			ТекПараметр = "|||"+СтрПараметр + "|||";

			СтруктураПараметра = Новый Структура;
			СтруктураПараметра.Вставить("Имя", СтрЗаменить(СтрПараметр, " ", "|||ЗаменаПробела|||"));
			СтруктураПараметра.Вставить("ЗначениеВСтроке", ТекПараметр);

			МассивТекПараметров.Добавить(СтруктураПараметра);

			Стр = СтрЗаменить(Стр, "<" + СтрПараметр + ">", ТекПараметр);
		Иначе
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Ном = 0;
	Для каждого Элем Из МассивТекПараметров Цикл
		Ном = Ном+1;

		Стр = СтрЗаменить(Стр,Элем.ЗначениеВСтроке,"<" + Элем.Имя + ">");

		ПараметрыИменованные.Добавить(Элем.Имя);
	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьСтрокуСОберткойПараметров(Стр, ПараметрыСтрок, ПараметрыДаты, ПараметрыЧисла)
	Для каждого КлючЗначение Из ПараметрыСтрок Цикл
		ИмяПараметра = КлючЗначение.Ключ;
		ОписаниеПараметровСтроки = КлючЗначение.Значение;
		ПараметрыСтроки = ОписаниеПараметровСтроки.ПараметрыСтроки;
		Разделитель = ОписаниеПараметровСтроки.Разделитель;
		Ном = 0;
		Для Каждого ЗначениеПараметра Из ПараметрыСтроки Цикл
			Ном    = Ном + 1;
			СтрНом = XMLСтрока(Ном);
			Символ = Разделитель;
			Стр = СтрЗаменить(Стр, "||" + ИмяПараметра + СтрНом + "||",
				" *||*" + Символ + ЗначениеПараметра + Символ +  "*||* ");
		КонецЦикла;
	КонецЦикла;

	СтруктураПрочихПараметров = Новый Структура;
	СтруктураПрочихПараметров.Вставить("ПараметрДата", ПараметрыДаты);
	СтруктураПрочихПараметров.Вставить("ПараметрЧисло", ПараметрыЧисла);
	Для каждого КлючЗначение Из СтруктураПрочихПараметров Цикл
		ИмяПараметра = КлючЗначение.Ключ;
		ПараметрыПрочие = КлючЗначение.Значение;
		Ном = 0;
		Для Каждого ЗначениеПараметра Из ПараметрыПрочие Цикл
			Ном    = Ном + 1;
			СтрНом = XMLСтрока(Ном);
			Стр = СтрЗаменить(Стр, "||" + ИмяПараметра + СтрНом + "||", " *||*" + ЗначениеПараметра + "*||* ");
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ЭмуляцияRegExp(Стр, ПараметрыСтрокиА, ПараметрыСтрокиК, ПараметрыСтрокиМ, ПараметрыЧисла, ПараметрыДаты,
		ПараметрыИменованные, ДелатьОберткуПараметров = Ложь)

	ОбработатьМногострочнуюСтрокуЭмуляцияRegExp(Стр, ПараметрыСтрокиМ, ДелатьОберткуПараметров);
	ОбработатьСтрокиЭмуляцияRegExp(Стр, ПараметрыСтрокиА,"'", ДелатьОберткуПараметров);
	ОбработатьСтрокиЭмуляцияRegExp(Стр, ПараметрыСтрокиК,"""", ДелатьОберткуПараметров);
	ОбработатьПараметрыИменованные(Стр, ПараметрыИменованные);
	ОбработатьДатыЭмуляцияRegExp(Стр, ПараметрыДаты, ДелатьОберткуПараметров);
	ОбработатьЧислаЭмуляцияRegExp(Стр, ПараметрыЧисла, ДелатьОберткуПараметров);

	Если ДелатьОберткуПараметров Тогда
		ПараметрыСтрок = Новый Структура;
		ПараметрыСтрок.Вставить("ПараметрСтрокаК",
			Новый Структура("ПараметрыСтроки,Разделитель", ПараметрыСтрокиК, """"));
		ПараметрыСтрок.Вставить("ПараметрСтрокаА",
			Новый Структура("ПараметрыСтроки,Разделитель", ПараметрыСтрокиА, "'"));
		ПараметрыСтрок.Вставить("ПараметрСтрокаМ",
			Новый Структура("ПараметрыСтроки,Разделитель", ПараметрыСтрокиМ, """"));
		ПодготовитьСтрокуСОберткойПараметров(Стр, ПараметрыСтрок, ПараметрыДаты, ПараметрыЧисла);
	КонецЕсли;
КонецПроцедуры

Функция ЭкранироватьСпецСимволыДляЗначенияШага(Знач Стр)
	Стр = СтрЗаменить(Стр,"""","\""");
	Возврат СтрЗаменить(Стр,"'","\'");
КонецФункции

Функция ПолучитьStepDefinitionПоСтроке(Знач Стр, ЗначенияПараметров, СтрокаПараметров = "",
	                            ЕстьПараметрыТаблицы = Ложь, КоличествоПараметровТаблица = 0,
								ДанныеОбработкиПараметров = Неопределено)

	ПараметрыЧисла       = Новый Массив;
	ПараметрыСтрокиА     = Новый Массив;
	ПараметрыСтрокиК     = Новый Массив;
	ПараметрыСтрокиМ     = Новый Массив;
	ПараметрыДаты        = Новый Массив;
	ПараметрыИменованные = Новый Массив;

	СтрокаОригинал = Стр;

	ЭмуляцияRegExp(Стр, ПараметрыСтрокиА, ПараметрыСтрокиК, ПараметрыСтрокиМ, ПараметрыЧисла,
		ПараметрыДаты, ПараметрыИменованные);

	Если ДанныеОбработкиПараметров <> Неопределено Тогда
		ДанныеОбработкиПараметров.Вставить("ОбработаннаяСтрокаПараметров",Стр);
		ДанныеОбработкиПараметров.Вставить("ПараметрыЧисла",ПараметрыЧисла);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиА",ПараметрыСтрокиА);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиК",ПараметрыСтрокиК);
		ДанныеОбработкиПараметров.Вставить("ПараметрыСтрокиМ",ПараметрыСтрокиМ);
		ДанныеОбработкиПараметров.Вставить("ПараметрыДаты",ПараметрыДаты);
		ДанныеОбработкиПараметров.Вставить("ПараметрыИменованные",ПараметрыИменованные);
		ДанныеОбработкиПараметров.Вставить("ЗначенияПараметров",ЗначенияПараметров);
	КонецЕсли;

	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Стр, " ", Истина);
	КолПараметров        = 0;
	КолПараметровИменованные = 0;

	СтрокаПараметров    = "";
	МассивСборкиСтроки = Новый Массив;

	СоответствиеТипов = Новый Соответствие;
	НастройкиСтрокиА = Новый Структура("Счетчик,Тип,Параметры", 0, "Строка", ПараметрыСтрокиА);
	СоответствиеТипов.Вставить("||ПараметрСтрокаА||", НастройкиСтрокиА);
	НастройкиСтрокиК = Новый Структура("Счетчик,Тип,Параметры", 0, "Строка", ПараметрыСтрокиК);
	СоответствиеТипов.Вставить("||ПараметрСтрокаК||", НастройкиСтрокиК);
	НастройкиСтрокиМ = Новый Структура("Счетчик,Тип,Параметры", 0, "Строка", ПараметрыСтрокиМ);
	СоответствиеТипов.Вставить("||ПараметрСтрокаМ||", НастройкиСтрокиМ);
	НастройкиЧисел = Новый Структура("Счетчик,Тип,Параметры", 0, "Число", ПараметрыЧисла);
	СоответствиеТипов.Вставить("||ПараметрЧисло||", НастройкиЧисел);
	НастройкиДат = Новый Структура("Счетчик,Тип,Параметры", 0, "Дата", ПараметрыДаты);
	СоответствиеТипов.Вставить("||ПараметрДата||", НастройкиДат);

	Для Каждого Элем Из МассивПодстрок Цикл
		НастройкиЭлемента = СоответствиеТипов.Получить(Элем);
		Если ЗначениеЗаполнено(НастройкиЭлемента) Тогда
			КолПараметров        = КолПараметров       + 1;
			НастройкиЭлемента.Счетчик = НастройкиЭлемента.Счетчик + 1;
			ПараметрыНастройкиЭлемента = НастройкиЭлемента.Параметры;

			СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем, КолПараметров);

			Если (ПараметрыНастройкиЭлемента.Количество()-1) < НастройкиЭлемента.Счетчик - 1 Тогда
				ТекстСообщения = "Не смог обработать параметры в строке <%1>";
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", СтрокаОригинал);
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;

			СтруктураЗначенияПараметра = Новый Структура;
			СтруктураЗначенияПараметра.Вставить("Значение", ПараметрыНастройкиЭлемента[НастройкиЭлемента.Счетчик - 1]);
			СтруктураЗначенияПараметра.Вставить("Тип", НастройкиЭлемента.Тип);

			ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);
			Продолжить;
		КонецЕсли;

		Элем                     = СокрЛП(СтрЗаменить(Элем, "|||ЗаменаПробела|||", " "));
		НашлиПараметрИменованный = Ложь;
		Для каждого ЭлемПараметрыИменованные Из ПараметрыИменованные Цикл
			ЭлемПараметрыИменованные = СтрЗаменить(ЭлемПараметрыИменованные, "|||ЗаменаПробела|||", " ");

			СтрДляСравнения = "<" + ЭлемПараметрыИменованные + ">";
			Если СтрДляСравнения = Элем Тогда
				КолПараметров            = КолПараметров      + 1;
				КолПараметровИменованные = КолПараметровИменованные  + 1;

				СтрокаПараметров = СтрокаПараметров + ДобавитьПараметрStepDefinition(Элем,КолПараметров);

				СтруктураЗначенияПараметра = Новый Структура;
				СтруктураЗначенияПараметра.Вставить("Значение",ЭлемПараметрыИменованные);
				СтруктураЗначенияПараметра.Вставить("Тип","ПараметрИменованный");

				ЗначенияПараметров.Добавить(СтруктураЗначенияПараметра);

				НашлиПараметрИменованный = Истина;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		Если НашлиПараметрИменованный Тогда
			Продолжить;
		КонецЕсли;

		МассивСборкиСтроки.Добавить(СделатьПервуюБуквуЗаглавной(Элем));
	КонецЦикла;
	StepDefinition = СтрСоединить_(МассивСборкиСтроки, "");

	Если ЕстьПараметрыТаблицы = Истина Тогда
		Если КоличествоПараметровТаблица = 1 Тогда
			СтрокаПараметров = СтрокаПараметров + "ТабПарам,";
		Иначе
			Для Ккк = 1 По КоличествоПараметровТаблица Цикл
				СтрокаПараметров = СтрокаПараметров + "ТабПарам" + XMLСтрока(Ккк) + ",";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если СтрокаПараметров <> "" Тогда
		Если Прав(СтрокаПараметров, 1) = "," Тогда
			СтрокаПараметров = Лев(СтрокаПараметров, СтрДлина(СтрокаПараметров) - 1);//там лишняя запятая
		КонецЕсли;
	КонецЕсли;

	УбратьЗапрещенныеСимволыИзStepDefinition(StepDefinition);
	ПроверкаКорректностиStepDefinition(StepDefinition);

	StepDefinition = StepDefinition + "(" + СтрокаПараметров + ")";

	Возврат StepDefinition;
КонецФункции

Процедура ПроверкаКорректностиStepDefinition(StepDefinition)
	ПервыйСимвол = Лев(StepDefinition, 1);
	Если ЭтоЦелоеЧисло(ПервыйСимвол) Тогда
		StepDefinition = "_" + StepDefinition;
	КонецЕсли;
КонецПроцедуры

Функция ИнкрементЗначения(Зн,Инкремент)
	Зн = Зн + Инкремент;
	Возврат Зн;
КонецФункции

Функция СравнитьПутиФайлов(Знач Путь1, Знач Путь2)

	Возврат УниверсальноеПолноеИмяФайла(Путь1, Истина) = УниверсальноеПолноеИмяФайла(Путь2, Истина);

КонецФункции

Функция СоздатьТаблицуКлючевыхСлов()
	Тзн = Новый ТаблицаЗначений;
	Тзн.Колонки.Добавить("Тип");
	Тзн.Колонки.Добавить("Слово");
	Тзн.Колонки.Добавить("Уникально");

	Тзн.Индексы.Добавить("Слово");

	Возврат Тзн;
КонецФункции

Функция ПолучитьКлючевыеСловаПоТипам(Тзн)
	СоответствиеТипов = Новый Соответствие;
	Для Каждого СтрТзн Из Тзн Цикл
		Тип = СтрТзн.Тип;

		Если СоответствиеТипов.Получить(Тип) = Неопределено Тогда
			СоответствиеТипов.Вставить(Тип,Новый Массив);
		КонецЕсли;

		МассивСоответствия = СоответствиеТипов.Получить(Тип);
		МассивСоответствия.Добавить(СтрТзн.Слово);
	КонецЦикла;

	Возврат СоответствиеТипов;
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_ru()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"и","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"когда","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тогда","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"затем","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функция","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функционал","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"свойство","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"предыстория","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"контекст","background");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарий","scenario");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценария","scenario_outline");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"примеры","examples");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"допустим","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"пусть","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"если","if");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"к тому же","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"также","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"но","but");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а","but");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"иначе","else");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"иначеесли","elseif");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_en()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"feature","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Functionality","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Business Need","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ability","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"background","background");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"scenario outline","scenario_outline");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"scenario","scenario",Ложь);

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"examples","examples");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"given","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"when","when");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"then","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"and","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"but","but");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"if","if");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"elseif","elseif");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"else","else");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_uk()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"функціонал","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"передумова","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"сценарій","scenario");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"структура сценарію","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"приклади","examples");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"припустимо","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"дано","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"припустимо, що","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"нехай","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"якщо","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"коли","when");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"то","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"тоді","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"і","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"а також","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"та","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"але","but");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_ro()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Și","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Si","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Şi","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Context","background");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dar","but");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Exemple","examples");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funcționalitate","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Functionalitate","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funcţionalitate","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dat fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Date fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dati fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dați fiind","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Daţi fiind","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenariu","scenario");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Structura scenariu","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Structură scenariu","scenario_outline");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Atunci","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Cand","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Când","when");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_de()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Und","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Grundlage","background");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Aber","but");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Beispiele","examples");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funktionalität","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Angenommen","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gegeben sei","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gegeben seien","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szenario","scenario");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szenariogrundriss","scenario_outline");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dann","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Wenn","when");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_lv()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Un","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Konteksts","background");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Situācija","background");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Bet","but");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Piemēri","examples");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Paraugs","examples");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funkcionalitāte","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Fīča","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kad","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenārijs","scenario");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenārijs pēc parauga","scenario_outline");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tad","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ja","when");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_it()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"E","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Contesto","background");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ma","but");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Esempi","examples");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funzionalità","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dato","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Data","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dati","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Date","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenario","scenario");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Schema dello scenario","scenario_outline");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Allora","then");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Quando","when");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_pl()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Oraz","and");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"I","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Założenia","background");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Ale","but");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Przykłady","examples");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Właściwość","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Funkcja","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Aspekt","feature");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Potrzeba biznesowa","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Zakładając","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Mając","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Zakładając, że","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Scenariusz","scenario");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Szablon scenariusza","scenario_outline");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Wtedy","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Jeżeli","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Jeśli","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Gdy","when");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kiedy","when");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция СоздатьТаблицуКлючевыхСлов_vi()
	Тзн = СоздатьТаблицуКлючевыхСлов();

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Và","and");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Bối cảnh","background");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Nhưng","but");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Dữ liệu","examples");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tính năng","feature");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Biết","given");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Cho","given");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Tình huống","scenario");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Kịch bản","scenario");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khung tình huống","scenario_outline");
	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khung kịch bản","scenario_outline");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Thì","then");

	ДобавитьКлючевоеСловоВТаблицу(Тзн,"Khi","when");

	Возврат Новый Структура("ТаблицаКлючевыхСлов,МаксДлинаСлова,СловаПоТипам",Тзн,10,ПолучитьКлючевыеСловаПоТипам(Тзн));
КонецФункции

Функция РежимСовестимостиПозволяетИспользоватьНовыеСтроковыеФункции()
	ТекущийРежимСовместимости = Неопределено;

	Попытка
		ТекущийРежимСовместимости = Вычислить("Метаданные.РежимСовместимости");
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Попытка
		РежимыСовестимости = Метаданные.СвойстваОбъектов.РежимСовместимости;
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Попытка
		Если ТекущийРежимСовместимости = РежимыСовестимости.Версия8_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_13 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_2_16 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_1 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_2 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_3 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_4 Тогда
			Возврат Ложь;
		ИначеЕсли ТекущийРежимСовместимости = РежимыСовестимости.Версия8_3_5 Тогда
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;

КонецФункции

//перевод текста Gherkin
Функция СоздатьТаблицаПеревода()
	ТаблицаПеревода = Новый ТаблицаЗначений;
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШаг");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШагПредставлениеДляПеревода");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийШагНРег");
	ТаблицаПеревода.Колонки.Добавить("ОригиналРусскийОписание");
	ТаблицаПеревода.Колонки.Добавить("StepDefinitionРусский");
	ТаблицаПеревода.Колонки.Добавить("СтрокаДляПоискаРусский");
	ТаблицаПеревода.Колонки.Добавить("ОбработаннаяСтрокаПараметровРусский");

	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаШаг");
	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаШагНРег");
	ТаблицаПеревода.Колонки.Добавить("ТекстПереводаОписание");
	ТаблицаПеревода.Колонки.Добавить("StepDefinitionПеревод");
	ТаблицаПеревода.Колонки.Добавить("СтрокаДляПоискаПеревод");
	ТаблицаПеревода.Колонки.Добавить("ОбработаннаяСтрокаПараметровПеревод");

	ТаблицаПеревода.Колонки.Добавить("ДанныеОбработкиПараметровРусский");
	ТаблицаПеревода.Колонки.Добавить("ДанныеОбработкиПараметровПеревод");
	ТаблицаПеревода.Колонки.Добавить("КлючевоеСлово");
	ТаблицаПеревода.Колонки.Добавить("НомерСтрокиВФайлеПеревода",Новый ОписаниеТипов("Число"));
	ТаблицаПеревода.Колонки.Добавить("МассивСоответствийПозицийПараметров");

	ТаблицаПеревода.Индексы.Добавить("ОригиналРусскийШагНРег");
	ТаблицаПеревода.Индексы.Добавить("StepDefinitionРусский");
	ТаблицаПеревода.Индексы.Добавить("СтрокаДляПоискаРусский");
	ТаблицаПеревода.Индексы.Добавить("СтрокаДляПоискаПеревод");

	Возврат ТаблицаПеревода;
КонецФункции

Функция ВставитьВПараметрыСимволыПроцента(Знач Стр)
	ЗначенияПараметров = Новый СписокЗначений;
	ДанныеОбработкиПараметров = Новый Структура;

	МассивСтрокОригинал = РазложитьСтрокуВМассивПодстрок(Стр, Символы.ПС);
	ПерваяЧастьСтроки = МассивСтрокОригинал[0];
	ВтораяЧастьСтроки = "";
	Для Ккк = 1 По МассивСтрокОригинал.Количество()-1 Цикл
		ВтораяЧастьСтроки = ВтораяЧастьСтроки + МассивСтрокОригинал[Ккк];
		Если Ккк < МассивСтрокОригинал.Количество()-1 Тогда
			ВтораяЧастьСтроки = ВтораяЧастьСтроки + Символы.ПС;//TODO ускорить конкатенацию строк
		КонецЕсли;
	КонецЦикла;

	StepDefinition = ПолучитьStepDefinitionПоСтроке(ПерваяЧастьСтроки,ЗначенияПараметров,,,,ДанныеОбработкиПараметров);

	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровСтрокаМ = 0;
	КолПараметровДата    = 0;

	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров, " ", Истина);

	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;

		Тип = Неопределено;
		Если Элем = "||ПараметрСтрокаК||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаК = КолПараметровСтрокаК + 1;

			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыСтрокиК[КолПараметровСтрокаК-1];

			Тип = "СтрокаК";

		ИначеЕсли Элем = "||ПараметрСтрокаА||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаА = КолПараметровСтрокаА + 1;

			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыСтрокиА[КолПараметровСтрокаА-1];

			Тип = "СтрокаА";

		ИначеЕсли Элем = "||ПараметрСтрокаМ||" Тогда // TODO дублирование обработки ПараметрСтрокаА, ПараметрСтрокаК и ПараметрСтрокаМ
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаМ = КолПараметровСтрокаМ + 1;

			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыСтрокиМ[КолПараметровСтрокаМ - 1];

			Тип = "СтрокаМ";

		ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;

			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыЧисла[КолПараметровЧисло-1];

			Тип = "СтрокаК";
		ИначеЕсли Элем = "||ПараметрДата||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата + 1;

			ЗначениеПараметра = ДанныеОбработкиПараметров.ПараметрыДаты[КолПараметровДата-1];

			Тип = "СтрокаК";
		КонецЕсли;

		Если Тип = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если Лев(ЗначениеПараметра, 1) <> "%" Тогда
			ЗначениеПараметра = "%" + XMLСтрока(КолПараметров) + " " + ЗначениеПараметра;
		КонецЕсли;

		Представление      = ПолучитьПредставлениеПараметраПриПереводе(ЗначениеПараметра, Тип);
		МассивПодстрок[Ид] = Представление;//TODO страннейший код
	КонецЦикла;

	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		МассивПодстрок[Ид] = СтрЗаменить(МассивПодстрок[Ид], "|||ЗаменаПробела|||", " ");//TODO страннейший код
	КонецЦикла;

	Стр = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		Стр = Стр + Элем + " ";//TODO заменить на СтрСоединить_
	КонецЦикла;
	Стр = Лев(Стр, СтрДлина(Стр)-1);

	Если ВтораяЧастьСтроки <> "" Тогда
		Стр = Стр + Символы.ПС + ВтораяЧастьСтроки;//TODO ускорить конкатенацию строк
	КонецЕсли;

	Возврат Стр;
КонецФункции

Процедура ПроверитьТаблицаПереводаНаДубли(ТаблицаПеревода)
	КопияТаблицаПеревода = ТаблицаПеревода.Скопировать();
	КопияТаблицаПеревода.Колонки.Добавить("КоличествоРусскихШаговНаОдинСнипетПеревода",Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаКопияТаблицаПеревода Из КопияТаблицаПеревода Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаКопияТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
		ИначеЕсли СтрокаКопияТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
		Иначе
			СтрокаКопияТаблицаПеревода.КоличествоРусскихШаговНаОдинСнипетПеревода = 1;
		КонецЕсли;
	КонецЦикла;

	КопияТаблицаПеревода.Свернуть("СтрокаДляПоискаПеревод","КоличествоРусскихШаговНаОдинСнипетПеревода");

	КолСтрокШапки = 1;
	Для Каждого СтрокаКопияТаблицаПеревода Из КопияТаблицаПеревода Цикл
		Если СтрДлина(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод) <= 1 Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаКопияТаблицаПеревода.КоличествоРусскихШаговНаОдинСнипетПеревода > 1 Тогда
			МассивСтрок = ТаблицаПеревода.НайтиСтроки(Новый Структура("СтрокаДляПоискаПеревод",СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод));

			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(СтрокаКопияТаблицаПеревода.СтрокаДляПоискаПеревод,"СтрокаДляПоискаПеревод");
			//TODO ускорить конкатенацию строк
			СтрокаШаг = "Шаги имеющие одинаковый перевод: <" + СтрокаТаблицаПеревода.ТекстПереводаШаг + ">" + Символы.ПС;
			Для Каждого СтрокаТаблицаПеревода Из МассивСтрок Цикл
				НомерСтроки = ТаблицаПеревода.Индекс(СтрокаТаблицаПеревода)+1+КолСтрокШапки;
				//TODO ускорить конкатенацию строк
				СтрокаШаг = СтрокаШаг + СтрокаТаблицаПеревода.ОригиналРусскийШаг + " <Строка №" + XMLСтрока(НомерСтроки) + ">" + Символы.ПС;
			КонецЦикла;

			Сообщить(СтрокаШаг);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПрочитатьФайлПеревода(ДанныеПеревода)
	Если ДанныеПеревода.ДвоичныеДанныеФайлПеревода = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ДанныеПеревода.ДвоичныеДанныеФайлПеревода[ДанныеПеревода.ЯзыкПеревода] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("mxl");
	ДанныеПеревода.ДвоичныеДанныеФайлПеревода[ДанныеПеревода.ЯзыкПеревода].Записать(ИмяВременногоФайла);

	ТаблицаПеревода = ДанныеПеревода.ТаблицаПеревода;

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ИмяВременногоФайла);

	Для Ккк = 2 По ТабДок.ВысотаТаблицы Цикл
		ОригиналРусскийШаг      = СокрЛП(ТабДок.Область(Ккк,1,Ккк,1).Текст);
		ОригиналРусскийОписание = СокрЛП(ТабДок.Область(Ккк,2,Ккк,2).Текст);
		ТекстПереводаШаг        = СокрЛП(ТабДок.Область(Ккк,3,Ккк,3).Текст);
		ТекстПереводаОписание   = СокрЛП(ТабДок.Область(Ккк,4,Ккк,4).Текст);

		Если НЕ ЗначениеЗаполнено(ОригиналРусскийШаг) Тогда
			Продолжить;
		КонецЕсли;

		//обновим описание шагов если это возможно

		ОписаниеШагаРусский  = ПолучитьОписаниеШагаПоСтроке(СокрЛП(
			ПолучитьПервуюСтрокуИзМногострочной(ОригиналРусскийШаг)));

		Если ДанныеПеревода.Свойство("ТаблицаИзвестныхStepDefinition") Тогда
			ТаблицаИзвестныхШагов = ДанныеПеревода.ТаблицаИзвестныхStepDefinition;

			Поз = Найти(ОписаниеШагаРусский.StepDefinition,"(");
			СтрокаДляПоискаРусский = НРег(Лев(ОписаниеШагаРусский.StepDefinition, Поз-1));

			СтрокаТаблицаИзвестныхStepDefinition = ТаблицаИзвестныхШагов.Найти(СтрокаДляПоискаРусский,"СтрокаДляПоиска");
			Если СтрокаТаблицаИзвестныхStepDefinition <> Неопределено Тогда
				ОригиналРусскийШаг      = СокрЛП(СтрокаТаблицаИзвестныхStepDefinition.ПредставлениеТеста);
				Если ЗначениеЗаполнено(СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага) Тогда
					//шаг мог быть переименован, и тогда у варианта  из ТаблицаИзвестныхШагов может не быть описания
					ОригиналРусскийОписание = СтрокаТаблицаИзвестныхStepDefinition.ОписаниеШага;
				КонецЕсли;
				ОписаниеШагаРусский     = ПолучитьОписаниеШагаПоСтроке(СокрЛП(
					ПолучитьПервуюСтрокуИзМногострочной(ОригиналРусскийШаг)));
			КонецЕсли;
		КонецЕсли;

		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(ОригиналРусскийШаг),"ОригиналРусскийШагНРег");

		Если СтрокаТаблицаПеревода = Неопределено Тогда
			СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(ОписаниеШагаРусский.StepDefinition,"StepDefinitionРусский");
			Если СтрокаТаблицаПеревода = Неопределено Тогда
				СтрокаТаблицаПеревода = ТаблицаПеревода.Добавить();
			ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
				СтрокаТаблицаПеревода = ТаблицаПеревода.Добавить();
			КонецЕсли;
		КонецЕсли;

		СтрокаТаблицаПеревода.ОригиналРусскийШагНРег          = НРег(ОригиналРусскийШаг);
		СтрокаТаблицаПеревода.ТекстПереводаШагНРег            = НРег(ТекстПереводаШаг);
		СтрокаТаблицаПеревода.ОригиналРусскийШаг              = ОригиналРусскийШаг;
		СтрокаТаблицаПеревода.ТекстПереводаШаг                = ТекстПереводаШаг;

		Если НЕ ЗначениеЗаполнено(СтрокаТаблицаПеревода.ОригиналРусскийОписание) Тогда
			СтрокаТаблицаПеревода.ОригиналРусскийОписание = ОригиналРусскийОписание;
		КонецЕсли;
		СтрокаТаблицаПеревода.ТекстПереводаОписание   = ТекстПереводаОписание;

		СтрокаТаблицаПеревода.НомерСтрокиВФайлеПеревода = Ккк;
	КонецЦикла;

	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = СтрокаТаблицаПеревода.ОригиналРусскийШаг;

		Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
		ИначеЕсли СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
		Иначе
			СтрокаТаблицаПеревода.ОригиналРусскийШагПредставлениеДляПеревода = ВставитьВПараметрыСимволыПроцента(СтрокаТаблицаПеревода.ОригиналРусскийШаг);
		КонецЕсли;
	КонецЦикла;

	УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры

Функция ПолучитьПервуюСтрокуИзМногострочной(Знач Стр)
	Если Найти(Стр, Символы.ПС) = 0 Тогда
		Возврат Стр;
	КонецЕсли;

	МассивСтрок = РазложитьСтрокуВМассивПодстрок(Стр, Символы.ПС);
	Возврат МассивСтрок[0];
КонецФункции

Процедура ДобавитьВОписаниеШагаОчередностьПараметров(ОписаниеШага)
	МассивСоответствийПозицийПараметров = Новый Массив;
	НомерПараметра = 0;
	Для Каждого ЗначениеПараметра Из ОписаниеШага.ЗначенияПараметров Цикл

		НомерПараметра = НомерПараметра + 1;
		ТекЗначение    = ЗначениеПараметра.Значение.Значение;
		НоваяПозиция   = -1;

		Если Лев(ТекЗначение,1) = "%" Тогда
			МассивСтрок = РазложитьСтрокуВМассивПодстрок(ТекЗначение," ");
			Попытка
				НоваяПозиция = Число(Сред(МассивСтрок[0],2));
			Исключение
				Сообщить("<" + ОписаниеШага.ТекстПереводаШаг + ">");
				Сообщить(ОписаниеОшибки());
			КонецПопытки;

			МассивСоответствийПозицийПараметров.Добавить(НоваяПозиция);
		КонецЕсли;
	КонецЦикла;

	ОписаниеШага.Вставить("МассивСоответствийПозицийПараметров",МассивСоответствийПозицийПараметров);
КонецПроцедуры

Процедура ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода)
	ТаблицаПеревода = ДанныеПеревода.ТаблицаПеревода;

	Для Каждого СтрокаТаблицаПеревода Из ТаблицаПеревода Цикл
		ТекущийЯзыкФичаФайла = "ru";
		ОписаниеШагаРусский  = ПолучитьОписаниеШагаПоСтроке(
			ПолучитьПервуюСтрокуИзМногострочной(СтрокаТаблицаПеревода.ОригиналРусскийШаг));
		СтрокаТаблицаПеревода.StepDefinitionРусский               = ОписаниеШагаРусский.StepDefinition;
		Поз = Найти(СтрокаТаблицаПеревода.StepDefinitionРусский, "(");
		СтрокаТаблицаПеревода.СтрокаДляПоискаРусский = НРег(Лев(СтрокаТаблицаПеревода.StepDefinitionРусский, Поз-1));
		СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровРусский = ОписаниеШагаРусский.ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров;

		ТекущийЯзыкФичаФайла = ДанныеПеревода.ЯзыкПеревода;

		ИсходникДляПолученияStepDefinitionПеревод = СтрокаТаблицаПеревода.ТекстПереводаШаг;
		ИсходникДляПолученияStepDefinitionПеревод = СтрЗаменить(ИсходникДляПолученияStepDefinitionПеревод,"'","");

		ОписаниеШагаПеревод  = ПолучитьОписаниеШагаПоСтроке(
			ПолучитьПервуюСтрокуИзМногострочной(ИсходникДляПолученияStepDefinitionПеревод));

		ДобавитьВОписаниеШагаОчередностьПараметров(ОписаниеШагаПеревод);
		СтрокаТаблицаПеревода.StepDefinitionПеревод               = ОписаниеШагаПеревод.StepDefinition;
		СтрокаТаблицаПеревода.МассивСоответствийПозицийПараметров = ОписаниеШагаПеревод.МассивСоответствийПозицийПараметров;
		Поз = Найти(СтрокаТаблицаПеревода.StepDefinitionПеревод,"(");
		СтрокаТаблицаПеревода.СтрокаДляПоискаПеревод = НРег(Лев(СтрокаТаблицаПеревода.StepDefinitionПеревод, Поз-1));
		СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод = ОписаниеШагаПеревод.ДанныеОбработкиПараметров.ОбработаннаяСтрокаПараметров;

		СтрокаТаблицаПеревода.ДанныеОбработкиПараметровРусский = ОписаниеШагаРусский.ДанныеОбработкиПараметров;
		СтрокаТаблицаПеревода.ДанныеОбработкиПараметровПеревод = ОписаниеШагаПеревод.ДанныеОбработкиПараметров;
		СтрокаТаблицаПеревода.КлючевоеСлово                    = ОписаниеШагаРусский.КлючевоеСлово;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПредставлениеПараметраПриПереводе(Значение,Тип)
	Если Тип = "СтрокаК" Тогда
		Возврат """" + ЭкранироватьСпецСимволыДляЗначенияШага(Значение) + """";
	ИначеЕсли Тип = "СтрокаА" Тогда
		Возврат "'" + ЭкранироватьСпецСимволыДляЗначенияШага(Значение) + "'";
	//ИначеЕсли Тип = "СтрокаМ" Тогда//TODO
	//	Возврат Значение;
	ИначеЕсли Тип = "Число" Тогда
		Возврат Значение;
	ИначеЕсли Тип = "Дата" Тогда
		Возврат Значение;
	Иначе
		ВызватьИсключение "Не известный тип параметра в ПолучитьПредставлениеПараметраПриПереводе() <" + Тип + ">";
	КонецЕсли;
КонецФункции

Функция ВернутьВСтрокуПараметры(Знач Стр,ДанныеПеревода,ДанныеОбработкиПараметровРусский,ДанныеОбработкиПараметровПеревод)
	КолПараметров        = 0;
	КолПараметровЧисло   = 0;
	КолПараметровСтрокаА = 0;
	КолПараметровСтрокаК = 0;
	КолПараметровСтрокаМ = 0;
	КолПараметровДата    = 0;

	МассивПодстрок = РазложитьСтрокуВМассивПодстрок(Стр," ",Истина);

	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;

		Тип = Неопределено;
		Если Элем = "||ПараметрСтрокаК||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаК = КолПараметровСтрокаК + 1;

			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;

			Тип = "СтрокаК";

		ИначеЕсли Элем = "||ПараметрСтрокаА||" Тогда
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаА = КолПараметровСтрокаА + 1;

			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;

			Тип = "СтрокаА";

		ИначеЕсли Элем = "||ПараметрСтрокаМ||" Тогда // TODO дублирование обработки ПараметрСтрокаА, ПараметрСтрокаК и ПараметрСтрокаМ
			КолПараметров        = КолПараметров        + 1;
			КолПараметровСтрокаМ = КолПараметровСтрокаМ + 1;

			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров - 1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров - 1].Значение.Значение;

			Тип = "СтрокаМ";

		ИначеЕсли Элем = "||ПараметрЧисло||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровЧисло = КолПараметровЧисло + 1;

			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;

			Тип = "Число";
		ИначеЕсли Элем = "||ПараметрДата||" Тогда
			КолПараметров      = КолПараметров      + 1;
			КолПараметровДата  = КолПараметровДата + 1;

			ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ЗначенияПараметров[КолПараметров-1].Значение.Значение;
			//ЗначениеПараметраРусский = ДанныеОбработкиПараметровРусский.ПараметрыДаты[КолПараметровДата-1];
			//ЗначениеПараметраПеревод = ДанныеОбработкиПараметровПеревод.ПараметрыДаты[КолПараметровДата-1];

			Тип = "Дата";
		КонецЕсли;

		Если Тип = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		МассивСтрокЗначениеПараметраПеревод = РазложитьСтрокуВМассивПодстрок(ЗначениеПараметраПеревод," ");
		Если Лев(МассивСтрокЗначениеПараметраПеревод[0],1) = "%" Тогда
			//подставим значения, у которых указаны проценты первым символом
			//значит явно указан номер параметра

			НомерПараметра = Число(Сред(МассивСтрокЗначениеПараметраПеревод[0],2));

			ПараметрРусский = ДанныеОбработкиПараметровРусский.ЗначенияПараметров[НомерПараметра-1];
			Если ПараметрРусский.Значение.Тип  <> "Строка" Тогда
				Тип = ПараметрРусский.Значение.Тип;
			КонецЕсли;

			Если МассивСтрокЗначениеПараметраПеревод.Количество() = 1 Тогда
				//значит в качестве параметра указано просто %1 - т.е. только номер, но нет значения параметра, например: "%1 ЗначениеПараметра"
				//поэтому берём значение из русского варианта
				Значение = ПараметрРусский.Значение.Значение;
			Иначе
				Если ДанныеПеревода.Свойство("ФормированиеТаблицыДляДальнейшегоПеревода") И ДанныеПеревода.ФормированиеТаблицыДляДальнейшегоПеревода Тогда
					//надо взять значение параметра из текста перевода, если он там есть
					//значит берём значение из строки, которая идёт после %1
					Значение = "";
					Для Ккк = 1 По МассивСтрокЗначениеПараметраПеревод.Количество()-1 Цикл
						Значение = Значение + МассивСтрокЗначениеПараметраПеревод[Ккк] + " ";
					КонецЦикла;
					Значение = Лев(Значение,СтрДлина(Значение)-1);//убрали лишний пробел
				Иначе
					//значит это происходит перевод реальной фичи - и надо брать параметры из русского
					Значение = ПараметрРусский.Значение.Значение;
				КонецЕсли;
			КонецЕсли;

			ПредставлениеПараметра = ПолучитьПредставлениеПараметраПриПереводе(Значение,Тип);

		Иначе
			ПредставлениеПараметра = ПолучитьПредставлениеПараметраПриПереводе(ЗначениеПараметраРусский,Тип);
		КонецЕсли;

		МассивПодстрок[Ид] = ПредставлениеПараметра;
	КонецЦикла;

	Ид = -1;
	Для Каждого Элем Из МассивПодстрок Цикл
		Ид = Ид + 1;
		МассивПодстрок[Ид] = СтрЗаменить(МассивПодстрок[Ид], "|||ЗаменаПробела|||", " ");
	КонецЦикла;

	Стр = "";
	Для Каждого Элем Из МассивПодстрок Цикл
		Стр = Стр + Элем + " ";
	КонецЦикла;

	Возврат Лев(Стр,СтрДлина(Стр)-1);
КонецФункции

Функция ПеревестиТекстПоТаблицеПеревода(ДанныеПеревода)
	ТекстДляПеревода = ДанныеПеревода.ТекстДляПеревода;
	ТаблицаПеревода  = ДанныеПеревода.ТаблицаПеревода;

	МассивСтрокПеревод = Новый Массив;

	МассивСтрок = РазложитьСтрокуВМассивПодстрок(ТекстДляПеревода, Символы.ПС);
	Для Ккк = 0 По МассивСтрок.Количество()-1 Цикл
		СтрокаОригинал = МассивСтрок[Ккк];
		Стр            = СокрЛП(МассивСтрок[Ккк]);
		ПрефиксСтроки  = Лев(СтрокаОригинал,Найти(СтрокаОригинал,Стр)-1);

		Если Стр = "" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "@" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		ИначеЕсли Лев(Стр,9) = "#language" Тогда
			МассивСтрокПеревод.Добавить("#language: " + ДанныеПеревода.ЯзыкПеревода);
			Продолжить;
		ИначеЕсли Лев(Стр,1) = "#" Тогда
			МассивСтрокПеревод.Добавить(СтрокаОригинал);
			Продолжить;
		КонецЕсли;

		ТекущийЯзыкФичаФайла  = "ru";
		ОписаниеШагаРусский   = ПолучитьОписаниеШагаПоСтроке(Стр);
		StepDefinitionРусский = ОписаниеШагаРусский.StepDefinition;

		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(StepDefinitionРусский,"StepDefinitionРусский");
		Если СтрокаТаблицаПеревода <> Неопределено И СтрокаТаблицаПеревода.StepDefinitionРусский <> "_()" Тогда

			Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Специальный текст" Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг);
				Продолжить;
			КонецЕсли;

			Если СтрокаТаблицаПеревода.ОригиналРусскийОписание = "Категория шагов" Тогда
				МассивСтрокПеревод.Добавить(СтрокаТаблицаПеревода.ТекстПереводаШаг);
				Продолжить;
			КонецЕсли;

			Если СтрокаТаблицаПеревода.КлючевоеСлово = "scenario" Тогда
				//ищем прямой перевод
				СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(Стр),"ОригиналРусскийШагНРег");
				Если СтрокаТаблицаПеревода <> Неопределено Тогда
					МассивСтрокПеревод.Добавить(ПрефиксСтроки + СтрокаТаблицаПеревода.ТекстПереводаШаг);
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Попытка
				СтрокаСПравильнымиПараметрами = ВернутьВСтрокуПараметры(
				   СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод,ДанныеПеревода,
				   ОписаниеШагаРусский.ДанныеОбработкиПараметров,СтрокаТаблицаПеревода.ДанныеОбработкиПараметровПеревод);
			Исключение
				ВызватьИсключение "Не смог подставить в строку параметры: <"
				      + СтрокаТаблицаПеревода.ОбработаннаяСтрокаПараметровПеревод + "> " + ОписаниеОшибки();
			КонецПопытки;

			ТаблицаКлючевыхСловПеревод = ДанныеПеревода.КлючевыеСловаПеревод.ТаблицаКлючевыхСлов;
			КлючевоеСлово = "";
			СтрокаТаблицаКлючевыхСлов = ТаблицаКлючевыхСловПеревод.Найти(СтрокаТаблицаПеревода.КлючевоеСлово,"Тип");
			Если СтрокаТаблицаКлючевыхСлов = Неопределено Тогда
				СтрокаТаблицаКлючевыхСлов = ТаблицаКлючевыхСловПеревод.Найти("and","Тип");
			КонецЕсли;

			Если СтрокаТаблицаКлючевыхСлов = Неопределено Тогда
				ВызватьИсключение "Не найдено ключевое слово <" + СтрокаТаблицаПеревода.КлючевоеСлово + ">  для языка <" + ДанныеПеревода.ЯзыкПеревода + ">";
			КонецЕсли;

			СтрокаПеревода = ПрефиксСтроки + СделатьПервуюБуквуЗаглавной(СтрокаТаблицаКлючевыхСлов.Слово) + " " + СтрокаСПравильнымиПараметрами;
			//СтрокаПеревода = СтрЗаменить(СтрокаПеревода,"_","-");
			МассивСтрокПеревод.Добавить(СтрокаПеревода);

			Продолжить;
		КонецЕсли;

		//ищем прямой перевод
		СтрокаТаблицаПеревода = ТаблицаПеревода.Найти(НРег(Стр),"ОригиналРусскийШагНРег");
		Если СтрокаТаблицаПеревода <> Неопределено Тогда
			МассивСтрокПеревод.Добавить(ПрефиксСтроки + СтрокаТаблицаПеревода.ТекстПереводаШаг);
			Продолжить;
		КонецЕсли;

		СтрокаДляПеревода = СтрокаОригинал;
		Если Лев(СокрЛП(СтрокаДляПеревода),1) <> "|" Тогда
			Если Лев(СокрЛП(СтрокаДляПеревода),3) <> "!!!" Тогда
				СтрокаДляПеревода = "!!!" + СтрокаДляПеревода;
			КонецЕсли;
		КонецЕсли;
		МассивСтрокПеревод.Добавить(СтрокаДляПеревода);
	КонецЦикла;

	Стр = "";
	Для Каждого Элем Из МассивСтрокПеревод Цикл
		Стр = Стр + Элем + Символы.ПС;//TODO ускорить конкатенацию строк
	КонецЦикла;

	Возврат Стр;
КонецФункции

Функция ПолучитьТаблицуПеревода(СтруктураПараметров)
	ТаблицаПеревода = СоздатьТаблицаПеревода();

	Если Не СтруктураПараметров.Свойство("ДвоичныеДанныеФайлПеревода") Тогда
		Возврат ТаблицаПеревода;
	КонецЕсли;

	ДанныеПеревода = Новый Структура;

	ТекущийЯзык = "ru";

	ДанныеПеревода.Вставить("КлючевыеСловаРусский",СоответствиеТаблицПереводов["ru"]);
	Если СтруктураПараметров.Свойство("ЭтоЗагрузкаФич") И СтруктураПараметров.ЭтоЗагрузкаФич Тогда
		ТекущийЯзык = ТекущийЯзыкФичаФайла;
	Иначе
		ТекущийЯзык = СтруктураПараметров.ЯзыкГенератораGherkin;
	КонецЕсли;
	ДанныеПеревода.Вставить("КлючевыеСловаПеревод",СоответствиеТаблицПереводов[ТекущийЯзык]);

	ДанныеПеревода.Вставить("ТаблицаПеревода",ТаблицаПеревода);
	ДанныеПеревода.Вставить("ДвоичныеДанныеФайлПеревода",СтруктураПараметров.ДвоичныеДанныеФайлПеревода);

	ДанныеПеревода.Вставить("ЯзыкПеревода",ТекущийЯзык);
	ПрочитатьФайлПеревода(ДанныеПеревода);
	ПолучитьСнипетыДляТаблицыПеревода(ДанныеПеревода);
	Возврат ТаблицаПеревода;
КонецФункции

Функция УниверсальноеПолноеИмяФайла(Знач ПолноеИмяФайлаИлиФайл, ВНРегистр = Ложь)
	ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл;
	Если ТипЗнч(ПолноеИмяФайлаИлиФайл ) = Тип("Файл") Тогда
		ПолноеИмяФайла = ПолноеИмяФайлаИлиФайл.ПолноеИмя;
	КонецЕсли;

	УниверсальноеПолноеИмя = СтрЗаменить(ПолноеИмяФайла, "\", "/");
	Если ВНРегистр Тогда
		УниверсальноеПолноеИмя = НРег(УниверсальноеПолноеИмя);
	КонецЕсли;

	Возврат УниверсальноеПолноеИмя;
КонецФункции

// TODO Дубль кода в методах "УниверсальноеПолноеИмяФайлаШаговФичи" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
Функция УниверсальноеПолноеИмяФайлаШаговФичи(Знач ПутьФичи, Знач ИмяФичиБезРасширения)

	Результат = ПутьФичи + "step_definitions/" + УбратьСпецсимволыИзИмениОбработки(ИмяФичиБезРасширения) + ".epf";

	Возврат Результат;

КонецФункции

// TODO Дубль кода в методах "УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший" из УФ bddRunner, ОФ bddRunner и модуля объекта из vbFeatureReader
Функция УниверсальноеПолноеИмяФайлаШаговФичи_Устаревший(Знач ПутьФичи, Знач ИмяФичиБезРасширения)

	Результат = ПутьФичи + "step_definitions/" + ИмяФичиБезРасширения + ".epf";

	Возврат Результат;

КонецФункции

// TODO исправить дублирование с bddRunner
Функция ЗагрузитьФайлВМассив(Знач ИмяФайла, РезМассив = Неопределено)
	Если РезМассив <> Неопределено Тогда
		Массив = РезМассив;
	Иначе
		Массив = Новый Массив;
	КонецЕсли;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла, "UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Массив.Добавить(Стр);
	КонецЦикла;

	Текст.Закрыть();

	Возврат Массив;
КонецФункции

Функция ФайлФичиПоДвоичнымДанным(Знач ДвоичныеДанныеИлиПутьФичи)
	Если ТипЗнч(ДвоичныеДанныеИлиПутьФичи) = Тип("ДвоичныеДанные") Тогда
		ФайлВременнаяФича = ПолучитьИмяВременногоФайла("feature");
		ДвоичныеДанныеИлиПутьФичи.Записать(ФайлВременнаяФича);
		ДвоичныеДанныеИлиПутьФичи = ФайлВременнаяФича;
	КонецЕсли;
	Возврат ДвоичныеДанныеИлиПутьФичи;
КонецФункции

#КонецОбласти

ЭтоУФ = Ложь;

СоответствиеТаблицПереводов = Новый Соответствие;
СоответствиеТаблицПереводов.Вставить("ru", СоздатьТаблицуКлючевыхСлов_ru());
СоответствиеТаблицПереводов.Вставить("uk", СоздатьТаблицуКлючевыхСлов_uk());
СоответствиеТаблицПереводов.Вставить("en", СоздатьТаблицуКлючевыхСлов_en());
СоответствиеТаблицПереводов.Вставить("ro", СоздатьТаблицуКлючевыхСлов_ro());
СоответствиеТаблицПереводов.Вставить("de", СоздатьТаблицуКлючевыхСлов_de());
СоответствиеТаблицПереводов.Вставить("lv", СоздатьТаблицуКлючевыхСлов_lv());
СоответствиеТаблицПереводов.Вставить("it", СоздатьТаблицуКлючевыхСлов_it());
СоответствиеТаблицПереводов.Вставить("pl", СоздатьТаблицуКлючевыхСлов_pl());
СоответствиеТаблицПереводов.Вставить("vi", СоздатьТаблицуКлючевыхСлов_vi());

ТекущийЯзыкФичаФайла           = "ru";
ПредставлениеВертЧертыВТабДок  = "__&ВертЧерта__";
ПредставлениеАпостроф          = "__&Апостроф__";
ПредставлениеКавычка           = "__&Кавычка__";
ПредставлениеДвойнойСлеш       = "__&ДвойнойСлеш__";
ПредставлениеВертикальнаяЧерта = "__&ВертикальнаяЧерта__";
ПредставлениеТире              = "__&Тире__";

ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Ложь;
СистемнаяИнформация = Новый СистемнаяИнформация;
Если ВерсияПриложенияБольшеИлиРавнаЧемЗаданная(СистемнаяИнформация.ВерсияПриложения, "8.3.6.1977") Тогда
	Если РежимСовестимостиПозволяетИспользоватьНовыеСтроковыеФункции() Тогда
		ЕстьПоддержкаФункцияРазложитьСтрокуВМассивПодстрок = Истина;
	КонецЕсли;
КонецЕсли;

ТаблицаКешПервыхСлов = Новый ТаблицаЗначений;
ТаблицаКешПервыхСлов.Колонки.Добавить("ПерваяЧастьСтроки");
ТаблицаКешПервыхСлов.Колонки.Добавить("Слово");
ТаблицаКешПервыхСлов.Колонки.Добавить("Позиция");
ТаблицаКешПервыхСлов.Колонки.Добавить("Тип");

ТаблицаКешПервыхСлов.Индексы.Добавить("ПерваяЧастьСтроки");

СоответствиеПервыхСимволов = Новый Соответствие();
СоответствиеПервыхСимволов.Вставить("#", "#");
СоответствиеПервыхСимволов.Вставить("@", "@");
СоответствиеПервыхСимволов.Вставить("*", "*");
СоответствиеПервыхСимволов.Вставить("|", "|");

ПолучитьСтруктуруКлючевыхСловДляПоискаОжидаемыхКлючевых();
ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
