&НаКлиенте
Перем КонтекстЯдра;
&НаКлиенте
Перем Ожидаем;
&НаКлиенте
Перем Утверждения;

// { интерфейс тестирования

&НаКлиенте
Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	КонтекстЯдра = КонтекстЯдраПараметр;
	Утверждения = КонтекстЯдра.Плагин("БазовыеУтверждения");
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаборТестов(НаборТестов) Экспорт
	
	НаборТестов.НачатьГруппу("Применение разных параметров", Ложь);
	
		Тест = НаборТестов.Добавить("ТестДолжен_ПроверитьОрфографиюПропуститьЦифры",	, "Пропустить слова с цифрами");
		Тест.Параметры.Добавить("а1б2в3 - здесь нет ошибки");
		
		Тест = НаборТестов.Добавить("ТестДолжен_ПроверитьОрфографиюПропуститьУРЛ",		, "Пропустить url и подобное");
		Тест.Параметры.Добавить("Спасибо www.yandex.ru за сервис");
		
		// Тест = НаборТестов.Добавить("ТестДолжен_ПроверитьОрфографиюНайтиДублиСлов",	, "Найти дубли слов");  Отключен, так как сервис временно не проверяет дубли
		// Тест.Параметры.Добавить("Ищи ищи повторение слов");
		
		// Тест =  НаборТестов.Добавить("ТестДолжен_ПроверитьОрфографиюПрописныеБуквы",	, "Пропустить проверку прописных"); Отключен, так как сервис временно не проверяет прописные
		// Тест.Параметры.Добавить("тюмень столица всех деревень");
		
	НаборТестов.НачатьГруппу("Разные режимы работы", Ложь);
	
		Тест = НаборТестов.Добавить("ТестДолжен_ПолучитьРезультатПроверки",	, 	  "Получить результат анализа");
		Тест.Параметры.Добавить("сирвиз праверке ашибок");
		Тест = НаборТестов.Добавить("ТестДолжен_ПолучитьИсключениеПриПроверке", , "Получить исключение");
		Тест.Параметры.Добавить("сирвиз праверке ашибок");
	
	НаборТестов.НачатьГруппу("Работа со словарем", Ложь);
	
		Тест = НаборТестов.Добавить("ТестДолжен_ПроверитьТестСУчетомСловаря",	, 	  "Проверка без словаря");
		Тест.Параметры.Добавить("Удобно использовать славар, когда надо пропустить слова при проверке");	// проверяемая строка
		Тест.Параметры.Добавить("");																		// словарь
		Тест.Параметры.Добавить(Ложь);																		// использовать регулярку как шаблон
		Тест.Параметры.Добавить(1);																			// ожидаемое количество ошибок
		
		Тест = НаборТестов.Добавить("ТестДолжен_ПроверитьТестСУчетомСловаря",	, 	  "Проверка со словарем");
		Тест.Параметры.Добавить("Удобно использовать славар, когда надо пропустить слова при проверке");
		Тест.Параметры.Добавить("славар");
		Тест.Параметры.Добавить(Ложь);
		Тест.Параметры.Добавить(0);
		
		Тест = НаборТестов.Добавить("ТестДолжен_ПроверитьТестСУчетомСловаря",	, 	  "Проверка со словарем по шаблонам");
		Тест.Параметры.Добавить("Удобно использовать славар, когда надо пропустить слова при проверке");
	    Тест.Параметры.Добавить("сл*");
		Тест.Параметры.Добавить(Истина);
		Тест.Параметры.Добавить(0);
		
КонецПроцедуры

// } интерфейс тестирования

// { блок юнит-тестов - сами тесты

&НаКлиенте
Процедура ТестДолжен_ПроверитьОрфографиюПропуститьЦифры(ТекстНаПроверку) Экспорт
	
	ПроверкаОрфографии = КонтекстЯдра.Плагин("ПроверкаОрфографии");
	ПроверкаОрфографии.ПропускатьСловаСЦифрами(Истина);
	
	Результат = ПроверкаОрфографии.ВыполнитьПроверкуТекста(ТекстНаПроверку);
	
	Ожидаем.Что(Результат, "Ошибок быть не должно").ИмеетТип("Массив").ИмеетДлину(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьОрфографиюПропуститьУРЛ(ТекстНаПроверку) Экспорт
	
	ПроверкаОрфографии = КонтекстЯдра.Плагин("ПроверкаОрфографии");
	ПроверкаОрфографии.ПропускатьУРЛ(Истина);
	
	Результат = ПроверкаОрфографии.ВыполнитьПроверкуТекста(ТекстНаПроверку);
	
	Ожидаем.Что(Результат, "Ошибок быть не должно").ИмеетТип("Массив").ИмеетДлину(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьОрфографиюНайтиДублиСлов(ТекстНаПроверку) Экспорт
	
	ПроверкаОрфографии = КонтекстЯдра.Плагин("ПроверкаОрфографии");
	ПроверкаОрфографии.ПропускатьДублированиеСлов(Ложь);
	
	Результат = ПроверкаОрфографии.ВыполнитьПроверкуТекста(ТекстНаПроверку);
	
	Ожидаем.Что(Результат, "Должны быть ошибки").ИмеетТип("Массив").ИмеетДлину(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьОрфографиюПрописныеБуквы(ТекстНаПроверку) Экспорт
	
	ПроверкаОрфографии = КонтекстЯдра.Плагин("ПроверкаОрфографии");
	ПроверкаОрфографии.ПропускатьПрописные(Истина);
	
	Результат = ПроверкаОрфографии.ВыполнитьПроверкуТекста(ТекстНаПроверку);
	
	Ожидаем.Что(Результат, "Ошибок быть не должно").ИмеетТип("Массив").ИмеетДлину(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПолучитьРезультатПроверки(ТекстНаПроверку) Экспорт
	
	ПроверкаОрфографии = КонтекстЯдра.Плагин("ПроверкаОрфографии");
	
	Результат = ПроверкаОрфографии.ВыполнитьПроверкуТекста(ТекстНаПроверку);
	
	Ожидаем.Что(Результат, "Ошибок быть не должно").ИмеетТип("Массив").ИмеетДлину(3);
	Ожидаем.Что(Результат[0], "Некорректный результат проверки орфографии").ИмеетТип("Структура");
	Утверждения.ПроверитьВхождениеВКоллекцию("сирвиз", Результат[0], "Должно быть указано ошибочное слово");
	Утверждения.ПроверитьЗаполненность(Результат[0].Варианты, "Должны быть указаны варианты исправления");
	
КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПолучитьИсключениеПриПроверке(ТекстНаПроверку) Экспорт

	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ТекстНаПроверку", ТекстНаПроверку);
	Ожидаем.Что("Плагин(""ПроверкаОрфографии"")", "Должно возникнуть исключение с подробным описанием").Метод("ОжидаемЧтоНетОшибок", ПараметрыМетода).ВыбрасываетИсключение();

КонецПроцедуры

&НаКлиенте
Процедура ТестДолжен_ПроверитьТестСУчетомСловаря(ТекстНаПроверку, Словарь, ИспользоватьШаблоны, КонтрольнаяСумма) Экспорт

	ПроверкаОрфографии = КонтекстЯдра.Плагин("ПроверкаОрфографии");
	ПроверкаОрфографии.ИспользоватьСловарьИсключений("");
	
	ПроверкаОрфографии.ИспользоватьШаблонДляСловаря(ИспользоватьШаблоны);
	ПроверкаОрфографии.ИспользоватьСловарьИсключений(Словарь);
	
	
	Результат = ПроверкаОрфографии.ВыполнитьПроверкуТекста(ТекстНаПроверку);
	
	Ожидаем.Что(Результат.Количество()).Равно(КонтрольнаяСумма);
	
КонецПроцедуры



// } блок юнит-тестов - сами тесты
